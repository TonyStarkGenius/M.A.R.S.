
AVRASM ver. 2.1.30  C:\Users\pgmv2\Desktop\Хакатон\proga\Debug\List\V01.asm Sun Oct 21 09:47:30 2018

C:\Users\pgmv2\Desktop\Хакатон\proga\Debug\List\V01.asm(1090): warning: Register r3 already defined by the .DEF directive
C:\Users\pgmv2\Desktop\Хакатон\proga\Debug\List\V01.asm(1091): warning: Register r4 already defined by the .DEF directive
C:\Users\pgmv2\Desktop\Хакатон\proga\Debug\List\V01.asm(1092): warning: Register r5 already defined by the .DEF directive
C:\Users\pgmv2\Desktop\Хакатон\proga\Debug\List\V01.asm(1093): warning: Register r6 already defined by the .DEF directive
C:\Users\pgmv2\Desktop\Хакатон\proga\Debug\List\V01.asm(1094): warning: Register r8 already defined by the .DEF directive
C:\Users\pgmv2\Desktop\Хакатон\proga\Debug\List\V01.asm(1095): warning: Register r7 already defined by the .DEF directive
C:\Users\pgmv2\Desktop\Хакатон\proga\Debug\List\V01.asm(1096): warning: Register r10 already defined by the .DEF directive
C:\Users\pgmv2\Desktop\Хакатон\proga\Debug\List\V01.asm(1097): warning: Register r11 already defined by the .DEF directive
C:\Users\pgmv2\Desktop\Хакатон\proga\Debug\List\V01.asm(1098): warning: Register r12 already defined by the .DEF directive
C:\Users\pgmv2\Desktop\Хакатон\proga\Debug\List\V01.asm(1099): warning: Register r13 already defined by the .DEF directive
C:\Users\pgmv2\Desktop\Хакатон\proga\Debug\List\V01.asm(1100): warning: Register r14 already defined by the .DEF directive
C:\Users\pgmv2\Desktop\Хакатон\proga\Debug\List\V01.asm(1101): warning: Register r9 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega328P
                 ;Program type           : Application
                 ;Clock frequency        : 16,000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Speed
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega328P
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU EECR=0x1F
                 	.EQU EEDR=0x20
                 	.EQU EEARL=0x21
                 	.EQU EEARH=0x22
                 	.EQU SPSR=0x2D
                 	.EQU SPDR=0x2E
                 	.EQU SMCR=0x33
                 	.EQU MCUSR=0x34
                 	.EQU MCUCR=0x35
                 	.EQU WDTCSR=0x60
                 	.EQU UCSR0A=0xC0
                 	.EQU UDR0=0xC6
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU GPIOR0=0x1E
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x08FF
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _cod0=R3
                 	.DEF _cod0_msb=R4
                 	.DEF _codTemp=R5
                 	.DEF _codTemp_msb=R6
                 	.DEF _permit=R8
                 	.DEF _co2p=R7
                 	.DEF _timerCounter=R10
                 	.DEF _consentration=R11
                 	.DEF _consentration_msb=R12
                 	.DEF _co2=R13
                 	.DEF _co2_msb=R14
                 	.DEF _txWrIndex=R9
                 
                 ;GPIOR0 INITIALIZATION VALUE
                 	.EQU __GPIOR0_INIT=0x00
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 007d 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0155 	JMP  _timer0_ovf_isr
000022 940c 0000 	JMP  0x00
000024 940c 00ac 	JMP  _usart_rx_isr
000026 940c 012e 	JMP  _usart_dre_isr
000028 940c 0115 	JMP  _usart_tx_isr
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 120b 	JMP  _twi_int_handler
000032 940c 0000 	JMP  0x00
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000034 0000      	.DB  0x0,0x0
                 
                 _0x3:
C:\Users\pgmv2\Desktop\Хакатон\proga\Debug\List\V01.asm(1145): warning: .cseg .db misalignment - padding zero byte
000035 0010      	.DB  0x10
                 _0x4:
000036 7878
000037 7878
000038 782e      	.DB  0x78,0x78,0x78,0x78,0x2E,0x78
                 _0x5:
000039 7878
00003a 782e
C:\Users\pgmv2\Desktop\Хакатон\proga\Debug\List\V01.asm(1149): warning: .cseg .db misalignment - padding zero byte
00003b 0030      	.DB  0x78,0x78,0x2E,0x78,0x30
                 _0x6:
00003c 782b
00003d 2e78
C:\Users\pgmv2\Desktop\Хакатон\proga\Debug\List\V01.asm(1151): warning: .cseg .db misalignment - padding zero byte
00003e 0078      	.DB  0x2B,0x78,0x78,0x2E,0x78
                 _0x7:
00003f 782b
000040 2e78
C:\Users\pgmv2\Desktop\Хакатон\proga\Debug\List\V01.asm(1153): warning: .cseg .db misalignment - padding zero byte
000041 0078      	.DB  0x2B,0x78,0x78,0x2E,0x78
                 _0x8:
000042 7878
000043 2e78
000044 7878      	.DB  0x78,0x78,0x78,0x2E,0x78,0x78
                 _0x0:
000045 782b
000046 2e78
000047 4378
000048 7820      	.DB  0x2B,0x78,0x78,0x2E,0x78,0x43,0x20,0x78
000049 7878
00004a 782e
00004b 6b78
00004c 6150      	.DB  0x78,0x78,0x2E,0x78,0x78,0x6B,0x50,0x61
00004d 7800
00004e 2e78
00004f 7878
000050 2025      	.DB  0x0,0x78,0x78,0x2E,0x78,0x78,0x25,0x20
000051 7878
000052 7878
000053 782e
000054 7070      	.DB  0x78,0x78,0x78,0x78,0x2E,0x78,0x70,0x70
000055 006d      	.DB  0x6D,0x0
                 _0x2020003:
000056 c080      	.DB  0x80,0xC0
                 _0x2040003:
C:\Users\pgmv2\Desktop\Хакатон\proga\Debug\List\V01.asm(1165): warning: .cseg .db misalignment - padding zero byte
000057 0007      	.DB  0x7
                 _0x2060060:
C:\Users\pgmv2\Desktop\Хакатон\proga\Debug\List\V01.asm(1167): warning: .cseg .db misalignment - padding zero byte
000058 0001      	.DB  0x1
                 _0x2060000:
000059 4e2d
00005a 4e41
00005b 4900
00005c 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
C:\Users\pgmv2\Desktop\Хакатон\proga\Debug\List\V01.asm(1170): warning: .cseg .db misalignment - padding zero byte
00005d 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
00005e 0002      	.DW  0x02
00005f 0009      	.DW  0x09
000060 0068      	.DW  __REG_VARS*2
                 
000061 0001      	.DW  0x01
000062 0300      	.DW  _dataLed
000063 006a      	.DW  _0x3*2
                 
000064 0006      	.DW  0x06
000065 0471      	.DW  _co2s
000066 006c      	.DW  _0x4*2
                 
000067 0005      	.DW  0x05
000068 0478      	.DW  _vs
000069 0072      	.DW  _0x5*2
                 
00006a 0005      	.DW  0x05
00006b 047e      	.DW  _t1s
00006c 0078      	.DW  _0x6*2
                 
00006d 0005      	.DW  0x05
00006e 0484      	.DW  _t2s
00006f 007e      	.DW  _0x7*2
                 
000070 0006      	.DW  0x06
000071 048a      	.DW  _ps
000072 0084      	.DW  _0x8*2
                 
000073 0002      	.DW  0x02
000074 04f8      	.DW  __base_y_G101
000075 00ac      	.DW  _0x2020003*2
                 
000076 0001      	.DW  0x01
000077 04f7      	.DW  _twi_result
000078 00ae      	.DW  _0x2040003*2
                 
000079 0001      	.DW  0x01
00007a 050b      	.DW  __seed_G103
00007b 00b0      	.DW  _0x2060060*2
                 
                 _0xFFFFFFFF:
00007c 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00007d 94f8      	CLI
00007e 27ee      	CLR  R30
00007f bbef      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000080 e0f1      	LDI  R31,1
000081 bff5      	OUT  MCUCR,R31
000082 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000083 e08d      	LDI  R24,(14-2)+1
000084 e0a2      	LDI  R26,2
000085 27bb      	CLR  R27
                 __CLEAR_REG:
000086 93ed      	ST   X+,R30
000087 958a      	DEC  R24
000088 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000089 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00008a e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00008b e0a0      	LDI  R26,LOW(__SRAM_START)
00008c e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
00008d 93ed      	ST   X+,R30
00008e 9701      	SBIW R24,1
00008f f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000090 ebec      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000091 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000092 9185      	LPM  R24,Z+
000093 9195      	LPM  R25,Z+
000094 9700      	SBIW R24,0
000095 f061      	BREQ __GLOBAL_INI_END
000096 91a5      	LPM  R26,Z+
000097 91b5      	LPM  R27,Z+
000098 9005      	LPM  R0,Z+
000099 9015      	LPM  R1,Z+
00009a 01bf      	MOVW R22,R30
00009b 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00009c 9005      	LPM  R0,Z+
00009d 920d      	ST   X+,R0
00009e 9701      	SBIW R24,1
00009f f7e1      	BRNE __GLOBAL_INI_LOOP
0000a0 01fb      	MOVW R30,R22
0000a1 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;GPIOR0 INITIALIZATION
0000a2 e0e0      	LDI  R30,__GPIOR0_INIT
0000a3 bbee      	OUT  GPIOR0,R30
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
0000a4 efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
0000a5 bfed      	OUT  SPL,R30
0000a6 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
0000a7 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
0000a8 e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
0000a9 e0d3      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
0000aa 940c 0221 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x300
                 
                 	.CSEG
                 ;/*******************************************************
                 ;This program was created by the
                 ;CodeWizardAVR V3.12 Advanced
                 ;Automatic Program Generator
                 ;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 ;
                 ;Project :
                 ;Version :
                 ;Date    : 02.11.2017
                 ;Author  :
                 ;Company :
                 ;Comments:
                 ;
                 ;
                 ;Chip type               : ATmega328P
                 ;Program type            : Application
                 ;AVR Core Clock frequency: 16,000000 MHz
                 ;Memory model            : Small
                 ;External RAM size       : 0
                 ;Data Stack size         : 512
                 ;*******************************************************/
                 ;
                 ;/*
                 ;Управление
                 ;    G   -   начать передачу данных по ВТ
                 ;    R   -   остановить передачу данных по ВТ
                 ;    C   -   передавать температуру оцифрованную DHT-22
                 ;    c   -   передавать темпераутру оцифрованную BMP-180
                 ;    S   -   перейти в режим настройки (концентрация СО2 указывается в коде, а не ррм
                 ;    s   -   перейти в обычный режим
                 ;    x   -   в режиме настройки команда х111, где 111 - любые цифры, изменяет в программе код0
                 ;Возврат
                 ;*/
                 ;
                 ;
                 ;#include <mega328p.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x01
                 	.EQU __sm_mask=0x0E
                 	.EQU __sm_adc_noise_red=0x02
                 	.EQU __sm_powerdown=0x04
                 	.EQU __sm_powersave=0x06
                 	.EQU __sm_standby=0x0C
                 	.EQU __sm_ext_standby=0x0E
                 	.SET power_ctrl_reg=smcr
                 	#endif
                 ;#include <delay.h>
                 ;#include <math.h>
                 ;
                 ;// Alphanumeric LCD functions
                 ;#include <alcd.h>
                 ;
                 ;#define Bit(bit)				(1<<(bit))						//Обратится к биту
                 ;#define ClearBit(reg, bit)      reg &= (~(1<<(bit)))			//Очистить бит
                 ;#define SetBit(reg, bit)        reg |= (1<<(bit))				//Установить бит
                 ;#define BitIsClear(reg, bit)    ((reg & (1<<(bit))) == 0)		//Проверка очистки бита
                 ;#define BitIsSet(reg, bit)      ((reg & (1<<(bit))) != 0)		//Проверка установки бита
                 ;#define InvBit(reg, bit)        reg ^= (1<<(bit))				//Инвертировать бит
                 ;
                 ;#define DC_GAIN 8.5
                 ;#define ZERO_POINT_VOLTAGE  0.325
                 ;#define REACTION_VOLTAGE    0.02
                 ;#define UREF                5
                 ;
                 ;eeprom unsigned int etemp;
                 ;eeprom unsigned char eCod0,eCod1;
                 ;unsigned int cod0,codTemp;
                 ;unsigned char dataLed[96]={0x10};
                 
                 	.DSEG
                 ;
                 ;// Declare your global variables here
                 ;bit timerEnd,errorDHT,Sw,Run,Stp,Ust;
                 ;unsigned char permit,co2p,timerCounter=0;
                 ;unsigned int consentration,co2,v,co2led,vled;
                 ;int t1;
                 ;float xxx,xxx1;
                 ;
                 ;
                 ;unsigned char txBuffer[256];
                 ;unsigned char txWrIndex=0,txRdIndex=0;
                 ;unsigned char co2s[7]={'x','x','x','x','.','x',0};
                 ;unsigned char vs[6]={'x','x','.','x','0',0};
                 ;unsigned char t1s[6]={'+','x','x','.','x',0};
                 ;unsigned char t2s[6]={'+','x','x','.','x',0};
                 ;unsigned char ps[7]={'x','x','x','.','x','x',0};
                 ;unsigned char twi_eeprom[22];
                 ;unsigned char twi_adr[2];
                 ;int ac1,ac2,ac3,b1,b2,mb,mc,md;
                 ;unsigned int ac4,ac5,ac6;
                 ;long int ut,x1,x2,b5,t,b6,x3,b3,pressure,p;
                 ;unsigned long b4,b7;
                 ;
                 ;unsigned char nnn;
                 ;
                 ;interrupt [USART_RXC] void usart_rx_isr(void)
                 ; 0000 0056 {
                 
                 	.CSEG
                 _usart_rx_isr:
                 ; .FSTART _usart_rx_isr
0000ac 920a      	ST   -Y,R0
0000ad 921a      	ST   -Y,R1
0000ae 938a      	ST   -Y,R24
0000af 939a      	ST   -Y,R25
0000b0 93aa      	ST   -Y,R26
0000b1 93ba      	ST   -Y,R27
0000b2 93ea      	ST   -Y,R30
0000b3 93fa      	ST   -Y,R31
0000b4 b7ef      	IN   R30,SREG
0000b5 93ea      	ST   -Y,R30
                 ; 0000 0057     unsigned char temp;
                 ; 0000 0058     temp=UDR0;
0000b6 931a      	ST   -Y,R17
                 ;	temp -> R17
0000b7 9110 00c6 	LDS  R17,198
                 ; 0000 0059     if (Ust)
0000b9 9bf5      	SBIS 0x1E,5
0000ba c024      	RJMP _0x9
                 ; 0000 005A     {
                 ; 0000 005B         codTemp*=10;
                +
0000bb 2de5     +MOV R30 , R5
0000bc 2df6     +MOV R31 , R6
                 	__GETW1R 5,6
0000bd e0aa      	LDI  R26,LOW(10)
0000be e0b0      	LDI  R27,HIGH(10)
0000bf 940e 1633 	CALL __MULW12U
                +
0000c1 2e5e     +MOV R5 , R30
0000c2 2e6f     +MOV R6 , R31
                 	__PUTW1R 5,6
                 ; 0000 005C         codTemp+=temp-'0';
0000c3 2fe1      	MOV  R30,R17
0000c4 e0f0      	LDI  R31,0
0000c5 97f0      	SBIW R30,48
                +
0000c6 0e5e     +ADD R5 , R30
0000c7 1e6f     +ADC R6 , R31
                 	__ADDWRR 5,6,30,31
                 ; 0000 005D         nnn--;
0000c8 91e0 04ef 	LDS  R30,_nnn
0000ca 50e1      	SUBI R30,LOW(1)
0000cb 93e0 04ef 	STS  _nnn,R30
                 ; 0000 005E         if (nnn==0)
0000cd 30e0      	CPI  R30,0
0000ce f011      	BREQ PC+3
0000cf 940c 00df 	JMP _0xA
                 ; 0000 005F         {
                 ; 0000 0060             eCod0=codTemp/256;
0000d1 2de6      	MOV  R30,R6
0000d2 70f0      	ANDI R31,HIGH(0x0)
0000d3 e0a2      	LDI  R26,LOW(_eCod0)
0000d4 e0b0      	LDI  R27,HIGH(_eCod0)
0000d5 940e 1704 	CALL __EEPROMWRB
                 ; 0000 0061             eCod1=codTemp%256;
0000d7 2de5      	MOV  R30,R5
0000d8 e0a3      	LDI  R26,LOW(_eCod1)
0000d9 e0b0      	LDI  R27,HIGH(_eCod1)
0000da 940e 1704 	CALL __EEPROMWRB
                 ; 0000 0062             cod0=codTemp;
                +
0000dc 2c35     +MOV R3 , R5
0000dd 2c46     +MOV R4 , R6
                 	__MOVEWRR 3,4,5,6
                 ; 0000 0063             Ust=0;
0000de 98f5      	CBI  0x1E,5
                 ; 0000 0064         }
                 ; 0000 0065     }
                 _0xA:
                 ; 0000 0066     if (temp=='C')
                 _0x9:
0000df 3413      	CPI  R17,67
0000e0 f011      	BREQ PC+3
0000e1 940c 00e4 	JMP _0xD
                 ; 0000 0067         Sw=1;
0000e3 9af2      	SBI  0x1E,2
                 ; 0000 0068     if (temp=='c')
                 _0xD:
0000e4 3613      	CPI  R17,99
0000e5 f011      	BREQ PC+3
0000e6 940c 00e9 	JMP _0x10
                 ; 0000 0069         Sw=0;
0000e8 98f2      	CBI  0x1E,2
                 ; 0000 006A     if (temp=='G')
                 _0x10:
0000e9 3417      	CPI  R17,71
0000ea f011      	BREQ PC+3
0000eb 940c 00ee 	JMP _0x13
                 ; 0000 006B         Run=1;
0000ed 9af3      	SBI  0x1E,3
                 ; 0000 006C     if (temp=='R')
                 _0x13:
0000ee 3512      	CPI  R17,82
0000ef f011      	BREQ PC+3
0000f0 940c 00f3 	JMP _0x16
                 ; 0000 006D         Run=0;
0000f2 98f3      	CBI  0x1E,3
                 ; 0000 006E     if (temp=='S')
                 _0x16:
0000f3 3513      	CPI  R17,83
0000f4 f011      	BREQ PC+3
0000f5 940c 00f8 	JMP _0x19
                 ; 0000 006F         Stp=0;
0000f7 98f4      	CBI  0x1E,4
                 ; 0000 0070     if (temp=='s')
                 _0x19:
0000f8 3713      	CPI  R17,115
0000f9 f011      	BREQ PC+3
0000fa 940c 00fd 	JMP _0x1C
                 ; 0000 0071         Stp=1;
0000fc 9af4      	SBI  0x1E,4
                 ; 0000 0072     if (temp=='x')
                 _0x1C:
0000fd 3718      	CPI  R17,120
0000fe f011      	BREQ PC+3
0000ff 940c 0109 	JMP _0x1F
                 ; 0000 0073         if (Stp==0)
000101 99f4      	SBIC 0x1E,4
000102 c006      	RJMP _0x20
                 ; 0000 0074         {
                 ; 0000 0075             Ust=1;
000103 9af5      	SBI  0x1E,5
                 ; 0000 0076             nnn=3;
000104 e0e3      	LDI  R30,LOW(3)
000105 93e0 04ef 	STS  _nnn,R30
                 ; 0000 0077             codTemp=0;
000107 2455      	CLR  R5
000108 2466      	CLR  R6
                 ; 0000 0078         }
                 ; 0000 0079 }
                 _0x20:
                 _0x1F:
000109 9119      	LD   R17,Y+
00010a 91e9      	LD   R30,Y+
00010b bfef      	OUT  SREG,R30
00010c 91f9      	LD   R31,Y+
00010d 91e9      	LD   R30,Y+
00010e 91b9      	LD   R27,Y+
00010f 91a9      	LD   R26,Y+
000110 9199      	LD   R25,Y+
000111 9189      	LD   R24,Y+
000112 9019      	LD   R1,Y+
000113 9009      	LD   R0,Y+
000114 9518      	RETI
                 ; .FEND
                 ;
                 ;// USART Transmitter interrupt service routine
                 ;interrupt [USART_TXC] void usart_tx_isr(void)
                 ; 0000 007D {
                 _usart_tx_isr:
                 ; .FSTART _usart_tx_isr
000115 93aa      	ST   -Y,R26
000116 93ea      	ST   -Y,R30
000117 b7ef      	IN   R30,SREG
000118 93ea      	ST   -Y,R30
                 ; 0000 007E     ClearBit(UCSR0B,TXCIE0);									//Запретить прерывания по завершению передачи
000119 91e0 00c1 	LDS  R30,193
00011b 7bef      	ANDI R30,0xBF
00011c 93e0 00c1 	STS  193,R30
                 ; 0000 007F 	if (txRdIndex!=txWrIndex)									//Если появился новый символ для передачи
00011e 91a0 0470 	LDS  R26,_txRdIndex
000120 169a      	CP   R9,R26
000121 f411      	BRNE PC+3
000122 940c 0129 	JMP _0x23
                 ; 0000 0080 		SetBit(UCSR0B,UDRIE0);
000124 91e0 00c1 	LDS  R30,193
000126 62e0      	ORI  R30,0x20
000127 93e0 00c1 	STS  193,R30
                 ; 0000 0081 }
                 _0x23:
000129 91e9      	LD   R30,Y+
00012a bfef      	OUT  SREG,R30
00012b 91e9      	LD   R30,Y+
00012c 91a9      	LD   R26,Y+
00012d 9518      	RETI
                 ; .FEND
                 ;
                 ;// USART DRE interrupt service routine
                 ;interrupt [USART_DRE] void usart_dre_isr(void)
                 ; 0000 0085 {
                 _usart_dre_isr:
                 ; .FSTART _usart_dre_isr
00012e 93aa      	ST   -Y,R26
00012f 93ea      	ST   -Y,R30
000130 93fa      	ST   -Y,R31
000131 b7ef      	IN   R30,SREG
000132 93ea      	ST   -Y,R30
                 ; 0000 0086     UDR0=txBuffer[txRdIndex++];
000133 91e0 0470 	LDS  R30,_txRdIndex
000135 5fef      	SUBI R30,-LOW(1)
000136 93e0 0470 	STS  _txRdIndex,R30
000138 50e1      	SUBI R30,LOW(1)
000139 e0f0      	LDI  R31,0
00013a 59e0      	SUBI R30,LOW(-_txBuffer)
00013b 4ffc      	SBCI R31,HIGH(-_txBuffer)
00013c 81e0      	LD   R30,Z
00013d 93e0 00c6 	STS  198,R30
                 ; 0000 0087     if (txRdIndex==txWrIndex)									//Если достигли конца команды
00013f 91a0 0470 	LDS  R26,_txRdIndex
000141 169a      	CP   R9,R26
000142 f011      	BREQ PC+3
000143 940c 014f 	JMP _0x24
                 ; 0000 0088 	{
                 ; 0000 0089 		ClearBit(UCSR0B,UDRIE0);								//Запретить прерывания - регистр данных пуст
000145 91e0 00c1 	LDS  R30,193
000147 7def      	ANDI R30,0xDF
000148 93e0 00c1 	STS  193,R30
                 ; 0000 008A 		SetBit(UCSR0B,TXCIE0);
00014a 91e0 00c1 	LDS  R30,193
00014c 64e0      	ORI  R30,0x40
00014d 93e0 00c1 	STS  193,R30
                 ; 0000 008B 	}
                 ; 0000 008C }
                 _0x24:
00014f 91e9      	LD   R30,Y+
000150 bfef      	OUT  SREG,R30
000151 91f9      	LD   R31,Y+
000152 91e9      	LD   R30,Y+
000153 91a9      	LD   R26,Y+
000154 9518      	RETI
                 ; .FEND
                 ;
                 ;// Timer 0 overflow interrupt service routine
                 ;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
                 ; 0000 0090 {
                 _timer0_ovf_isr:
                 ; .FSTART _timer0_ovf_isr
000155 93ea      	ST   -Y,R30
000156 b7ef      	IN   R30,SREG
000157 93ea      	ST   -Y,R30
                 ; 0000 0091     timerCounter++;
000158 94a3      	INC  R10
                 ; 0000 0092     if (timerCounter==7)
000159 e0e7      	LDI  R30,LOW(7)
00015a 15ea      	CP   R30,R10
00015b f011      	BREQ PC+3
00015c 940c 0160 	JMP _0x25
                 ; 0000 0093     {
                 ; 0000 0094         timerEnd=0;
00015e 98f0      	CBI  0x1E,0
                 ; 0000 0095         timerCounter=0;
00015f 24aa      	CLR  R10
                 ; 0000 0096     }
                 ; 0000 0097 }
                 _0x25:
000160 91e9      	LD   R30,Y+
000161 bfef      	OUT  SREG,R30
000162 91e9      	LD   R30,Y+
000163 9518      	RETI
                 ; .FEND
                 ;
                 ;// Voltage Reference: AVCC pin
                 ;#define ADC_VREF_TYPE ((0<<REFS1) | (1<<REFS0) | (0<<ADLAR))
                 ;
                 ;unsigned int readADC(void)
                 ; 0000 009D {
                 _readADC:
                 ; .FSTART _readADC
                 ; 0000 009E     SetBit(ADCSRA,ADSC);
000164 91e0 007a 	LDS  R30,122
000166 64e0      	ORI  R30,0x40
000167 93e0 007a 	STS  122,R30
                 ; 0000 009F     // Wait for the AD conversion to complete
                 ; 0000 00A0     while (BitIsClear(ADCSRA,ADIF)){};
                 _0x28:
000169 91e0 007a 	LDS  R30,122
00016b 71e0      	ANDI R30,LOW(0x10)
00016c f011      	BREQ PC+3
00016d 940c 0170 	JMP _0x2A
00016f cff9      	RJMP _0x28
                 _0x2A:
                 ; 0000 00A1     SetBit(ADCSRA,ADIF);
000170 91e0 007a 	LDS  R30,122
000172 61e0      	ORI  R30,0x10
000173 93e0 007a 	STS  122,R30
                 ; 0000 00A2     return ADCW;
000175 91e0 0078 	LDS  R30,120
000177 91f0 0079 	LDS  R31,120+1
000179 9508      	RET
                 ; 0000 00A3 }
                 ; .FEND
                 ;
                 ;unsigned char dataDHT[5];						//Данные (5 байт) принимаемые от DHT22
                 ;unsigned char readDHT(void)
                 ; 0000 00A7 {
                 _readDHT:
                 ; .FSTART _readDHT
                 ; 0000 00A8     unsigned char id,jd;
                 ; 0000 00A9 	SetBit(DDRD,2);
00017a 931a      	ST   -Y,R17
00017b 930a      	ST   -Y,R16
                 ;	id -> R17
                 ;	jd -> R16
00017c 9a52      	SBI  0xA,2
                 ; 0000 00AA 	ClearBit(PORTD,2);
00017d 985a      	CBI  0xB,2
                 ; 0000 00AB 	delay_ms(25);
00017e e1a9      	LDI  R26,LOW(25)
00017f e0b0      	LDI  R27,0
000180 940e 13f5 	CALL _delay_ms
                 ; 0000 00AC 	SetBit(PORTD,2);
000182 9a5a      	SBI  0xB,2
                 ; 0000 00AD     delay_us(30);
                +
000183 ea80     +LDI R24 , LOW ( 160 )
                +__DELAY_USB_LOOP :
000184 958a     +DEC R24
000185 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 160
                 ; 0000 00AE 	ClearBit(DDRD,2);
000186 9852      	CBI  0xA,2
                 ; 0000 00AF 	delay_us(40);
                +
000187 ed85     +LDI R24 , LOW ( 213 )
                +__DELAY_USB_LOOP :
000188 958a     +DEC R24
000189 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 213
                 ; 0000 00B0 	if (BitIsSet(PIND,2)) return 0;
00018a 9b4a      	SBIS 0x9,2
00018b c004      	RJMP _0x2B
00018c e0e0      	LDI  R30,LOW(0)
00018d 9109      	LD   R16,Y+
00018e 9119      	LD   R17,Y+
00018f 9508      	RET
                 ; 0000 00B1 	delay_us(80);
                 _0x2B:
                +
000190 e480     +LDI R24 , LOW ( 320 )
000191 e091     +LDI R25 , HIGH ( 320 )
                +__DELAY_USW_LOOP :
000192 9701     +SBIW R24 , 1
000193 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 320
                 ; 0000 00B2 	if (BitIsClear(PIND,2)) return 0;
000194 994a      	SBIC 0x9,2
000195 c004      	RJMP _0x2C
000196 e0e0      	LDI  R30,LOW(0)
000197 9109      	LD   R16,Y+
000198 9119      	LD   R17,Y+
000199 9508      	RET
                 ; 0000 00B3 	while (BitIsSet(PIND,2))
                 _0x2C:
                 _0x2D:
00019a 9b4a      	SBIS 0x9,2
00019b c007      	RJMP _0x2F
                 ; 0000 00B4         if (!timerEnd)
00019c 99f0      	SBIC 0x1E,0
00019d c004      	RJMP _0x30
                 ; 0000 00B5             return 0;
00019e e0e0      	LDI  R30,LOW(0)
00019f 9109      	LD   R16,Y+
0001a0 9119      	LD   R17,Y+
0001a1 9508      	RET
                 ; 0000 00B6 	for (id=0;id<5;id++){
                 _0x30:
0001a2 cff7      	RJMP _0x2D
                 _0x2F:
0001a3 e010      	LDI  R17,LOW(0)
                 _0x32:
0001a4 3015      	CPI  R17,5
0001a5 f010      	BRLO PC+3
0001a6 940c 01db 	JMP _0x33
                 ; 0000 00B7 		dataDHT[id]=0;
0001a8 2fe1      	MOV  R30,R17
0001a9 e0f0      	LDI  R31,0
0001aa 51e0      	SUBI R30,LOW(-_dataDHT)
0001ab 4ffb      	SBCI R31,HIGH(-_dataDHT)
0001ac e0a0      	LDI  R26,LOW(0)
0001ad 83a0      	STD  Z+0,R26
                 ; 0000 00B8         jd=7;
0001ae e007      	LDI  R16,LOW(7)
                 ; 0000 00B9         while (jd!=0xff)
                 _0x34:
0001af 3f0f      	CPI  R16,255
0001b0 f411      	BRNE PC+3
0001b1 940c 01d9 	JMP _0x36
                 ; 0000 00BA         {
                 ; 0000 00BB 			while (BitIsClear(PIND,2))
                 _0x37:
0001b3 994a      	SBIC 0x9,2
0001b4 c007      	RJMP _0x39
                 ; 0000 00BC                 if (!timerEnd)
0001b5 99f0      	SBIC 0x1E,0
0001b6 c004      	RJMP _0x3A
                 ; 0000 00BD                     return 0;
0001b7 e0e0      	LDI  R30,LOW(0)
0001b8 9109      	LD   R16,Y+
0001b9 9119      	LD   R17,Y+
0001ba 9508      	RET
                 ; 0000 00BE 			delay_us(40);
                 _0x3A:
0001bb cff7      	RJMP _0x37
                 _0x39:
                +
0001bc ed85     +LDI R24 , LOW ( 213 )
                +__DELAY_USB_LOOP :
0001bd 958a     +DEC R24
0001be f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 213
                 ; 0000 00BF 			if (BitIsSet(PIND,2))
0001bf 9b4a      	SBIS 0x9,2
0001c0 c00d      	RJMP _0x3B
                 ; 0000 00C0 				dataDHT[id]|=(1<<jd);
0001c1 2fe1      	MOV  R30,R17
0001c2 e0f0      	LDI  R31,0
0001c3 51e0      	SUBI R30,LOW(-_dataDHT)
0001c4 4ffb      	SBCI R31,HIGH(-_dataDHT)
0001c5 01bf      	MOVW R22,R30
0001c6 8010      	LD   R1,Z
0001c7 2fe0      	MOV  R30,R16
0001c8 e0a1      	LDI  R26,LOW(1)
0001c9 940e 15e0 	CALL __LSLB12
0001cb 29e1      	OR   R30,R1
0001cc 01db      	MOVW R26,R22
0001cd 93ec      	ST   X,R30
                 ; 0000 00C1 			while (BitIsSet(PIND,2))
                 _0x3B:
                 _0x3C:
0001ce 9b4a      	SBIS 0x9,2
0001cf c007      	RJMP _0x3E
                 ; 0000 00C2                 if (!timerEnd)
0001d0 99f0      	SBIC 0x1E,0
0001d1 c004      	RJMP _0x3F
                 ; 0000 00C3                     return 0;
0001d2 e0e0      	LDI  R30,LOW(0)
0001d3 9109      	LD   R16,Y+
0001d4 9119      	LD   R17,Y+
0001d5 9508      	RET
                 ; 0000 00C4             jd--;
                 _0x3F:
0001d6 cff7      	RJMP _0x3C
                 _0x3E:
0001d7 5001      	SUBI R16,1
                 ; 0000 00C5 		}
0001d8 cfd6      	RJMP _0x34
                 _0x36:
                 ; 0000 00C6 	}
                 _0x31:
0001d9 5f1f      	SUBI R17,-1
0001da cfc9      	RJMP _0x32
                 _0x33:
                 ; 0000 00C7 	return 1;
0001db e0e1      	LDI  R30,LOW(1)
0001dc 9109      	LD   R16,Y+
0001dd 9119      	LD   R17,Y+
0001de 9508      	RET
                 ; 0000 00C8 }
                 ; .FEND
                 ;
                 ;#pragma warn-
                 ;void asmSendData(unsigned char n){
                 ; 0000 00CB void asmSendData(unsigned char n){
                 _asmSendData:
                 ; .FSTART _asmSendData
                 ; 0000 00CC #asm
0001df 93aa      	ST   -Y,R26
                 ;	n -> Y+0
                 ; 0000 00CD 	cli
0001e0 94f8      	cli
                 ; 0000 00CE 	push r30
0001e1 93ef      	push r30
                 ; 0000 00CF 	push r31
0001e2 93ff      	push r31
                 ; 0000 00D0     push r28
0001e3 93cf          push r28
                 ; 0000 00D1     push r29
0001e4 93df          push r29
                 ; 0000 00D2     push r26
0001e5 93af          push r26
                 ; 0000 00D3     push r27
0001e6 93bf          push r27
                 ; 0000 00D4 	push r18
0001e7 932f      	push r18
                 ; 0000 00D5 	push r19
0001e8 933f      	push r19
                 ; 0000 00D6 	push r20
0001e9 934f      	push r20
                 ; 0000 00D7     ld   r18,y               ;R18 bytes
0001ea 8128          ld   r18,y               ;R18 bytes
                 ; 0000 00D8 	ldi R30,0x00	            ;Z dataLed  (0x0300)
0001eb e0e0      	ldi R30,0x00	            ;Z dataLed  (0x0300)
                 ; 0000 00D9 	ldi R31,0x03
0001ec e0f3      	ldi R31,0x03
                 ; 0000 00DA m4:	ldi R19,8				;R19 bits
0001ed e038      m4:	ldi R19,8				;R19 bits
                 ; 0000 00DB 	ld R20,Z+				;R20 data
0001ee 9141      	ld R20,Z+				;R20 data
                 ; 0000 00DC m3:	cbi 0x05,3				;0x05 PORTB
0001ef 982b      m3:	cbi 0x05,3				;0x05 PORTB
                 ; 0000 00DD m5:	nop
0001f0 0000      m5:	nop
                 ; 0000 00DE 	nop
0001f1 0000      	nop
                 ; 0000 00DF 	nop
0001f2 0000      	nop
                 ; 0000 00E0 	lsl R20
0001f3 0f44      	lsl R20
                 ; 0000 00E1 	sbi 0x05,3
0001f4 9a2b      	sbi 0x05,3
                 ; 0000 00E2 	nop
0001f5 0000      	nop
                 ; 0000 00E3 	nop
0001f6 0000      	nop
                 ; 0000 00E4 	nop
0001f7 0000      	nop
                 ; 0000 00E5 	brcs m1
0001f8 f088      	brcs m1
                 ; 0000 00E6 	cbi 0x05,3
0001f9 982b      	cbi 0x05,3
                 ; 0000 00E7 	nop
0001fa 0000      	nop
                 ; 0000 00E8 	nop
0001fb 0000      	nop
                 ; 0000 00E9 	nop
0001fc 0000      	nop
                 ; 0000 00EA 	nop
0001fd 0000      	nop
                 ; 0000 00EB 	nop
0001fe 0000      	nop
                 ; 0000 00EC 	dec R19
0001ff 953a      	dec R19
                 ; 0000 00ED 	brne m5
000200 f779      	brne m5
                 ; 0000 00EE 	dec R18
000201 952a      	dec R18
                 ; 0000 00EF 	brne m4
000202 f751      	brne m4
                 ; 0000 00F0 	pop r20
000203 914f      	pop r20
                 ; 0000 00F1 	pop r19
000204 913f      	pop r19
                 ; 0000 00F2 	pop r18
000205 912f      	pop r18
                 ; 0000 00F3 	pop r31
000206 91ff      	pop r31
                 ; 0000 00F4 	pop r30
000207 91ef      	pop r30
                 ; 0000 00F5 	sei
000208 9478      	sei
                 ; 0000 00F6 	ret
000209 9508      	ret
                 ; 0000 00F7 m1:	nop
00020a 0000      m1:	nop
                 ; 0000 00F8 	nop
00020b 0000      	nop
                 ; 0000 00F9 	nop
00020c 0000      	nop
                 ; 0000 00FA 	nop
00020d 0000      	nop
                 ; 0000 00FB 	dec R19
00020e 953a      	dec R19
                 ; 0000 00FC 	brne m3
00020f f6f9      	brne m3
                 ; 0000 00FD 	nop
000210 0000      	nop
                 ; 0000 00FE 	cbi 0x05,3
000211 982b      	cbi 0x05,3
                 ; 0000 00FF 	dec R18
000212 952a      	dec R18
                 ; 0000 0100 	brne m4
000213 f6c9      	brne m4
                 ; 0000 0101 	pop r20
000214 914f      	pop r20
                 ; 0000 0102 	pop r19
000215 913f      	pop r19
                 ; 0000 0103 	pop r18
000216 912f      	pop r18
                 ; 0000 0104     pop r27
000217 91bf          pop r27
                 ; 0000 0105     pop r26
000218 91af          pop r26
                 ; 0000 0106     pop r29
000219 91df          pop r29
                 ; 0000 0107     pop r28
00021a 91cf          pop r28
                 ; 0000 0108 	pop r31
00021b 91ff      	pop r31
                 ; 0000 0109 	pop r30
00021c 91ef      	pop r30
                 ; 0000 010A 	sei
00021d 9478      	sei
                 ; 0000 010B 	ret
00021e 9508      	ret
                 ; 0000 010C #endasm
                 ; 0000 010D }
00021f 9621      	ADIW R28,1
000220 9508      	RET
                 ; .FEND
                 ;#pragma warn+
                 ;
                 ;
                 ;
                 ;
                 ;// TWI functions
                 ;#include <twi.h>
                 ;
                 ;void main(void)
                 ; 0000 0117 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0118 // Declare your local variables here
                 ; 0000 0119 unsigned char temp;
                 ; 0000 011A // Crystal Oscillator division factor: 1
                 ; 0000 011B #pragma optsize-
                 ; 0000 011C CLKPR=(1<<CLKPCE);
                 ;	temp -> R17
000221 e8e0      	LDI  R30,LOW(128)
000222 93e0 0061 	STS  97,R30
                 ; 0000 011D CLKPR=(0<<CLKPCE) | (0<<CLKPS3) | (0<<CLKPS2) | (0<<CLKPS1) | (0<<CLKPS0);
000224 e0e0      	LDI  R30,LOW(0)
000225 93e0 0061 	STS  97,R30
                 ; 0000 011E #ifdef _OPTIMIZE_SIZE_
                 ; 0000 011F #pragma optsize+
                 ; 0000 0120 #endif
                 ; 0000 0121 
                 ; 0000 0122 // Input/Output Ports initialization
                 ; 0000 0123 // Port B initialization
                 ; 0000 0124 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=Out Bit2=Out Bit1=Out Bit0=Out
                 ; 0000 0125 DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (1<<DDB3) | (1<<DDB2) | (1<<DDB1) | (1<<DDB0);
000227 e0ef      	LDI  R30,LOW(15)
000228 b9e4      	OUT  0x4,R30
                 ; 0000 0126 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=0 Bit2=0 Bit1=0 Bit0=0
                 ; 0000 0127 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
000229 e0e0      	LDI  R30,LOW(0)
00022a b9e5      	OUT  0x5,R30
                 ; 0000 0128 
                 ; 0000 0129 // Port C initialization
                 ; 0000 012A // Function: Bit6=In Bit5=Out Bit4=Out Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 012B DDRC=(0<<DDC6) | (1<<DDC5) | (1<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
00022b e3e0      	LDI  R30,LOW(48)
00022c b9e7      	OUT  0x7,R30
                 ; 0000 012C // State: Bit6=T Bit5=0 Bit4=0 Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 012D PORTC=(0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
00022d e0e0      	LDI  R30,LOW(0)
00022e b9e8      	OUT  0x8,R30
                 ; 0000 012E 
                 ; 0000 012F // Port D initialization
                 ; 0000 0130 // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=In Bit2=Out Bit1=Out Bit0=In
                 ; 0000 0131 DDRD=(1<<DDD7) | (1<<DDD6) | (1<<DDD5) | (1<<DDD4) | (0<<DDD3) | (1<<DDD2) | (1<<DDD1) | (0<<DDD0);
00022f efe6      	LDI  R30,LOW(246)
000230 b9ea      	OUT  0xA,R30
                 ; 0000 0132 // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=T Bit2=0 Bit1=0 Bit0=T
                 ; 0000 0133 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
000231 e0e0      	LDI  R30,LOW(0)
000232 b9eb      	OUT  0xB,R30
                 ; 0000 0134 
                 ; 0000 0135 // Timer/Counter 0 initialization
                 ; 0000 0136 // Clock source: System Clock
                 ; 0000 0137 // Clock value: 15,625 kHz
                 ; 0000 0138 // Mode: Normal top=0xFF
                 ; 0000 0139 // OC0A output: Disconnected
                 ; 0000 013A // OC0B output: Disconnected
                 ; 0000 013B // Timer Period: 16,384 ms
                 ; 0000 013C TCCR0A=(0<<COM0A1) | (0<<COM0A0) | (0<<COM0B1) | (0<<COM0B0) | (0<<WGM01) | (0<<WGM00);
000233 bde4      	OUT  0x24,R30
                 ; 0000 013D TCCR0B=(0<<WGM02) | (1<<CS02) | (0<<CS01) | (1<<CS00);
000234 e0e5      	LDI  R30,LOW(5)
000235 bde5      	OUT  0x25,R30
                 ; 0000 013E TCNT0=0x00;
000236 e0e0      	LDI  R30,LOW(0)
000237 bde6      	OUT  0x26,R30
                 ; 0000 013F OCR0A=0x00;
000238 bde7      	OUT  0x27,R30
                 ; 0000 0140 OCR0B=0x00;
000239 bde8      	OUT  0x28,R30
                 ; 0000 0141 
                 ; 0000 0142 // Timer/Counter 0 Interrupt(s) initialization
                 ; 0000 0143 TIMSK0=(0<<OCIE0B) | (0<<OCIE0A) | (1<<TOIE0);
00023a e0e1      	LDI  R30,LOW(1)
00023b 93e0 006e 	STS  110,R30
                 ; 0000 0144 
                 ; 0000 0145 // USART initialization
                 ; 0000 0146 // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0000 0147 // USART Receiver: On
                 ; 0000 0148 // USART Transmitter: On
                 ; 0000 0149 // USART0 Mode: Asynchronous
                 ; 0000 014A // USART Baud Rate: 9600
                 ; 0000 014B UCSR0A=(0<<RXC0) | (0<<TXC0) | (0<<UDRE0) | (0<<FE0) | (0<<DOR0) | (0<<UPE0) | (0<<U2X0) | (0<<MPCM0);
00023d e0e0      	LDI  R30,LOW(0)
00023e 93e0 00c0 	STS  192,R30
                 ; 0000 014C UCSR0B=(1<<RXCIE0) | (0<<TXCIE0) | (0<<UDRIE0) | (1<<RXEN0) | (1<<TXEN0) | (0<<UCSZ02) | (0<<RXB80) | (0<<TXB80);
000240 e9e8      	LDI  R30,LOW(152)
000241 93e0 00c1 	STS  193,R30
                 ; 0000 014D UCSR0C=(0<<UMSEL01) | (0<<UMSEL00) | (0<<UPM01) | (0<<UPM00) | (0<<USBS0) | (1<<UCSZ01) | (1<<UCSZ00) | (0<<UCPOL0);
000243 e0e6      	LDI  R30,LOW(6)
000244 93e0 00c2 	STS  194,R30
                 ; 0000 014E UBRR0H=0x00;
000246 e0e0      	LDI  R30,LOW(0)
000247 93e0 00c5 	STS  197,R30
                 ; 0000 014F UBRR0L=0x67;
000249 e6e7      	LDI  R30,LOW(103)
00024a 93e0 00c4 	STS  196,R30
                 ; 0000 0150 
                 ; 0000 0151 // ADC initialization
                 ; 0000 0152 // ADC Clock frequency: 125,000 kHz
                 ; 0000 0153 // ADC Voltage Reference: AVCC pin
                 ; 0000 0154 // ADC Auto Trigger Source: ADC Stopped
                 ; 0000 0155 // Digital input buffers on ADC0: On, ADC1: Off, ADC2: On, ADC3: On
                 ; 0000 0156 // ADC4: On, ADC5: On
                 ; 0000 0157 DIDR0=(0<<ADC5D) | (0<<ADC4D) | (0<<ADC3D) | (0<<ADC2D) | (1<<ADC1D) | (0<<ADC0D);
00024c e0e2      	LDI  R30,LOW(2)
00024d 93e0 007e 	STS  126,R30
                 ; 0000 0158 ADMUX=ADC_VREF_TYPE | 1;
00024f e4e1      	LDI  R30,LOW(65)
000250 93e0 007c 	STS  124,R30
                 ; 0000 0159 ADCSRA=(1<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
000252 e8e7      	LDI  R30,LOW(135)
000253 93e0 007a 	STS  122,R30
                 ; 0000 015A ADCSRB=(0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
000255 e0e0      	LDI  R30,LOW(0)
000256 93e0 007b 	STS  123,R30
                 ; 0000 015B 
                 ; 0000 015C // TWI initialization
                 ; 0000 015D // Mode: TWI Master
                 ; 0000 015E // Bit Rate: 100 kHz
                 ; 0000 015F twi_master_init(100);
000258 e6a4      	LDI  R26,LOW(100)
000259 e0b0      	LDI  R27,0
00025a 940e 1158 	CALL _twi_master_init
                 ; 0000 0160 
                 ; 0000 0161 // Alphanumeric LCD initialization
                 ; 0000 0162 // Connections are specified in the
                 ; 0000 0163 // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
                 ; 0000 0164 // RS - PORTB Bit 0
                 ; 0000 0165 // RD - PORTB Bit 1
                 ; 0000 0166 // EN - PORTB Bit 2
                 ; 0000 0167 // D4 - PORTD Bit 4
                 ; 0000 0168 // D5 - PORTD Bit 5
                 ; 0000 0169 // D6 - PORTD Bit 6
                 ; 0000 016A // D7 - PORTD Bit 7
                 ; 0000 016B // Characters/line: 16
                 ; 0000 016C lcd_init(16);
00025c e1a0      	LDI  R26,LOW(16)
00025d 940e 1114 	CALL _lcd_init
                 ; 0000 016D lcd_gotoxy(0,0);
00025f e0e0      	LDI  R30,LOW(0)
000260 93ea      	ST   -Y,R30
000261 e0a0      	LDI  R26,LOW(0)
000262 940e 1096 	CALL _lcd_gotoxy
                 ; 0000 016E lcd_putsf("+xx.xC xxx.xxkPa");
                +
000264 e8aa     +LDI R26 , LOW ( 2 * _0x0 + ( 0 ) )
000265 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW2FN _0x0,0
000266 940e 10fe 	CALL _lcd_putsf
                 ; 0000 016F lcd_gotoxy(0,1);
000268 e0e0      	LDI  R30,LOW(0)
000269 93ea      	ST   -Y,R30
00026a e0a1      	LDI  R26,LOW(1)
00026b 940e 1096 	CALL _lcd_gotoxy
                 ; 0000 0170 lcd_putsf("xx.xx% xxxx.xppm");
                +
00026d e9ab     +LDI R26 , LOW ( 2 * _0x0 + ( 17 ) )
00026e e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 17 ) )
                 	__POINTW2FN _0x0,17
00026f 940e 10fe 	CALL _lcd_putsf
                 ; 0000 0171 
                 ; 0000 0172 xxx=(float)REACTION_VOLTAGE*DC_GAIN*1023/UREF/(3-2.602);
                +
000271 eaef     +LDI R30 , LOW ( 0x42AEC8AF )
000272 ecf8     +LDI R31 , HIGH ( 0x42AEC8AF )
000273 ea6e     +LDI R22 , BYTE3 ( 0x42AEC8AF )
000274 e472     +LDI R23 , BYTE4 ( 0x42AEC8AF )
                 	__GETD1N 0x42AEC8AF
000275 93e0 0368 	STS  _xxx,R30
000277 93f0 0369 	STS  _xxx+1,R31
000279 9360 036a 	STS  _xxx+2,R22
00027b 9370 036b 	STS  _xxx+3,R23
                 ; 0000 0173 cod0=eCod0;
00027d e0a2      	LDI  R26,LOW(_eCod0)
00027e e0b0      	LDI  R27,HIGH(_eCod0)
00027f 940e 16f8 	CALL __EEPROMRDB
000281 2e3e      	MOV  R3,R30
000282 2444      	CLR  R4
                 ; 0000 0174 cod0*=256;
000283 2c43      	MOV  R4,R3
000284 2433      	CLR  R3
                 ; 0000 0175 cod0+=eCod1;
000285 e0a3      	LDI  R26,LOW(_eCod1)
000286 e0b0      	LDI  R27,HIGH(_eCod1)
000287 940e 16f8 	CALL __EEPROMRDB
000289 e0f0      	LDI  R31,0
                +
00028a 0e3e     +ADD R3 , R30
00028b 1e4f     +ADC R4 , R31
                 	__ADDWRR 3,4,30,31
                 ; 0000 0176 //cod0=665;
                 ; 0000 0177 
                 ; 0000 0178 permit=etemp;
00028c e0a0      	LDI  R26,LOW(_etemp)
00028d e0b0      	LDI  R27,HIGH(_etemp)
00028e 940e 16f8 	CALL __EEPROMRDB
000290 2e8e      	MOV  R8,R30
                 ; 0000 0179 permit=0;
000291 2488      	CLR  R8
                 ; 0000 017A consentration=0;
000292 24bb      	CLR  R11
000293 24cc      	CLR  R12
                 ; 0000 017B timerCounter=0;
000294 24aa      	CLR  R10
                 ; 0000 017C Sw=0;
000295 98f2      	CBI  0x1E,2
                 ; 0000 017D Run=0;
000296 98f3      	CBI  0x1E,3
                 ; 0000 017E Stp=1;
000297 9af4      	SBI  0x1E,4
                 ; 0000 017F nnn=0;
000298 e0e0      	LDI  R30,LOW(0)
000299 93e0 04ef 	STS  _nnn,R30
                 ; 0000 0180 Ust=0;
00029b 98f5      	CBI  0x1E,5
                 ; 0000 0181 
                 ; 0000 0182 // Global enable interrupts
                 ; 0000 0183 #asm("sei")
00029c 9478      	sei
                 ; 0000 0184 delay_ms(20);
00029d e1a4      	LDI  R26,LOW(20)
00029e e0b0      	LDI  R27,0
00029f 940e 13f5 	CALL _delay_ms
                 ; 0000 0185 twi_adr[0]=0xF4;
0002a1 efe4      	LDI  R30,LOW(244)
0002a2 93e0 04a7 	STS  _twi_adr,R30
                 ; 0000 0186 twi_adr[1]=0x2E;
0002a4 e2ee      	LDI  R30,LOW(46)
                +
0002a5 93e0 04a8+STS _twi_adr + ( 1 ) , R30
                 	__PUTB1MN _twi_adr,1
                 ; 0000 0187 //twi_master_trans(0x77,(unsigned char *)&twi_adr,2,0,0);
                 ; 0000 0188 delay_ms(2000);
0002a7 eda0      	LDI  R26,LOW(2000)
0002a8 e0b7      	LDI  R27,HIGH(2000)
0002a9 940e 13f5 	CALL _delay_ms
                 ; 0000 0189 twi_adr[0]=0xAA;
0002ab eaea      	LDI  R30,LOW(170)
0002ac 93e0 04a7 	STS  _twi_adr,R30
                 ; 0000 018A twi_master_trans(0x77,(unsigned char *)&twi_adr,1,(unsigned char *)&twi_eeprom,22);
0002ae e7e7      	LDI  R30,LOW(119)
0002af 93ea      	ST   -Y,R30
0002b0 eae7      	LDI  R30,LOW(_twi_adr)
0002b1 e0f4      	LDI  R31,HIGH(_twi_adr)
0002b2 93fa      	ST   -Y,R31
0002b3 93ea      	ST   -Y,R30
0002b4 e0e1      	LDI  R30,LOW(1)
0002b5 93ea      	ST   -Y,R30
0002b6 e9e1      	LDI  R30,LOW(_twi_eeprom)
0002b7 e0f4      	LDI  R31,HIGH(_twi_eeprom)
0002b8 93fa      	ST   -Y,R31
0002b9 93ea      	ST   -Y,R30
0002ba e1a6      	LDI  R26,LOW(22)
0002bb 940e 1188 	CALL _twi_master_trans
                 ; 0000 018B //twi_master_trans(0x77,0,0,(unsigned char *)&twi_adr,2);
                 ; 0000 018C ac1=(twi_eeprom[0]<<8)|(twi_eeprom[1]);
0002bd 91b0 0491 	LDS  R27,_twi_eeprom
0002bf e0a0      	LDI  R26,LOW(0)
                +
0002c0 91e0 0492+LDS R30 , _twi_eeprom + ( 1 )
                 	__GETB1MN _twi_eeprom,1
0002c2 e0f0      	LDI  R31,0
0002c3 2bea      	OR   R30,R26
0002c4 2bfb      	OR   R31,R27
0002c5 93e0 04a9 	STS  _ac1,R30
0002c7 93f0 04aa 	STS  _ac1+1,R31
                 ; 0000 018D ac2=(twi_eeprom[2]<<8)|(twi_eeprom[3]);
                +
0002c9 91b0 0493+LDS R27 , _twi_eeprom + ( 2 )
                 	__GETBRMN 27,_twi_eeprom,2
0002cb e0a0      	LDI  R26,LOW(0)
                +
0002cc 91e0 0494+LDS R30 , _twi_eeprom + ( 3 )
                 	__GETB1MN _twi_eeprom,3
0002ce e0f0      	LDI  R31,0
0002cf 2bea      	OR   R30,R26
0002d0 2bfb      	OR   R31,R27
0002d1 93e0 04ab 	STS  _ac2,R30
0002d3 93f0 04ac 	STS  _ac2+1,R31
                 ; 0000 018E ac3=(twi_eeprom[4]<<8)|(twi_eeprom[5]);
                +
0002d5 91b0 0495+LDS R27 , _twi_eeprom + ( 4 )
                 	__GETBRMN 27,_twi_eeprom,4
0002d7 e0a0      	LDI  R26,LOW(0)
                +
0002d8 91e0 0496+LDS R30 , _twi_eeprom + ( 5 )
                 	__GETB1MN _twi_eeprom,5
0002da e0f0      	LDI  R31,0
0002db 2bea      	OR   R30,R26
0002dc 2bfb      	OR   R31,R27
0002dd 93e0 04ad 	STS  _ac3,R30
0002df 93f0 04ae 	STS  _ac3+1,R31
                 ; 0000 018F ac4=(twi_eeprom[6]<<8)|(twi_eeprom[7]);
                +
0002e1 91b0 0497+LDS R27 , _twi_eeprom + ( 6 )
                 	__GETBRMN 27,_twi_eeprom,6
0002e3 e0a0      	LDI  R26,LOW(0)
                +
0002e4 91e0 0498+LDS R30 , _twi_eeprom + ( 7 )
                 	__GETB1MN _twi_eeprom,7
0002e6 e0f0      	LDI  R31,0
0002e7 2bea      	OR   R30,R26
0002e8 2bfb      	OR   R31,R27
0002e9 93e0 04b9 	STS  _ac4,R30
0002eb 93f0 04ba 	STS  _ac4+1,R31
                 ; 0000 0190 ac5=(twi_eeprom[8]<<8)|(twi_eeprom[9]);
                +
0002ed 91b0 0499+LDS R27 , _twi_eeprom + ( 8 )
                 	__GETBRMN 27,_twi_eeprom,8
0002ef e0a0      	LDI  R26,LOW(0)
                +
0002f0 91e0 049a+LDS R30 , _twi_eeprom + ( 9 )
                 	__GETB1MN _twi_eeprom,9
0002f2 e0f0      	LDI  R31,0
0002f3 2bea      	OR   R30,R26
0002f4 2bfb      	OR   R31,R27
0002f5 93e0 04bb 	STS  _ac5,R30
0002f7 93f0 04bc 	STS  _ac5+1,R31
                 ; 0000 0191 ac6=(twi_eeprom[10]<<8)|(twi_eeprom[11]);
                +
0002f9 91b0 049b+LDS R27 , _twi_eeprom + ( 10 )
                 	__GETBRMN 27,_twi_eeprom,10
0002fb e0a0      	LDI  R26,LOW(0)
                +
0002fc 91e0 049c+LDS R30 , _twi_eeprom + ( 11 )
                 	__GETB1MN _twi_eeprom,11
0002fe e0f0      	LDI  R31,0
0002ff 2bea      	OR   R30,R26
000300 2bfb      	OR   R31,R27
000301 93e0 04bd 	STS  _ac6,R30
000303 93f0 04be 	STS  _ac6+1,R31
                 ; 0000 0192 b1=(twi_eeprom[12]<<8)|(twi_eeprom[13]);
                +
000305 91b0 049d+LDS R27 , _twi_eeprom + ( 12 )
                 	__GETBRMN 27,_twi_eeprom,12
000307 e0a0      	LDI  R26,LOW(0)
                +
000308 91e0 049e+LDS R30 , _twi_eeprom + ( 13 )
                 	__GETB1MN _twi_eeprom,13
00030a e0f0      	LDI  R31,0
00030b 2bea      	OR   R30,R26
00030c 2bfb      	OR   R31,R27
00030d 93e0 04af 	STS  _b1,R30
00030f 93f0 04b0 	STS  _b1+1,R31
                 ; 0000 0193 b2=(twi_eeprom[14]<<8)|(twi_eeprom[15]);
                +
000311 91b0 049f+LDS R27 , _twi_eeprom + ( 14 )
                 	__GETBRMN 27,_twi_eeprom,14
000313 e0a0      	LDI  R26,LOW(0)
                +
000314 91e0 04a0+LDS R30 , _twi_eeprom + ( 15 )
                 	__GETB1MN _twi_eeprom,15
000316 e0f0      	LDI  R31,0
000317 2bea      	OR   R30,R26
000318 2bfb      	OR   R31,R27
000319 93e0 04b1 	STS  _b2,R30
00031b 93f0 04b2 	STS  _b2+1,R31
                 ; 0000 0194 mb=(twi_eeprom[16]<<8)|(twi_eeprom[17]);
                +
00031d 91b0 04a1+LDS R27 , _twi_eeprom + ( 16 )
                 	__GETBRMN 27,_twi_eeprom,16
00031f e0a0      	LDI  R26,LOW(0)
                +
000320 91e0 04a2+LDS R30 , _twi_eeprom + ( 17 )
                 	__GETB1MN _twi_eeprom,17
000322 e0f0      	LDI  R31,0
000323 2bea      	OR   R30,R26
000324 2bfb      	OR   R31,R27
000325 93e0 04b3 	STS  _mb,R30
000327 93f0 04b4 	STS  _mb+1,R31
                 ; 0000 0195 mc=(twi_eeprom[18]<<8)|(twi_eeprom[19]);
                +
000329 91b0 04a3+LDS R27 , _twi_eeprom + ( 18 )
                 	__GETBRMN 27,_twi_eeprom,18
00032b e0a0      	LDI  R26,LOW(0)
                +
00032c 91e0 04a4+LDS R30 , _twi_eeprom + ( 19 )
                 	__GETB1MN _twi_eeprom,19
00032e e0f0      	LDI  R31,0
00032f 2bea      	OR   R30,R26
000330 2bfb      	OR   R31,R27
000331 93e0 04b5 	STS  _mc,R30
000333 93f0 04b6 	STS  _mc+1,R31
                 ; 0000 0196 md=(twi_eeprom[20]<<8)|(twi_eeprom[21]);
                +
000335 91b0 04a5+LDS R27 , _twi_eeprom + ( 20 )
                 	__GETBRMN 27,_twi_eeprom,20
000337 e0a0      	LDI  R26,LOW(0)
                +
000338 91e0 04a6+LDS R30 , _twi_eeprom + ( 21 )
                 	__GETB1MN _twi_eeprom,21
00033a e0f0      	LDI  R31,0
00033b 2bea      	OR   R30,R26
00033c 2bfb      	OR   R31,R27
00033d 93e0 04b7 	STS  _md,R30
00033f 93f0 04b8 	STS  _md+1,R31
                 ; 0000 0197 
                 ; 0000 0198 ClearBit(DDRD,2);
000341 9852      	CBI  0xA,2
                 ; 0000 0199 delay_ms(20);
000342 e1a4      	LDI  R26,LOW(20)
000343 e0b0      	LDI  R27,0
000344 940e 13f5 	CALL _delay_ms
                 ; 0000 019A 
                 ; 0000 019B 
                 ; 0000 019C 
                 ; 0000 019D     while (1)
                 _0x48:
                 ; 0000 019E     {
                 ; 0000 019F         timerEnd=1;
000346 9af0      	SBI  0x1E,0
                 ; 0000 01A0         permit++;
000347 9483      	INC  R8
                 ; 0000 01A1         if (permit<9)
000348 e0e9      	LDI  R30,LOW(9)
000349 168e      	CP   R8,R30
00034a f010      	BRLO PC+3
00034b 940c 0351 	JMP _0x4D
                 ; 0000 01A2         {
                 ; 0000 01A3             consentration+=readADC();
00034d 940e 0164 	CALL _readADC
                +
00034f 0ebe     +ADD R11 , R30
000350 1ecf     +ADC R12 , R31
                 	__ADDWRR 11,12,30,31
                 ; 0000 01A4         }
                 ; 0000 01A5         if (permit==9)
                 _0x4D:
000351 e0e9      	LDI  R30,LOW(9)
000352 15e8      	CP   R30,R8
000353 f011      	BREQ PC+3
000354 940c 0414 	JMP _0x4E
                 ; 0000 01A6         {
                 ; 0000 01A7            co2=consentration>>3;
                +
000356 2deb     +MOV R30 , R11
000357 2dfc     +MOV R31 , R12
                 	__GETW1R 11,12
000358 940e 1611 	CALL __LSRW3
                +
00035a 2ede     +MOV R13 , R30
00035b 2eef     +MOV R14 , R31
                 	__PUTW1R 13,14
                 ; 0000 01A8            if (Stp)
00035c 9bf4      	SBIS 0x1E,4
00035d c06b      	RJMP _0x4F
                 ; 0000 01A9            {
                 ; 0000 01AA              //co2=400*pow(10,(consentration-cod0)/xxx);
                 ; 0000 01AB              if (co2>cod0)
                +
00035e 143d     +CP R3 , R13
00035f 044e     +CPC R4 , R14
                 	__CPWRR 3,4,13,14
000360 f010      	BRLO PC+3
000361 940c 0368 	JMP _0x50
                 ; 0000 01AC                 co2=400;
000363 e9e0      	LDI  R30,LOW(400)
000364 e0f1      	LDI  R31,HIGH(400)
                +
000365 2ede     +MOV R13 , R30
000366 2eef     +MOV R14 , R31
                 	__PUTW1R 13,14
                 ; 0000 01AD              else
000367 c05f      	RJMP _0x51
                 _0x50:
                 ; 0000 01AE              {
                 ; 0000 01AF                 co2=cod0-co2;
                +
000368 2de3     +MOV R30 , R3
000369 2df4     +MOV R31 , R4
                 	__GETW1R 3,4
00036a 19ed      	SUB  R30,R13
00036b 09fe      	SBC  R31,R14
                +
00036c 2ede     +MOV R13 , R30
00036d 2eef     +MOV R14 , R31
                 	__PUTW1R 13,14
                 ; 0000 01B0                 xxx1=co2/xxx;
00036e 91e0 0368 	LDS  R30,_xxx
000370 91f0 0369 	LDS  R31,_xxx+1
000372 9160 036a 	LDS  R22,_xxx+2
000374 9170 036b 	LDS  R23,_xxx+3
                +
000376 2dad     +MOV R26 , R13
000377 2dbe     +MOV R27 , R14
                 	__GETW2R 13,14
000378 2788      	CLR  R24
000379 2799      	CLR  R25
00037a 940e 16e8 	CALL __CDF2
00037c 940e 1560 	CALL __DIVF21
00037e 93e0 036c 	STS  _xxx1,R30
000380 93f0 036d 	STS  _xxx1+1,R31
000382 9360 036e 	STS  _xxx1+2,R22
000384 9370 036f 	STS  _xxx1+3,R23
                 ; 0000 01B1                 xxx1=pow(10,xxx1);
                +
000386 e0e0     +LDI R30 , LOW ( 0x41200000 )
000387 e0f0     +LDI R31 , HIGH ( 0x41200000 )
000388 e260     +LDI R22 , BYTE3 ( 0x41200000 )
000389 e471     +LDI R23 , BYTE4 ( 0x41200000 )
                 	__GETD1N 0x41200000
00038a 940e 16dc 	CALL __PUTPARD1
00038c 91a0 036c 	LDS  R26,_xxx1
00038e 91b0 036d 	LDS  R27,_xxx1+1
000390 9180 036e 	LDS  R24,_xxx1+2
000392 9190 036f 	LDS  R25,_xxx1+3
000394 940e 0fec 	CALL _pow
000396 93e0 036c 	STS  _xxx1,R30
000398 93f0 036d 	STS  _xxx1+1,R31
00039a 9360 036e 	STS  _xxx1+2,R22
00039c 9370 036f 	STS  _xxx1+3,R23
                 ; 0000 01B2                 if (xxx1>25)
00039e 91a0 036c 	LDS  R26,_xxx1
0003a0 91b0 036d 	LDS  R27,_xxx1+1
0003a2 9180 036e 	LDS  R24,_xxx1+2
0003a4 9190 036f 	LDS  R25,_xxx1+3
                +
0003a6 e0e0     +LDI R30 , LOW ( 0x41C80000 )
0003a7 e0f0     +LDI R31 , HIGH ( 0x41C80000 )
0003a8 ec68     +LDI R22 , BYTE3 ( 0x41C80000 )
0003a9 e471     +LDI R23 , BYTE4 ( 0x41C80000 )
                 	__GETD1N 0x41C80000
0003aa 940e 15a5 	CALL __CMPF12
0003ac f009      	BREQ PC+2
0003ad f410      	BRCC PC+3
0003ae 940c 03b5 	JMP  _0x52
                 ; 0000 01B3                     co2=9999;
0003b0 e0ef      	LDI  R30,LOW(9999)
0003b1 e2f7      	LDI  R31,HIGH(9999)
                +
0003b2 2ede     +MOV R13 , R30
0003b3 2eef     +MOV R14 , R31
                 	__PUTW1R 13,14
                 ; 0000 01B4                 else
0003b4 c012      	RJMP _0x53
                 _0x52:
                 ; 0000 01B5                     co2=400*xxx1;
0003b5 91e0 036c 	LDS  R30,_xxx1
0003b7 91f0 036d 	LDS  R31,_xxx1+1
0003b9 9160 036e 	LDS  R22,_xxx1+2
0003bb 9170 036f 	LDS  R23,_xxx1+3
                +
0003bd e0a0     +LDI R26 , LOW ( 0x43C80000 )
0003be e0b0     +LDI R27 , HIGH ( 0x43C80000 )
0003bf ec88     +LDI R24 , BYTE3 ( 0x43C80000 )
0003c0 e493     +LDI R25 , BYTE4 ( 0x43C80000 )
                 	__GETD2N 0x43C80000
0003c1 940e 1512 	CALL __MULF12
0003c3 940e 144f 	CALL __CFD1U
                +
0003c5 2ede     +MOV R13 , R30
0003c6 2eef     +MOV R14 , R31
                 	__PUTW1R 13,14
                 ; 0000 01B6              }
                 _0x53:
                 _0x51:
                 ; 0000 01B7              co2p=0;
0003c7 2477      	CLR  R7
                 ; 0000 01B8            }
                 ; 0000 01B9            else
0003c8 c00d      	RJMP _0x54
                 _0x4F:
                 ; 0000 01BA            {
                 ; 0000 01BB              co2p=consentration%8;
0003c9 2deb      	MOV  R30,R11
0003ca 70e7      	ANDI R30,LOW(0x7)
0003cb 2e7e      	MOV  R7,R30
                 ; 0000 01BC              co2p=co2p*10/8;
0003cc 2da7      	MOV  R26,R7
0003cd e0ea      	LDI  R30,LOW(10)
0003ce 9fea      	MUL  R30,R26
0003cf 01f0      	MOVW R30,R0
0003d0 01df      	MOVW R26,R30
0003d1 e0e8      	LDI  R30,LOW(8)
0003d2 e0f0      	LDI  R31,HIGH(8)
0003d3 940e 1678 	CALL __DIVW21
0003d5 2e7e      	MOV  R7,R30
                 ; 0000 01BD            }
                 _0x54:
                 ; 0000 01BE            co2led=co2;
                +
0003d6 92d0 0362+STS _co2led + ( 0 ) , R13
0003d8 92e0 0363+STS _co2led + ( 0 ) + 1 , R14
                 	__PUTWMRN _co2led,0,13,14
                 ; 0000 01BF            consentration=0;
0003da 24bb      	CLR  R11
0003db 24cc      	CLR  R12
                 ; 0000 01C0            temp=co2/1000;
                +
0003dc 2dad     +MOV R26 , R13
0003dd 2dbe     +MOV R27 , R14
                 	__GETW2R 13,14
0003de eee8      	LDI  R30,LOW(1000)
0003df e0f3      	LDI  R31,HIGH(1000)
0003e0 940e 1665 	CALL __DIVW21U
0003e2 2f1e      	MOV  R17,R30
                 ; 0000 01C1            co2s[0]=temp+'0';
0003e3 5de0      	SUBI R30,-LOW(48)
0003e4 93e0 0471 	STS  _co2s,R30
                 ; 0000 01C2            co2-=temp*1000;
0003e6 2fa1      	MOV  R26,R17
0003e7 e0b0      	LDI  R27,0
0003e8 eee8      	LDI  R30,LOW(1000)
0003e9 e0f3      	LDI  R31,HIGH(1000)
0003ea 940e 165b 	CALL __MULW12
                +
0003ec 1ade     +SUB R13 , R30
0003ed 0aef     +SBC R14 , R31
                 	__SUBWRR 13,14,30,31
                 ; 0000 01C3            temp=co2/100;
                +
0003ee 2dad     +MOV R26 , R13
0003ef 2dbe     +MOV R27 , R14
                 	__GETW2R 13,14
0003f0 e6e4      	LDI  R30,LOW(100)
0003f1 e0f0      	LDI  R31,HIGH(100)
0003f2 940e 1665 	CALL __DIVW21U
0003f4 2f1e      	MOV  R17,R30
                 ; 0000 01C4            co2s[1]=temp+'0';
0003f5 5de0      	SUBI R30,-LOW(48)
                +
0003f6 93e0 0472+STS _co2s + ( 1 ) , R30
                 	__PUTB1MN _co2s,1
                 ; 0000 01C5            co2-=temp*100;
0003f8 e6e4      	LDI  R30,LOW(100)
0003f9 9fe1      	MUL  R30,R17
0003fa 01f0      	MOVW R30,R0
                +
0003fb 1ade     +SUB R13 , R30
0003fc 0aef     +SBC R14 , R31
                 	__SUBWRR 13,14,30,31
                 ; 0000 01C6            temp=co2/10;
                +
0003fd 2dad     +MOV R26 , R13
0003fe 2dbe     +MOV R27 , R14
                 	__GETW2R 13,14
0003ff e0ea      	LDI  R30,LOW(10)
000400 e0f0      	LDI  R31,HIGH(10)
000401 940e 1665 	CALL __DIVW21U
000403 2f1e      	MOV  R17,R30
                 ; 0000 01C7            co2s[2]=temp+'0';
000404 5de0      	SUBI R30,-LOW(48)
                +
000405 93e0 0473+STS _co2s + ( 2 ) , R30
                 	__PUTB1MN _co2s,2
                 ; 0000 01C8            co2-=temp*10;
000407 e0ea      	LDI  R30,LOW(10)
000408 9fe1      	MUL  R30,R17
000409 01f0      	MOVW R30,R0
                +
00040a 1ade     +SUB R13 , R30
00040b 0aef     +SBC R14 , R31
                 	__SUBWRR 13,14,30,31
                 ; 0000 01C9            co2s[3]=co2+'0';
00040c 2ded      	MOV  R30,R13
00040d 5de0      	SUBI R30,-LOW(48)
                +
00040e 93e0 0474+STS _co2s + ( 3 ) , R30
                 	__PUTB1MN _co2s,3
                 ; 0000 01CA            co2s[5]=co2p+'0';
000410 2de7      	MOV  R30,R7
000411 5de0      	SUBI R30,-LOW(48)
                +
000412 93e0 0476+STS _co2s + ( 5 ) , R30
                 	__PUTB1MN _co2s,5
                 ; 0000 01CB         }
                 ; 0000 01CC         if (permit==10)
                 _0x4E:
000414 e0ea      	LDI  R30,LOW(10)
000415 15e8      	CP   R30,R8
000416 f011      	BREQ PC+3
000417 940c 042e 	JMP _0x55
                 ; 0000 01CD         {
                 ; 0000 01CE             twi_adr[0]=0xF4;
000419 efe4      	LDI  R30,LOW(244)
00041a 93e0 04a7 	STS  _twi_adr,R30
                 ; 0000 01CF             twi_adr[1]=0x2E;
00041c e2ee      	LDI  R30,LOW(46)
                +
00041d 93e0 04a8+STS _twi_adr + ( 1 ) , R30
                 	__PUTB1MN _twi_adr,1
                 ; 0000 01D0             twi_master_trans(0x77,(unsigned char *)&twi_adr,2,0,0);
00041f e7e7      	LDI  R30,LOW(119)
000420 93ea      	ST   -Y,R30
000421 eae7      	LDI  R30,LOW(_twi_adr)
000422 e0f4      	LDI  R31,HIGH(_twi_adr)
000423 93fa      	ST   -Y,R31
000424 93ea      	ST   -Y,R30
000425 e0e2      	LDI  R30,LOW(2)
000426 93ea      	ST   -Y,R30
000427 e0e0      	LDI  R30,LOW(0)
000428 e0f0      	LDI  R31,HIGH(0)
000429 93fa      	ST   -Y,R31
00042a 93ea      	ST   -Y,R30
00042b e0a0      	LDI  R26,LOW(0)
00042c 940e 1188 	CALL _twi_master_trans
                 ; 0000 01D1         }
                 ; 0000 01D2         if (permit==11)
                 _0x55:
00042e e0eb      	LDI  R30,LOW(11)
00042f 15e8      	CP   R30,R8
000430 f011      	BREQ PC+3
000431 940c 0445 	JMP _0x56
                 ; 0000 01D3         {
                 ; 0000 01D4             twi_adr[0]=0xF6;
000433 efe6      	LDI  R30,LOW(246)
000434 93e0 04a7 	STS  _twi_adr,R30
                 ; 0000 01D5             twi_master_trans(0x77,(unsigned char *)&twi_adr,1,(unsigned char *)&twi_eeprom,2);
000436 e7e7      	LDI  R30,LOW(119)
000437 93ea      	ST   -Y,R30
000438 eae7      	LDI  R30,LOW(_twi_adr)
000439 e0f4      	LDI  R31,HIGH(_twi_adr)
00043a 93fa      	ST   -Y,R31
00043b 93ea      	ST   -Y,R30
00043c e0e1      	LDI  R30,LOW(1)
00043d 93ea      	ST   -Y,R30
00043e e9e1      	LDI  R30,LOW(_twi_eeprom)
00043f e0f4      	LDI  R31,HIGH(_twi_eeprom)
000440 93fa      	ST   -Y,R31
000441 93ea      	ST   -Y,R30
000442 e0a2      	LDI  R26,LOW(2)
000443 940e 1188 	CALL _twi_master_trans
                 ; 0000 01D6         }
                 ; 0000 01D7         if (permit==12)
                 _0x56:
000445 e0ec      	LDI  R30,LOW(12)
000446 15e8      	CP   R30,R8
000447 f011      	BREQ PC+3
000448 940c 04d8 	JMP _0x57
                 ; 0000 01D8         {
                 ; 0000 01D9             ut=((long)twi_eeprom[0]<<8)+twi_eeprom[1];
00044a 91e0 0491 	LDS  R30,_twi_eeprom
00044c e0f0      	LDI  R31,0
00044d 940e 1624 	CALL __CWD1
00044f 01df      	MOVW R26,R30
000450 01cb      	MOVW R24,R22
000451 e0e8      	LDI  R30,LOW(8)
000452 940e 15e8 	CALL __LSLD12
000454 01df      	MOVW R26,R30
000455 01cb      	MOVW R24,R22
                +
000456 91e0 0492+LDS R30 , _twi_eeprom + ( 1 )
                 	__GETB1MN _twi_eeprom,1
000458 e0f0      	LDI  R31,0
000459 940e 1624 	CALL __CWD1
00045b 940e 15c5 	CALL __ADDD12
00045d 93e0 04bf 	STS  _ut,R30
00045f 93f0 04c0 	STS  _ut+1,R31
000461 9360 04c1 	STS  _ut+2,R22
000463 9370 04c2 	STS  _ut+3,R23
                 ; 0000 01DA             x1=((ut-ac6)*ac5)>>15;
000465 91e0 04bd 	LDS  R30,_ac6
000467 91f0 04be 	LDS  R31,_ac6+1
000469 91a0 04bf 	LDS  R26,_ut
00046b 91b0 04c0 	LDS  R27,_ut+1
00046d 9180 04c1 	LDS  R24,_ut+2
00046f 9190 04c2 	LDS  R25,_ut+3
000471 2766      	CLR  R22
000472 2777      	CLR  R23
000473 940e 15cf 	CALL __SUBD21
000475 91e0 04bb 	LDS  R30,_ac5
000477 91f0 04bc 	LDS  R31,_ac5+1
000479 2766      	CLR  R22
00047a 2777      	CLR  R23
00047b 940e 1660 	CALL __MULD12
00047d 01df      	MOVW R26,R30
00047e 01cb      	MOVW R24,R22
00047f e0ef      	LDI  R30,LOW(15)
000480 940e 15f4 	CALL __ASRD12
000482 93e0 04c3 	STS  _x1,R30
000484 93f0 04c4 	STS  _x1+1,R31
000486 9360 04c5 	STS  _x1+2,R22
000488 9370 04c6 	STS  _x1+3,R23
                 ; 0000 01DB             x2=((long)mc<<11)/(x1+md);
00048a 91a0 04b5 	LDS  R26,_mc
00048c 91b0 04b6 	LDS  R27,_mc+1
00048e 940e 1629 	CALL __CWD2
000490 e0eb      	LDI  R30,LOW(11)
000491 940e 15e8 	CALL __LSLD12
000493 937f      	PUSH R23
000494 936f      	PUSH R22
000495 93ff      	PUSH R31
000496 93ef      	PUSH R30
000497 91e0 04b7 	LDS  R30,_md
000499 91f0 04b8 	LDS  R31,_md+1
00049b 91a0 04c3 	LDS  R26,_x1
00049d 91b0 04c4 	LDS  R27,_x1+1
00049f 9180 04c5 	LDS  R24,_x1+2
0004a1 9190 04c6 	LDS  R25,_x1+3
0004a3 940e 1624 	CALL __CWD1
0004a5 940e 15c5 	CALL __ADDD12
0004a7 91af      	POP  R26
0004a8 91bf      	POP  R27
0004a9 918f      	POP  R24
0004aa 919f      	POP  R25
0004ab 940e 16a2 	CALL __DIVD21
0004ad 93e0 04c7 	STS  _x2,R30
0004af 93f0 04c8 	STS  _x2+1,R31
0004b1 9360 04c9 	STS  _x2+2,R22
0004b3 9370 04ca 	STS  _x2+3,R23
                 ; 0000 01DC             b5=x1+x2;
0004b5 91a0 04c3 	LDS  R26,_x1
0004b7 91b0 04c4 	LDS  R27,_x1+1
0004b9 9180 04c5 	LDS  R24,_x1+2
0004bb 9190 04c6 	LDS  R25,_x1+3
0004bd 940e 15c5 	CALL __ADDD12
0004bf 93e0 04cb 	STS  _b5,R30
0004c1 93f0 04cc 	STS  _b5+1,R31
0004c3 9360 04cd 	STS  _b5+2,R22
0004c5 9370 04ce 	STS  _b5+3,R23
                 ; 0000 01DD             t=(b5+8)>>4;
                +
0004c7 5fe8     +SUBI R30 , LOW ( - 8 )
0004c8 4fff     +SBCI R31 , HIGH ( - 8 )
0004c9 4f6f     +SBCI R22 , BYTE3 ( - 8 )
0004ca 4f7f     +SBCI R23 , BYTE4 ( - 8 )
                 	__ADDD1N 8
0004cb 01df      	MOVW R26,R30
0004cc 01cb      	MOVW R24,R22
0004cd e0e4      	LDI  R30,LOW(4)
0004ce 940e 15f4 	CALL __ASRD12
0004d0 93e0 04cf 	STS  _t,R30
0004d2 93f0 04d0 	STS  _t+1,R31
0004d4 9360 04d1 	STS  _t+2,R22
0004d6 9370 04d2 	STS  _t+3,R23
                 ; 0000 01DE         }
                 ; 0000 01DF         if (permit==13)
                 _0x57:
0004d8 e0ed      	LDI  R30,LOW(13)
0004d9 15e8      	CP   R30,R8
0004da f011      	BREQ PC+3
0004db 940c 052f 	JMP _0x58
                 ; 0000 01E0         {
                 ; 0000 01E1             if (t<0)
0004dd 91a0 04d2 	LDS  R26,_t+3
0004df 23aa      	TST  R26
0004e0 f012      	BRMI PC+3
0004e1 940c 04f1 	JMP _0x59
                 ; 0000 01E2             {
                 ; 0000 01E3                 t2s[0]='-';
0004e3 e2ed      	LDI  R30,LOW(45)
0004e4 93e0 0484 	STS  _t2s,R30
                 ; 0000 01E4                 t1=-t;
0004e6 91e0 04cf 	LDS  R30,_t
0004e8 91f0 04d0 	LDS  R31,_t+1
0004ea 940e 15d4 	CALL __ANEGW1
0004ec 93e0 0366 	STS  _t1,R30
0004ee 93f0 0367 	STS  _t1+1,R31
                 ; 0000 01E5             }
                 ; 0000 01E6             else
0004f0 c00b      	RJMP _0x5A
                 _0x59:
                 ; 0000 01E7             {
                 ; 0000 01E8                 t2s[0]='+';
0004f1 e2eb      	LDI  R30,LOW(43)
0004f2 93e0 0484 	STS  _t2s,R30
                 ; 0000 01E9                 t1=t;
0004f4 91e0 04cf 	LDS  R30,_t
0004f6 91f0 04d0 	LDS  R31,_t+1
0004f8 93e0 0366 	STS  _t1,R30
0004fa 93f0 0367 	STS  _t1+1,R31
                 ; 0000 01EA             }
                 _0x5A:
                 ; 0000 01EB             temp=t1/100;
0004fc 91a0 0366 	LDS  R26,_t1
0004fe 91b0 0367 	LDS  R27,_t1+1
000500 e6e4      	LDI  R30,LOW(100)
000501 e0f0      	LDI  R31,HIGH(100)
000502 940e 1678 	CALL __DIVW21
000504 2f1e      	MOV  R17,R30
                 ; 0000 01EC             t2s[1]=temp+'0';
000505 5de0      	SUBI R30,-LOW(48)
                +
000506 93e0 0485+STS _t2s + ( 1 ) , R30
                 	__PUTB1MN _t2s,1
                 ; 0000 01ED             t1-=temp*100;
000508 e6e4      	LDI  R30,LOW(100)
000509 9fe1      	MUL  R30,R17
00050a 01f0      	MOVW R30,R0
00050b 91a0 0366 	LDS  R26,_t1
00050d 91b0 0367 	LDS  R27,_t1+1
00050f 1bae      	SUB  R26,R30
000510 0bbf      	SBC  R27,R31
000511 93a0 0366 	STS  _t1,R26
000513 93b0 0367 	STS  _t1+1,R27
                 ; 0000 01EE             temp=t1/10;
000515 e0ea      	LDI  R30,LOW(10)
000516 e0f0      	LDI  R31,HIGH(10)
000517 940e 1678 	CALL __DIVW21
000519 2f1e      	MOV  R17,R30
                 ; 0000 01EF             t2s[2]=temp+'0';
00051a 5de0      	SUBI R30,-LOW(48)
                +
00051b 93e0 0486+STS _t2s + ( 2 ) , R30
                 	__PUTB1MN _t2s,2
                 ; 0000 01F0             t1-=temp*10;
00051d e0ea      	LDI  R30,LOW(10)
00051e 9fe1      	MUL  R30,R17
00051f 01f0      	MOVW R30,R0
000520 91a0 0366 	LDS  R26,_t1
000522 91b0 0367 	LDS  R27,_t1+1
000524 1bae      	SUB  R26,R30
000525 0bbf      	SBC  R27,R31
000526 93a0 0366 	STS  _t1,R26
000528 93b0 0367 	STS  _t1+1,R27
                 ; 0000 01F1             t2s[4]=t1+'0';
00052a 91e0 0366 	LDS  R30,_t1
00052c 5de0      	SUBI R30,-LOW(48)
                +
00052d 93e0 0488+STS _t2s + ( 4 ) , R30
                 	__PUTB1MN _t2s,4
                 ; 0000 01F2         }
                 ; 0000 01F3         if (permit==14)
                 _0x58:
00052f e0ee      	LDI  R30,LOW(14)
000530 15e8      	CP   R30,R8
000531 f011      	BREQ PC+3
000532 940c 0549 	JMP _0x5B
                 ; 0000 01F4         {
                 ; 0000 01F5             twi_adr[0]=0xF4;
000534 efe4      	LDI  R30,LOW(244)
000535 93e0 04a7 	STS  _twi_adr,R30
                 ; 0000 01F6             twi_adr[1]=0x34;
000537 e3e4      	LDI  R30,LOW(52)
                +
000538 93e0 04a8+STS _twi_adr + ( 1 ) , R30
                 	__PUTB1MN _twi_adr,1
                 ; 0000 01F7             //twi_adr[1]=0xF4;
                 ; 0000 01F8             twi_master_trans(0x77,(unsigned char *)&twi_adr,2,0,0);
00053a e7e7      	LDI  R30,LOW(119)
00053b 93ea      	ST   -Y,R30
00053c eae7      	LDI  R30,LOW(_twi_adr)
00053d e0f4      	LDI  R31,HIGH(_twi_adr)
00053e 93fa      	ST   -Y,R31
00053f 93ea      	ST   -Y,R30
000540 e0e2      	LDI  R30,LOW(2)
000541 93ea      	ST   -Y,R30
000542 e0e0      	LDI  R30,LOW(0)
000543 e0f0      	LDI  R31,HIGH(0)
000544 93fa      	ST   -Y,R31
000545 93ea      	ST   -Y,R30
000546 e0a0      	LDI  R26,LOW(0)
000547 940e 1188 	CALL _twi_master_trans
                 ; 0000 01F9         }
                 ; 0000 01FA         if (permit==17)
                 _0x5B:
000549 e1e1      	LDI  R30,LOW(17)
00054a 15e8      	CP   R30,R8
00054b f011      	BREQ PC+3
00054c 940c 0555 	JMP _0x5C
                 ; 0000 01FB         {
                 ; 0000 01FC             errorDHT=readDHT();
00054e 940e 017a 	CALL _readDHT
000550 30e0      	CPI  R30,0
000551 f411      	BRNE _0x5D
000552 98f1      	CBI  0x1E,1
000553 c001      	RJMP _0x5E
                 _0x5D:
000554 9af1      	SBI  0x1E,1
                 _0x5E:
                 ; 0000 01FD         }
                 ; 0000 01FE         if (permit==18)
                 _0x5C:
000555 e1e2      	LDI  R30,LOW(18)
000556 15e8      	CP   R30,R8
000557 f011      	BREQ PC+3
000558 940c 063e 	JMP _0x5F
                 ; 0000 01FF         {
                 ; 0000 0200             if (dataDHT[0]+dataDHT[1]+dataDHT[2]+dataDHT[3]-dataDHT[4])
00055a 91a0 04f0 	LDS  R26,_dataDHT
00055c 27bb      	CLR  R27
                +
00055d 91e0 04f1+LDS R30 , _dataDHT + ( 1 )
                 	__GETB1MN _dataDHT,1
00055f e0f0      	LDI  R31,0
000560 0fae      	ADD  R26,R30
000561 1fbf      	ADC  R27,R31
                +
000562 91e0 04f2+LDS R30 , _dataDHT + ( 2 )
                 	__GETB1MN _dataDHT,2
000564 e0f0      	LDI  R31,0
000565 0fae      	ADD  R26,R30
000566 1fbf      	ADC  R27,R31
                +
000567 91e0 04f3+LDS R30 , _dataDHT + ( 3 )
                 	__GETB1MN _dataDHT,3
000569 e0f0      	LDI  R31,0
00056a 0fae      	ADD  R26,R30
00056b 1fbf      	ADC  R27,R31
                +
00056c 91e0 04f4+LDS R30 , _dataDHT + ( 4 )
                 	__GETB1MN _dataDHT,4
00056e e0f0      	LDI  R31,0
00056f 940e 16f1 	CALL __SWAPW12
000571 1bea      	SUB  R30,R26
000572 0bfb      	SBC  R31,R27
000573 f411      	BRNE PC+3
000574 940c 0577 	JMP _0x60
                 ; 0000 0201                 errorDHT=0;
000576 98f1      	CBI  0x1E,1
                 ; 0000 0202             if (errorDHT)
                 _0x60:
000577 9bf1      	SBIS 0x1E,1
000578 c0be      	RJMP _0x63
                 ; 0000 0203             {
                 ; 0000 0204                 v=dataDHT[0];
000579 91e0 04f0 	LDS  R30,_dataDHT
00057b e0f0      	LDI  R31,0
00057c 93e0 0360 	STS  _v,R30
00057e 93f0 0361 	STS  _v+1,R31
                 ; 0000 0205                 v<<=8;
000580 91f0 0360 	LDS  R31,_v
000582 e0e0      	LDI  R30,LOW(0)
000583 93e0 0360 	STS  _v,R30
000585 93f0 0361 	STS  _v+1,R31
                 ; 0000 0206                 v+=dataDHT[1];
                +
000587 91e0 04f1+LDS R30 , _dataDHT + ( 1 )
                 	__GETB1MN _dataDHT,1
000589 e0f0      	LDI  R31,0
00058a 91a0 0360 	LDS  R26,_v
00058c 91b0 0361 	LDS  R27,_v+1
00058e 0fea      	ADD  R30,R26
00058f 1ffb      	ADC  R31,R27
000590 93e0 0360 	STS  _v,R30
000592 93f0 0361 	STS  _v+1,R31
                 ; 0000 0207                 t1=dataDHT[2];
                +
000594 91e0 04f2+LDS R30 , _dataDHT + ( 2 )
                 	__GETB1MN _dataDHT,2
000596 e0f0      	LDI  R31,0
000597 93e0 0366 	STS  _t1,R30
000599 93f0 0367 	STS  _t1+1,R31
                 ; 0000 0208                 t1<<=8;
00059b 91f0 0366 	LDS  R31,_t1
00059d e0e0      	LDI  R30,LOW(0)
00059e 93e0 0366 	STS  _t1,R30
0005a0 93f0 0367 	STS  _t1+1,R31
                 ; 0000 0209                 t1+=dataDHT[3];
                +
0005a2 91e0 04f3+LDS R30 , _dataDHT + ( 3 )
                 	__GETB1MN _dataDHT,3
0005a4 e0f0      	LDI  R31,0
0005a5 91a0 0366 	LDS  R26,_t1
0005a7 91b0 0367 	LDS  R27,_t1+1
0005a9 0fea      	ADD  R30,R26
0005aa 1ffb      	ADC  R31,R27
0005ab 93e0 0366 	STS  _t1,R30
0005ad 93f0 0367 	STS  _t1+1,R31
                 ; 0000 020A                 vled=v;
0005af 91e0 0360 	LDS  R30,_v
0005b1 91f0 0361 	LDS  R31,_v+1
0005b3 93e0 0364 	STS  _vled,R30
0005b5 93f0 0365 	STS  _vled+1,R31
                 ; 0000 020B                 temp=v/100;
0005b7 91a0 0360 	LDS  R26,_v
0005b9 91b0 0361 	LDS  R27,_v+1
0005bb e6e4      	LDI  R30,LOW(100)
0005bc e0f0      	LDI  R31,HIGH(100)
0005bd 940e 1665 	CALL __DIVW21U
0005bf 2f1e      	MOV  R17,R30
                 ; 0000 020C                 vs[0]=temp+'0';
0005c0 5de0      	SUBI R30,-LOW(48)
0005c1 93e0 0478 	STS  _vs,R30
                 ; 0000 020D                 v-=temp*100;
0005c3 e6e4      	LDI  R30,LOW(100)
0005c4 9fe1      	MUL  R30,R17
0005c5 01f0      	MOVW R30,R0
0005c6 91a0 0360 	LDS  R26,_v
0005c8 91b0 0361 	LDS  R27,_v+1
0005ca 1bae      	SUB  R26,R30
0005cb 0bbf      	SBC  R27,R31
0005cc 93a0 0360 	STS  _v,R26
0005ce 93b0 0361 	STS  _v+1,R27
                 ; 0000 020E                 temp=v/10;
0005d0 e0ea      	LDI  R30,LOW(10)
0005d1 e0f0      	LDI  R31,HIGH(10)
0005d2 940e 1665 	CALL __DIVW21U
0005d4 2f1e      	MOV  R17,R30
                 ; 0000 020F                 vs[1]=temp+'0';
0005d5 5de0      	SUBI R30,-LOW(48)
                +
0005d6 93e0 0479+STS _vs + ( 1 ) , R30
                 	__PUTB1MN _vs,1
                 ; 0000 0210                 v-=temp*10;
0005d8 e0ea      	LDI  R30,LOW(10)
0005d9 9fe1      	MUL  R30,R17
0005da 01f0      	MOVW R30,R0
0005db 91a0 0360 	LDS  R26,_v
0005dd 91b0 0361 	LDS  R27,_v+1
0005df 1bae      	SUB  R26,R30
0005e0 0bbf      	SBC  R27,R31
0005e1 93a0 0360 	STS  _v,R26
0005e3 93b0 0361 	STS  _v+1,R27
                 ; 0000 0211                 vs[3]=v+'0';
0005e5 91e0 0360 	LDS  R30,_v
0005e7 5de0      	SUBI R30,-LOW(48)
                +
0005e8 93e0 047b+STS _vs + ( 3 ) , R30
                 	__PUTB1MN _vs,3
                 ; 0000 0212                 if (t1&0x8000)
                +
0005ea 91e0 0367+LDS R30 , _t1 + ( 1 )
                 	__GETB1MN _t1,1
0005ec 78e0      	ANDI R30,LOW(0x80)
0005ed f411      	BRNE PC+3
0005ee 940c 0600 	JMP _0x64
                 ; 0000 0213                 {
                 ; 0000 0214                     t1s[0]='-';
0005f0 e2ed      	LDI  R30,LOW(45)
0005f1 93e0 047e 	STS  _t1s,R30
                 ; 0000 0215                     t1&=0x7fff;
                +
0005f3 91e0 0367+LDS R30 , _t1 + ( 1 )
0005f5 77ef     +ANDI R30 , LOW ( 127 )
0005f6 93e0 0367+STS _t1 + ( 1 ) , R30
                 	__ANDBMNN _t1,1,127
                 ; 0000 0216                     t1--;
0005f8 e6a6      	LDI  R26,LOW(_t1)
0005f9 e0b3      	LDI  R27,HIGH(_t1)
0005fa 91ed      	LD   R30,X+
0005fb 91fd      	LD   R31,X+
0005fc 9731      	SBIW R30,1
0005fd 93fe      	ST   -X,R31
0005fe 93ee      	ST   -X,R30
                 ; 0000 0217                 }
                 ; 0000 0218                 else
0005ff c003      	RJMP _0x65
                 _0x64:
                 ; 0000 0219                     t1s[0]='+';
000600 e2eb      	LDI  R30,LOW(43)
000601 93e0 047e 	STS  _t1s,R30
                 ; 0000 021A                 temp=t1/100;
                 _0x65:
000603 91a0 0366 	LDS  R26,_t1
000605 91b0 0367 	LDS  R27,_t1+1
000607 e6e4      	LDI  R30,LOW(100)
000608 e0f0      	LDI  R31,HIGH(100)
000609 940e 1678 	CALL __DIVW21
00060b 2f1e      	MOV  R17,R30
                 ; 0000 021B                 t1s[1]=temp+'0';
00060c 5de0      	SUBI R30,-LOW(48)
                +
00060d 93e0 047f+STS _t1s + ( 1 ) , R30
                 	__PUTB1MN _t1s,1
                 ; 0000 021C                 t1-=temp*100;
00060f e6e4      	LDI  R30,LOW(100)
000610 9fe1      	MUL  R30,R17
000611 01f0      	MOVW R30,R0
000612 91a0 0366 	LDS  R26,_t1
000614 91b0 0367 	LDS  R27,_t1+1
000616 1bae      	SUB  R26,R30
000617 0bbf      	SBC  R27,R31
000618 93a0 0366 	STS  _t1,R26
00061a 93b0 0367 	STS  _t1+1,R27
                 ; 0000 021D                 temp=t1/10;
00061c e0ea      	LDI  R30,LOW(10)
00061d e0f0      	LDI  R31,HIGH(10)
00061e 940e 1678 	CALL __DIVW21
000620 2f1e      	MOV  R17,R30
                 ; 0000 021E                 t1s[2]=temp+'0';
000621 5de0      	SUBI R30,-LOW(48)
                +
000622 93e0 0480+STS _t1s + ( 2 ) , R30
                 	__PUTB1MN _t1s,2
                 ; 0000 021F                 t1-=temp*10;
000624 e0ea      	LDI  R30,LOW(10)
000625 9fe1      	MUL  R30,R17
000626 01f0      	MOVW R30,R0
000627 91a0 0366 	LDS  R26,_t1
000629 91b0 0367 	LDS  R27,_t1+1
00062b 1bae      	SUB  R26,R30
00062c 0bbf      	SBC  R27,R31
00062d 93a0 0366 	STS  _t1,R26
00062f 93b0 0367 	STS  _t1+1,R27
                 ; 0000 0220                 t1s[4]=t1+'0';
000631 91e0 0366 	LDS  R30,_t1
000633 5de0      	SUBI R30,-LOW(48)
                +
000634 93e0 0482+STS _t1s + ( 4 ) , R30
                 	__PUTB1MN _t1s,4
                 ; 0000 0221             }
                 ; 0000 0222             else
000636 c007      	RJMP _0x66
                 _0x63:
                 ; 0000 0223             {
                 ; 0000 0224                 t1s[1]='x';
000637 e7e8      	LDI  R30,LOW(120)
                +
000638 93e0 047f+STS _t1s + ( 1 ) , R30
                 	__PUTB1MN _t1s,1
                 ; 0000 0225                 t1s[2]='x';
                +
00063a 93e0 0480+STS _t1s + ( 2 ) , R30
                 	__PUTB1MN _t1s,2
                 ; 0000 0226                 t1s[4]='x';
                +
00063c 93e0 0482+STS _t1s + ( 4 ) , R30
                 	__PUTB1MN _t1s,4
                 ; 0000 0227             }
                 _0x66:
                 ; 0000 0228         }
                 ; 0000 0229         if (permit==21)
                 _0x5F:
00063e e1e5      	LDI  R30,LOW(21)
00063f 15e8      	CP   R30,R8
000640 f011      	BREQ PC+3
000641 940c 0655 	JMP _0x67
                 ; 0000 022A         {
                 ; 0000 022B             twi_adr[0]=0xF6;
000643 efe6      	LDI  R30,LOW(246)
000644 93e0 04a7 	STS  _twi_adr,R30
                 ; 0000 022C             twi_master_trans(0x77,(unsigned char *)&twi_adr,1,(unsigned char *)&twi_eeprom,2);
000646 e7e7      	LDI  R30,LOW(119)
000647 93ea      	ST   -Y,R30
000648 eae7      	LDI  R30,LOW(_twi_adr)
000649 e0f4      	LDI  R31,HIGH(_twi_adr)
00064a 93fa      	ST   -Y,R31
00064b 93ea      	ST   -Y,R30
00064c e0e1      	LDI  R30,LOW(1)
00064d 93ea      	ST   -Y,R30
00064e e9e1      	LDI  R30,LOW(_twi_eeprom)
00064f e0f4      	LDI  R31,HIGH(_twi_eeprom)
000650 93fa      	ST   -Y,R31
000651 93ea      	ST   -Y,R30
000652 e0a2      	LDI  R26,LOW(2)
000653 940e 1188 	CALL _twi_master_trans
                 ; 0000 022D         }
                 ; 0000 022E         if (permit==22)
                 _0x67:
000655 e1e6      	LDI  R30,LOW(22)
000656 15e8      	CP   R30,R8
000657 f011      	BREQ PC+3
000658 940c 08ad 	JMP _0x68
                 ; 0000 022F         {
                 ; 0000 0230             pressure=((unsigned long)twi_eeprom[0]<<8)+twi_eeprom[1];
00065a 91e0 0491 	LDS  R30,_twi_eeprom
00065c e0f0      	LDI  R31,0
00065d 940e 1624 	CALL __CWD1
00065f 01df      	MOVW R26,R30
000660 01cb      	MOVW R24,R22
000661 e0e8      	LDI  R30,LOW(8)
000662 940e 15e8 	CALL __LSLD12
000664 01df      	MOVW R26,R30
000665 01cb      	MOVW R24,R22
                +
000666 91e0 0492+LDS R30 , _twi_eeprom + ( 1 )
                 	__GETB1MN _twi_eeprom,1
000668 e0f0      	LDI  R31,0
000669 940e 1624 	CALL __CWD1
00066b 940e 15c5 	CALL __ADDD12
00066d 93e0 04df 	STS  _pressure,R30
00066f 93f0 04e0 	STS  _pressure+1,R31
000671 9360 04e1 	STS  _pressure+2,R22
000673 9370 04e2 	STS  _pressure+3,R23
                 ; 0000 0231             //pressure=((long)twi_eeprom[0]<<16)+((long)twi_eeprom[1]<<8)+twi_eeprom[2];
                 ; 0000 0232             b6 = b5 - 4000;
000675 91e0 04cb 	LDS  R30,_b5
000677 91f0 04cc 	LDS  R31,_b5+1
000679 9160 04cd 	LDS  R22,_b5+2
00067b 9170 04ce 	LDS  R23,_b5+3
                +
00067d 5ae0     +SUBI R30 , LOW ( 4000 )
00067e 40ff     +SBCI R31 , HIGH ( 4000 )
00067f 4060     +SBCI R22 , BYTE3 ( 4000 )
000680 4070     +SBCI R23 , BYTE4 ( 4000 )
                 	__SUBD1N 4000
000681 93e0 04d3 	STS  _b6,R30
000683 93f0 04d4 	STS  _b6+1,R31
000685 9360 04d5 	STS  _b6+2,R22
000687 9370 04d6 	STS  _b6+3,R23
                 ; 0000 0233 	        x1 = (b2 * ((b6 * b6) >> 12)) >> 11;
000689 91a0 04d3 	LDS  R26,_b6
00068b 91b0 04d4 	LDS  R27,_b6+1
00068d 9180 04d5 	LDS  R24,_b6+2
00068f 9190 04d6 	LDS  R25,_b6+3
000691 940e 1660 	CALL __MULD12
000693 01df      	MOVW R26,R30
000694 01cb      	MOVW R24,R22
000695 e0ec      	LDI  R30,LOW(12)
000696 940e 15f4 	CALL __ASRD12
000698 91a0 04b1 	LDS  R26,_b2
00069a 91b0 04b2 	LDS  R27,_b2+1
00069c 940e 1629 	CALL __CWD2
00069e 940e 1660 	CALL __MULD12
0006a0 01df      	MOVW R26,R30
0006a1 01cb      	MOVW R24,R22
0006a2 e0eb      	LDI  R30,LOW(11)
0006a3 940e 15f4 	CALL __ASRD12
0006a5 93e0 04c3 	STS  _x1,R30
0006a7 93f0 04c4 	STS  _x1+1,R31
0006a9 9360 04c5 	STS  _x1+2,R22
0006ab 9370 04c6 	STS  _x1+3,R23
                 ; 0000 0234 	        x2 = ac2 * b6 >> 11;
0006ad 91e0 04d3 	LDS  R30,_b6
0006af 91f0 04d4 	LDS  R31,_b6+1
0006b1 9160 04d5 	LDS  R22,_b6+2
0006b3 9170 04d6 	LDS  R23,_b6+3
0006b5 91a0 04ab 	LDS  R26,_ac2
0006b7 91b0 04ac 	LDS  R27,_ac2+1
0006b9 940e 1629 	CALL __CWD2
0006bb 940e 1660 	CALL __MULD12
0006bd 01df      	MOVW R26,R30
0006be 01cb      	MOVW R24,R22
0006bf e0eb      	LDI  R30,LOW(11)
0006c0 940e 15f4 	CALL __ASRD12
0006c2 93e0 04c7 	STS  _x2,R30
0006c4 93f0 04c8 	STS  _x2+1,R31
0006c6 9360 04c9 	STS  _x2+2,R22
0006c8 9370 04ca 	STS  _x2+3,R23
                 ; 0000 0235 	        x3 = x1 + x2;
0006ca 91a0 04c3 	LDS  R26,_x1
0006cc 91b0 04c4 	LDS  R27,_x1+1
0006ce 9180 04c5 	LDS  R24,_x1+2
0006d0 9190 04c6 	LDS  R25,_x1+3
0006d2 940e 15c5 	CALL __ADDD12
0006d4 93e0 04d7 	STS  _x3,R30
0006d6 93f0 04d8 	STS  _x3+1,R31
0006d8 9360 04d9 	STS  _x3+2,R22
0006da 9370 04da 	STS  _x3+3,R23
                 ; 0000 0236             b3= (long int)ac1<<2;
0006dc 91a0 04a9 	LDS  R26,_ac1
0006de 91b0 04aa 	LDS  R27,_ac1+1
0006e0 940e 1629 	CALL __CWD2
0006e2 e0e2      	LDI  R30,LOW(2)
0006e3 940e 15e8 	CALL __LSLD12
0006e5 93e0 04db 	STS  _b3,R30
0006e7 93f0 04dc 	STS  _b3+1,R31
0006e9 9360 04dd 	STS  _b3+2,R22
0006eb 9370 04de 	STS  _b3+3,R23
                 ; 0000 0237             b3+=x3;
0006ed 91e0 04d7 	LDS  R30,_x3
0006ef 91f0 04d8 	LDS  R31,_x3+1
0006f1 9160 04d9 	LDS  R22,_x3+2
0006f3 9170 04da 	LDS  R23,_x3+3
0006f5 91a0 04db 	LDS  R26,_b3
0006f7 91b0 04dc 	LDS  R27,_b3+1
0006f9 9180 04dd 	LDS  R24,_b3+2
0006fb 9190 04de 	LDS  R25,_b3+3
0006fd 940e 15c5 	CALL __ADDD12
0006ff 93e0 04db 	STS  _b3,R30
000701 93f0 04dc 	STS  _b3+1,R31
000703 9360 04dd 	STS  _b3+2,R22
000705 9370 04de 	STS  _b3+3,R23
                 ; 0000 0238 
                 ; 0000 0239             //b3<<=3;
                 ; 0000 023A 
                 ; 0000 023B             b3+=2;
                +
000707 5fee     +SUBI R30 , LOW ( - 2 )
000708 4fff     +SBCI R31 , HIGH ( - 2 )
000709 4f6f     +SBCI R22 , BYTE3 ( - 2 )
00070a 4f7f     +SBCI R23 , BYTE4 ( - 2 )
                 	__ADDD1N 2
00070b 93e0 04db 	STS  _b3,R30
00070d 93f0 04dc 	STS  _b3+1,R31
00070f 9360 04dd 	STS  _b3+2,R22
000711 9370 04de 	STS  _b3+3,R23
                 ; 0000 023C             b3>>=2;
000713 91a0 04db 	LDS  R26,_b3
000715 91b0 04dc 	LDS  R27,_b3+1
000717 9180 04dd 	LDS  R24,_b3+2
000719 9190 04de 	LDS  R25,_b3+3
00071b e0e2      	LDI  R30,LOW(2)
00071c 940e 15f4 	CALL __ASRD12
00071e 93e0 04db 	STS  _b3,R30
000720 93f0 04dc 	STS  _b3+1,R31
000722 9360 04dd 	STS  _b3+2,R22
000724 9370 04de 	STS  _b3+3,R23
                 ; 0000 023D 	        x1 = ac3 * b6;
000726 91e0 04d3 	LDS  R30,_b6
000728 91f0 04d4 	LDS  R31,_b6+1
00072a 9160 04d5 	LDS  R22,_b6+2
00072c 9170 04d6 	LDS  R23,_b6+3
00072e 91a0 04ad 	LDS  R26,_ac3
000730 91b0 04ae 	LDS  R27,_ac3+1
000732 940e 1629 	CALL __CWD2
000734 940e 1660 	CALL __MULD12
000736 93e0 04c3 	STS  _x1,R30
000738 93f0 04c4 	STS  _x1+1,R31
00073a 9360 04c5 	STS  _x1+2,R22
00073c 9370 04c6 	STS  _x1+3,R23
                 ; 0000 023E             x1>>=13;
00073e 91a0 04c3 	LDS  R26,_x1
000740 91b0 04c4 	LDS  R27,_x1+1
000742 9180 04c5 	LDS  R24,_x1+2
000744 9190 04c6 	LDS  R25,_x1+3
000746 e0ed      	LDI  R30,LOW(13)
000747 940e 15f4 	CALL __ASRD12
000749 93e0 04c3 	STS  _x1,R30
00074b 93f0 04c4 	STS  _x1+1,R31
00074d 9360 04c5 	STS  _x1+2,R22
00074f 9370 04c6 	STS  _x1+3,R23
                 ; 0000 023F 	        x2 = (b1 * ((b6 * b6) >> 12)) >> 16;
000751 91e0 04d3 	LDS  R30,_b6
000753 91f0 04d4 	LDS  R31,_b6+1
000755 9160 04d5 	LDS  R22,_b6+2
000757 9170 04d6 	LDS  R23,_b6+3
000759 91a0 04d3 	LDS  R26,_b6
00075b 91b0 04d4 	LDS  R27,_b6+1
00075d 9180 04d5 	LDS  R24,_b6+2
00075f 9190 04d6 	LDS  R25,_b6+3
000761 940e 1660 	CALL __MULD12
000763 01df      	MOVW R26,R30
000764 01cb      	MOVW R24,R22
000765 e0ec      	LDI  R30,LOW(12)
000766 940e 15f4 	CALL __ASRD12
000768 91a0 04af 	LDS  R26,_b1
00076a 91b0 04b0 	LDS  R27,_b1+1
00076c 940e 1629 	CALL __CWD2
00076e 940e 1660 	CALL __MULD12
000770 940e 161d 	CALL __ASRD16
000772 93e0 04c7 	STS  _x2,R30
000774 93f0 04c8 	STS  _x2+1,R31
000776 9360 04c9 	STS  _x2+2,R22
000778 9370 04ca 	STS  _x2+3,R23
                 ; 0000 0240 	        x3 = ((x1 + x2) + 2) >> 2;
00077a 91a0 04c3 	LDS  R26,_x1
00077c 91b0 04c4 	LDS  R27,_x1+1
00077e 9180 04c5 	LDS  R24,_x1+2
000780 9190 04c6 	LDS  R25,_x1+3
000782 940e 15c5 	CALL __ADDD12
                +
000784 5fee     +SUBI R30 , LOW ( - 2 )
000785 4fff     +SBCI R31 , HIGH ( - 2 )
000786 4f6f     +SBCI R22 , BYTE3 ( - 2 )
000787 4f7f     +SBCI R23 , BYTE4 ( - 2 )
                 	__ADDD1N 2
000788 940e 160c 	CALL __ASRD1
00078a 940e 160c 	CALL __ASRD1
00078c 93e0 04d7 	STS  _x3,R30
00078e 93f0 04d8 	STS  _x3+1,R31
000790 9360 04d9 	STS  _x3+2,R22
000792 9370 04da 	STS  _x3+3,R23
                 ; 0000 0241 	        b4 = ac4 * (unsigned long) (x3 + 32768) >> 15;
                +
000794 50e0     +SUBI R30 , LOW ( - 32768 )
000795 48f0     +SBCI R31 , HIGH ( - 32768 )
000796 4f6f     +SBCI R22 , BYTE3 ( - 32768 )
000797 4f7f     +SBCI R23 , BYTE4 ( - 32768 )
                 	__ADDD1N 32768
000798 91a0 04b9 	LDS  R26,_ac4
00079a 91b0 04ba 	LDS  R27,_ac4+1
00079c 2788      	CLR  R24
00079d 2799      	CLR  R25
00079e 940e 163b 	CALL __MULD12U
0007a0 01df      	MOVW R26,R30
0007a1 01cb      	MOVW R24,R22
0007a2 e0ef      	LDI  R30,LOW(15)
0007a3 940e 1600 	CALL __LSRD12
0007a5 93e0 04e7 	STS  _b4,R30
0007a7 93f0 04e8 	STS  _b4+1,R31
0007a9 9360 04e9 	STS  _b4+2,R22
0007ab 9370 04ea 	STS  _b4+3,R23
                 ; 0000 0242 	        b7 = (unsigned long) (pressure - b3) * 50000;
0007ad 91a0 04db 	LDS  R26,_b3
0007af 91b0 04dc 	LDS  R27,_b3+1
0007b1 9180 04dd 	LDS  R24,_b3+2
0007b3 9190 04de 	LDS  R25,_b3+3
0007b5 91e0 04df 	LDS  R30,_pressure
0007b7 91f0 04e0 	LDS  R31,_pressure+1
0007b9 9160 04e1 	LDS  R22,_pressure+2
0007bb 9170 04e2 	LDS  R23,_pressure+3
0007bd 940e 15ca 	CALL __SUBD12
                +
0007bf e5a0     +LDI R26 , LOW ( 0xC350 )
0007c0 ecb3     +LDI R27 , HIGH ( 0xC350 )
0007c1 e080     +LDI R24 , BYTE3 ( 0xC350 )
0007c2 e090     +LDI R25 , BYTE4 ( 0xC350 )
                 	__GETD2N 0xC350
0007c3 940e 163b 	CALL __MULD12U
0007c5 93e0 04eb 	STS  _b7,R30
0007c7 93f0 04ec 	STS  _b7+1,R31
0007c9 9360 04ed 	STS  _b7+2,R22
0007cb 9370 04ee 	STS  _b7+3,R23
                 ; 0000 0243             //b7 = ((unsigned long)pressure - b3) * (50000>>3);
                 ; 0000 0244 		    if (b7 < 0x80000000)
0007cd 91a0 04eb 	LDS  R26,_b7
0007cf 91b0 04ec 	LDS  R27,_b7+1
0007d1 9180 04ed 	LDS  R24,_b7+2
0007d3 9190 04ee 	LDS  R25,_b7+3
                +
0007d5 30a0     +CPI R26 , LOW ( 0x80000000 )
0007d6 e0e0     +LDI R30 , HIGH ( 0x80000000 )
0007d7 07be     +CPC R27 , R30
0007d8 e0e0     +LDI R30 , BYTE3 ( 0x80000000 )
0007d9 078e     +CPC R24 , R30
0007da e8e0     +LDI R30 , BYTE4 ( 0x80000000 )
0007db 079e     +CPC R25 , R30
                 	__CPD2N 0x80000000
0007dc f010      	BRLO PC+3
0007dd 940c 07fe 	JMP _0x69
                 ; 0000 0245 		        p = (b7 << 1) / b4;
0007df 91e0 04eb 	LDS  R30,_b7
0007e1 91f0 04ec 	LDS  R31,_b7+1
0007e3 9160 04ed 	LDS  R22,_b7+2
0007e5 9170 04ee 	LDS  R23,_b7+3
0007e7 940e 1618 	CALL __LSLD1
0007e9 01df      	MOVW R26,R30
0007ea 01cb      	MOVW R24,R22
0007eb 91e0 04e7 	LDS  R30,_b4
0007ed 91f0 04e8 	LDS  R31,_b4+1
0007ef 9160 04e9 	LDS  R22,_b4+2
0007f1 9170 04ea 	LDS  R23,_b4+3
0007f3 940e 167d 	CALL __DIVD21U
0007f5 93e0 04e3 	STS  _p,R30
0007f7 93f0 04e4 	STS  _p+1,R31
0007f9 9360 04e5 	STS  _p+2,R22
0007fb 9370 04e6 	STS  _p+3,R23
                 ; 0000 0246         	else
0007fd c01c      	RJMP _0x6A
                 _0x69:
                 ; 0000 0247 		        p = (b7 / b4) << 1;
0007fe 91e0 04e7 	LDS  R30,_b4
000800 91f0 04e8 	LDS  R31,_b4+1
000802 9160 04e9 	LDS  R22,_b4+2
000804 9170 04ea 	LDS  R23,_b4+3
000806 91a0 04eb 	LDS  R26,_b7
000808 91b0 04ec 	LDS  R27,_b7+1
00080a 9180 04ed 	LDS  R24,_b7+2
00080c 9190 04ee 	LDS  R25,_b7+3
00080e 940e 167d 	CALL __DIVD21U
000810 940e 1618 	CALL __LSLD1
000812 93e0 04e3 	STS  _p,R30
000814 93f0 04e4 	STS  _p+1,R31
000816 9360 04e5 	STS  _p+2,R22
000818 9370 04e6 	STS  _p+3,R23
                 ; 0000 0248 	        x1 = (p >> 8) * (p >> 8);
                 _0x6A:
00081a 91a0 04e3 	LDS  R26,_p
00081c 91b0 04e4 	LDS  R27,_p+1
00081e 9180 04e5 	LDS  R24,_p+2
000820 9190 04e6 	LDS  R25,_p+3
000822 e0e8      	LDI  R30,LOW(8)
000823 940e 15f4 	CALL __ASRD12
000825 937f      	PUSH R23
000826 936f      	PUSH R22
000827 93ff      	PUSH R31
000828 93ef      	PUSH R30
000829 e0e8      	LDI  R30,LOW(8)
00082a 940e 15f4 	CALL __ASRD12
00082c 91af      	POP  R26
00082d 91bf      	POP  R27
00082e 918f      	POP  R24
00082f 919f      	POP  R25
000830 940e 1660 	CALL __MULD12
000832 93e0 04c3 	STS  _x1,R30
000834 93f0 04c4 	STS  _x1+1,R31
000836 9360 04c5 	STS  _x1+2,R22
000838 9370 04c6 	STS  _x1+3,R23
                 ; 0000 0249 	        x1 = (x1 * 3038) >> 16;
                +
00083a edae     +LDI R26 , LOW ( 0xBDE )
00083b e0bb     +LDI R27 , HIGH ( 0xBDE )
00083c e080     +LDI R24 , BYTE3 ( 0xBDE )
00083d e090     +LDI R25 , BYTE4 ( 0xBDE )
                 	__GETD2N 0xBDE
00083e 940e 1660 	CALL __MULD12
000840 940e 161d 	CALL __ASRD16
000842 93e0 04c3 	STS  _x1,R30
000844 93f0 04c4 	STS  _x1+1,R31
000846 9360 04c5 	STS  _x1+2,R22
000848 9370 04c6 	STS  _x1+3,R23
                 ; 0000 024A 	        x2 = (-7357 * p) >> 16;
00084a 91e0 04e3 	LDS  R30,_p
00084c 91f0 04e4 	LDS  R31,_p+1
00084e 9160 04e5 	LDS  R22,_p+2
000850 9170 04e6 	LDS  R23,_p+3
                +
000852 e4a3     +LDI R26 , LOW ( 0xFFFFE343 )
000853 eeb3     +LDI R27 , HIGH ( 0xFFFFE343 )
000854 ef8f     +LDI R24 , BYTE3 ( 0xFFFFE343 )
000855 ef9f     +LDI R25 , BYTE4 ( 0xFFFFE343 )
                 	__GETD2N 0xFFFFE343
000856 940e 1660 	CALL __MULD12
000858 940e 161d 	CALL __ASRD16
00085a 93e0 04c7 	STS  _x2,R30
00085c 93f0 04c8 	STS  _x2+1,R31
00085e 9360 04c9 	STS  _x2+2,R22
000860 9370 04ca 	STS  _x2+3,R23
                 ; 0000 024B             x2+=x1;
000862 91e0 04c3 	LDS  R30,_x1
000864 91f0 04c4 	LDS  R31,_x1+1
000866 9160 04c5 	LDS  R22,_x1+2
000868 9170 04c6 	LDS  R23,_x1+3
00086a 91a0 04c7 	LDS  R26,_x2
00086c 91b0 04c8 	LDS  R27,_x2+1
00086e 9180 04c9 	LDS  R24,_x2+2
000870 9190 04ca 	LDS  R25,_x2+3
000872 940e 15c5 	CALL __ADDD12
000874 93e0 04c7 	STS  _x2,R30
000876 93f0 04c8 	STS  _x2+1,R31
000878 9360 04c9 	STS  _x2+2,R22
00087a 9370 04ca 	STS  _x2+3,R23
                 ; 0000 024C             x2+=3791;
                +
00087c 53e1     +SUBI R30 , LOW ( - 3791 )
00087d 4ff1     +SBCI R31 , HIGH ( - 3791 )
00087e 4f6f     +SBCI R22 , BYTE3 ( - 3791 )
00087f 4f7f     +SBCI R23 , BYTE4 ( - 3791 )
                 	__ADDD1N 3791
000880 93e0 04c7 	STS  _x2,R30
000882 93f0 04c8 	STS  _x2+1,R31
000884 9360 04c9 	STS  _x2+2,R22
000886 9370 04ca 	STS  _x2+3,R23
                 ; 0000 024D             x2>>=4;
000888 91a0 04c7 	LDS  R26,_x2
00088a 91b0 04c8 	LDS  R27,_x2+1
00088c 9180 04c9 	LDS  R24,_x2+2
00088e 9190 04ca 	LDS  R25,_x2+3
000890 e0e4      	LDI  R30,LOW(4)
000891 940e 15f4 	CALL __ASRD12
000893 93e0 04c7 	STS  _x2,R30
000895 93f0 04c8 	STS  _x2+1,R31
000897 9360 04c9 	STS  _x2+2,R22
000899 9370 04ca 	STS  _x2+3,R23
                 ; 0000 024E 	        pressure = p + x2;
00089b 91a0 04e3 	LDS  R26,_p
00089d 91b0 04e4 	LDS  R27,_p+1
00089f 9180 04e5 	LDS  R24,_p+2
0008a1 9190 04e6 	LDS  R25,_p+3
0008a3 940e 15c5 	CALL __ADDD12
0008a5 93e0 04df 	STS  _pressure,R30
0008a7 93f0 04e0 	STS  _pressure+1,R31
0008a9 9360 04e1 	STS  _pressure+2,R22
0008ab 9370 04e2 	STS  _pressure+3,R23
                 ; 0000 024F            /* if (pressure>92500)
                 ; 0000 0250             {
                 ; 0000 0251             dataLed[3]=0x25;
                 ; 0000 0252             dataLed[4]=0x50;
                 ; 0000 0253             dataLed[5]=0x00;
                 ; 0000 0254             }   */
                 ; 0000 0255         }
                 ; 0000 0256         if(permit==22)
                 _0x68:
0008ad e1e6      	LDI  R30,LOW(22)
0008ae 15e8      	CP   R30,R8
0008af f011      	BREQ PC+3
0008b0 940c 0c25 	JMP _0x6B
                 ; 0000 0257         {
                 ; 0000 0258         //P
                 ; 0000 0259             dataLed[0]=0x00;
0008b2 e0e0      	LDI  R30,LOW(0)
0008b3 93e0 0300 	STS  _dataLed,R30
                 ; 0000 025A             dataLed[1]=0x50;
0008b5 e5e0      	LDI  R30,LOW(80)
                +
0008b6 93e0 0301+STS _dataLed + ( 1 ) , R30
                 	__PUTB1MN _dataLed,1
                 ; 0000 025B             dataLed[2]=0x00;
0008b8 e0e0      	LDI  R30,LOW(0)
                +
0008b9 93e0 0302+STS _dataLed + ( 2 ) , R30
                 	__PUTB1MN _dataLed,2
                 ; 0000 025C             if (pressure>=92500)
0008bb 91a0 04df 	LDS  R26,_pressure
0008bd 91b0 04e0 	LDS  R27,_pressure+1
0008bf 9180 04e1 	LDS  R24,_pressure+2
0008c1 9190 04e2 	LDS  R25,_pressure+3
                +
0008c3 35a4     +CPI R26 , LOW ( 0x16954 )
0008c4 e6e9     +LDI R30 , HIGH ( 0x16954 )
0008c5 07be     +CPC R27 , R30
0008c6 e0e1     +LDI R30 , BYTE3 ( 0x16954 )
0008c7 078e     +CPC R24 , R30
0008c8 e0e0     +LDI R30 , BYTE4 ( 0x16954 )
0008c9 079e     +CPC R25 , R30
                 	__CPD2N 0x16954
0008ca f414      	BRGE PC+3
0008cb 940c 08d7 	JMP _0x6C
                 ; 0000 025D             {
                 ; 0000 025E             dataLed[3]=0x25;
0008cd e2e5      	LDI  R30,LOW(37)
                +
0008ce 93e0 0303+STS _dataLed + ( 3 ) , R30
                 	__PUTB1MN _dataLed,3
                 ; 0000 025F             dataLed[4]=0x50;
0008d0 e5e0      	LDI  R30,LOW(80)
                +
0008d1 93e0 0304+STS _dataLed + ( 4 ) , R30
                 	__PUTB1MN _dataLed,4
                 ; 0000 0260             dataLed[5]=0x00;
0008d3 e0e0      	LDI  R30,LOW(0)
                +
0008d4 93e0 0305+STS _dataLed + ( 5 ) , R30
                 	__PUTB1MN _dataLed,5
                 ; 0000 0261             }else{dataLed[3]=0x00;
0008d6 c007      	RJMP _0x6D
                 _0x6C:
0008d7 e0e0      	LDI  R30,LOW(0)
                +
0008d8 93e0 0303+STS _dataLed + ( 3 ) , R30
                 	__PUTB1MN _dataLed,3
                 ; 0000 0262             dataLed[4]=0x00;
                +
0008da 93e0 0304+STS _dataLed + ( 4 ) , R30
                 	__PUTB1MN _dataLed,4
                 ; 0000 0263             dataLed[5]=0x00;}
                +
0008dc 93e0 0305+STS _dataLed + ( 5 ) , R30
                 	__PUTB1MN _dataLed,5
                 _0x6D:
                 ; 0000 0264             if (pressure>=95000)
0008de 91a0 04df 	LDS  R26,_pressure
0008e0 91b0 04e0 	LDS  R27,_pressure+1
0008e2 9180 04e1 	LDS  R24,_pressure+2
0008e4 9190 04e2 	LDS  R25,_pressure+3
                +
0008e6 31a8     +CPI R26 , LOW ( 0x17318 )
0008e7 e7e3     +LDI R30 , HIGH ( 0x17318 )
0008e8 07be     +CPC R27 , R30
0008e9 e0e1     +LDI R30 , BYTE3 ( 0x17318 )
0008ea 078e     +CPC R24 , R30
0008eb e0e0     +LDI R30 , BYTE4 ( 0x17318 )
0008ec 079e     +CPC R25 , R30
                 	__CPD2N 0x17318
0008ed f414      	BRGE PC+3
0008ee 940c 08f9 	JMP _0x6E
                 ; 0000 0265             {
                 ; 0000 0266             dataLed[6]=0x50;
0008f0 e5e0      	LDI  R30,LOW(80)
                +
0008f1 93e0 0306+STS _dataLed + ( 6 ) , R30
                 	__PUTB1MN _dataLed,6
                 ; 0000 0267             dataLed[7]=0x50;
                +
0008f3 93e0 0307+STS _dataLed + ( 7 ) , R30
                 	__PUTB1MN _dataLed,7
                 ; 0000 0268             dataLed[8]=0x00;}else{dataLed[6]=0x00;
0008f5 e0e0      	LDI  R30,LOW(0)
                +
0008f6 93e0 0308+STS _dataLed + ( 8 ) , R30
                 	__PUTB1MN _dataLed,8
0008f8 c007      	RJMP _0x6F
                 _0x6E:
0008f9 e0e0      	LDI  R30,LOW(0)
                +
0008fa 93e0 0306+STS _dataLed + ( 6 ) , R30
                 	__PUTB1MN _dataLed,6
                 ; 0000 0269             dataLed[7]=0x00;
                +
0008fc 93e0 0307+STS _dataLed + ( 7 ) , R30
                 	__PUTB1MN _dataLed,7
                 ; 0000 026A             dataLed[8]=0x00;}
                +
0008fe 93e0 0308+STS _dataLed + ( 8 ) , R30
                 	__PUTB1MN _dataLed,8
                 _0x6F:
                 ; 0000 026B             if (pressure>=100000)
000900 91a0 04df 	LDS  R26,_pressure
000902 91b0 04e0 	LDS  R27,_pressure+1
000904 9180 04e1 	LDS  R24,_pressure+2
000906 9190 04e2 	LDS  R25,_pressure+3
                +
000908 3aa0     +CPI R26 , LOW ( 0x186A0 )
000909 e8e6     +LDI R30 , HIGH ( 0x186A0 )
00090a 07be     +CPC R27 , R30
00090b e0e1     +LDI R30 , BYTE3 ( 0x186A0 )
00090c 078e     +CPC R24 , R30
00090d e0e0     +LDI R30 , BYTE4 ( 0x186A0 )
00090e 079e     +CPC R25 , R30
                 	__CPD2N 0x186A0
00090f f414      	BRGE PC+3
000910 940c 091b 	JMP _0x70
                 ; 0000 026C             {
                 ; 0000 026D             dataLed[9]=0x50;
000912 e5e0      	LDI  R30,LOW(80)
                +
000913 93e0 0309+STS _dataLed + ( 9 ) , R30
                 	__PUTB1MN _dataLed,9
                 ; 0000 026E             dataLed[10]=0x00;
000915 e0e0      	LDI  R30,LOW(0)
                +
000916 93e0 030a+STS _dataLed + ( 10 ) , R30
                 	__PUTB1MN _dataLed,10
                 ; 0000 026F             dataLed[11]=0x00;}else{dataLed[9]=0x00;
                +
000918 93e0 030b+STS _dataLed + ( 11 ) , R30
                 	__PUTB1MN _dataLed,11
00091a c007      	RJMP _0x71
                 _0x70:
00091b e0e0      	LDI  R30,LOW(0)
                +
00091c 93e0 0309+STS _dataLed + ( 9 ) , R30
                 	__PUTB1MN _dataLed,9
                 ; 0000 0270             dataLed[10]=0x00;
                +
00091e 93e0 030a+STS _dataLed + ( 10 ) , R30
                 	__PUTB1MN _dataLed,10
                 ; 0000 0271             dataLed[11]=0x00;}
                +
000920 93e0 030b+STS _dataLed + ( 11 ) , R30
                 	__PUTB1MN _dataLed,11
                 _0x71:
                 ; 0000 0272             if (pressure>=102500)
000922 91a0 04df 	LDS  R26,_pressure
000924 91b0 04e0 	LDS  R27,_pressure+1
000926 9180 04e1 	LDS  R24,_pressure+2
000928 9190 04e2 	LDS  R25,_pressure+3
                +
00092a 36a4     +CPI R26 , LOW ( 0x19064 )
00092b e9e0     +LDI R30 , HIGH ( 0x19064 )
00092c 07be     +CPC R27 , R30
00092d e0e1     +LDI R30 , BYTE3 ( 0x19064 )
00092e 078e     +CPC R24 , R30
00092f e0e0     +LDI R30 , BYTE4 ( 0x19064 )
000930 079e     +CPC R25 , R30
                 	__CPD2N 0x19064
000931 f414      	BRGE PC+3
000932 940c 093d 	JMP _0x72
                 ; 0000 0273             {
                 ; 0000 0274             dataLed[12]=0x50;
000934 e5e0      	LDI  R30,LOW(80)
                +
000935 93e0 030c+STS _dataLed + ( 12 ) , R30
                 	__PUTB1MN _dataLed,12
                 ; 0000 0275             dataLed[13]=0x0;
000937 e0e0      	LDI  R30,LOW(0)
                +
000938 93e0 030d+STS _dataLed + ( 13 ) , R30
                 	__PUTB1MN _dataLed,13
                 ; 0000 0276             dataLed[14]=0x00;}else{dataLed[12]=0x00;
                +
00093a 93e0 030e+STS _dataLed + ( 14 ) , R30
                 	__PUTB1MN _dataLed,14
00093c c007      	RJMP _0x73
                 _0x72:
00093d e0e0      	LDI  R30,LOW(0)
                +
00093e 93e0 030c+STS _dataLed + ( 12 ) , R30
                 	__PUTB1MN _dataLed,12
                 ; 0000 0277             dataLed[13]=0x00;
                +
000940 93e0 030d+STS _dataLed + ( 13 ) , R30
                 	__PUTB1MN _dataLed,13
                 ; 0000 0278             dataLed[14]=0x00;}
                +
000942 93e0 030e+STS _dataLed + ( 14 ) , R30
                 	__PUTB1MN _dataLed,14
                 _0x73:
                 ; 0000 0279             if (pressure>=105000)
000944 91a0 04df 	LDS  R26,_pressure
000946 91b0 04e0 	LDS  R27,_pressure+1
000948 9180 04e1 	LDS  R24,_pressure+2
00094a 9190 04e2 	LDS  R25,_pressure+3
                +
00094c 32a8     +CPI R26 , LOW ( 0x19A28 )
00094d e9ea     +LDI R30 , HIGH ( 0x19A28 )
00094e 07be     +CPC R27 , R30
00094f e0e1     +LDI R30 , BYTE3 ( 0x19A28 )
000950 078e     +CPC R24 , R30
000951 e0e0     +LDI R30 , BYTE4 ( 0x19A28 )
000952 079e     +CPC R25 , R30
                 	__CPD2N 0x19A28
000953 f414      	BRGE PC+3
000954 940c 095f 	JMP _0x74
                 ; 0000 027A             {
                 ; 0000 027B             dataLed[15]=0x50;
000956 e5e0      	LDI  R30,LOW(80)
                +
000957 93e0 030f+STS _dataLed + ( 15 ) , R30
                 	__PUTB1MN _dataLed,15
                 ; 0000 027C             dataLed[16]=0x50;
                +
000959 93e0 0310+STS _dataLed + ( 16 ) , R30
                 	__PUTB1MN _dataLed,16
                 ; 0000 027D             dataLed[17]=0x00;}else{dataLed[15]=0x00;
00095b e0e0      	LDI  R30,LOW(0)
                +
00095c 93e0 0311+STS _dataLed + ( 17 ) , R30
                 	__PUTB1MN _dataLed,17
00095e c007      	RJMP _0x75
                 _0x74:
00095f e0e0      	LDI  R30,LOW(0)
                +
000960 93e0 030f+STS _dataLed + ( 15 ) , R30
                 	__PUTB1MN _dataLed,15
                 ; 0000 027E             dataLed[16]=0x00;
                +
000962 93e0 0310+STS _dataLed + ( 16 ) , R30
                 	__PUTB1MN _dataLed,16
                 ; 0000 027F             dataLed[17]=0x00;}
                +
000964 93e0 0311+STS _dataLed + ( 17 ) , R30
                 	__PUTB1MN _dataLed,17
                 _0x75:
                 ; 0000 0280             if (pressure>=107500)
000966 91a0 04df 	LDS  R26,_pressure
000968 91b0 04e0 	LDS  R27,_pressure+1
00096a 9180 04e1 	LDS  R24,_pressure+2
00096c 9190 04e2 	LDS  R25,_pressure+3
                +
00096e 3eac     +CPI R26 , LOW ( 0x1A3EC )
00096f eae3     +LDI R30 , HIGH ( 0x1A3EC )
000970 07be     +CPC R27 , R30
000971 e0e1     +LDI R30 , BYTE3 ( 0x1A3EC )
000972 078e     +CPC R24 , R30
000973 e0e0     +LDI R30 , BYTE4 ( 0x1A3EC )
000974 079e     +CPC R25 , R30
                 	__CPD2N 0x1A3EC
000975 f414      	BRGE PC+3
000976 940c 0982 	JMP _0x76
                 ; 0000 0281             {
                 ; 0000 0282             dataLed[18]=0x25;
000978 e2e5      	LDI  R30,LOW(37)
                +
000979 93e0 0312+STS _dataLed + ( 18 ) , R30
                 	__PUTB1MN _dataLed,18
                 ; 0000 0283             dataLed[19]=0x50;
00097b e5e0      	LDI  R30,LOW(80)
                +
00097c 93e0 0313+STS _dataLed + ( 19 ) , R30
                 	__PUTB1MN _dataLed,19
                 ; 0000 0284             dataLed[20]=0x00;}else{dataLed[18]=0x00;
00097e e0e0      	LDI  R30,LOW(0)
                +
00097f 93e0 0314+STS _dataLed + ( 20 ) , R30
                 	__PUTB1MN _dataLed,20
000981 c007      	RJMP _0x77
                 _0x76:
000982 e0e0      	LDI  R30,LOW(0)
                +
000983 93e0 0312+STS _dataLed + ( 18 ) , R30
                 	__PUTB1MN _dataLed,18
                 ; 0000 0285             dataLed[19]=0x00;
                +
000985 93e0 0313+STS _dataLed + ( 19 ) , R30
                 	__PUTB1MN _dataLed,19
                 ; 0000 0286             dataLed[20]=0x00;}
                +
000987 93e0 0314+STS _dataLed + ( 20 ) , R30
                 	__PUTB1MN _dataLed,20
                 _0x77:
                 ; 0000 0287             if(pressure>=110000)
000989 91a0 04df 	LDS  R26,_pressure
00098b 91b0 04e0 	LDS  R27,_pressure+1
00098d 9180 04e1 	LDS  R24,_pressure+2
00098f 9190 04e2 	LDS  R25,_pressure+3
                +
000991 3ba0     +CPI R26 , LOW ( 0x1ADB0 )
000992 eaed     +LDI R30 , HIGH ( 0x1ADB0 )
000993 07be     +CPC R27 , R30
000994 e0e1     +LDI R30 , BYTE3 ( 0x1ADB0 )
000995 078e     +CPC R24 , R30
000996 e0e0     +LDI R30 , BYTE4 ( 0x1ADB0 )
000997 079e     +CPC R25 , R30
                 	__CPD2N 0x1ADB0
000998 f414      	BRGE PC+3
000999 940c 09a5 	JMP _0x78
                 ; 0000 0288             {
                 ; 0000 0289             dataLed[21]=0x00;
00099b e0e0      	LDI  R30,LOW(0)
                +
00099c 93e0 0315+STS _dataLed + ( 21 ) , R30
                 	__PUTB1MN _dataLed,21
                 ; 0000 028A             dataLed[22]=0x50;
00099e e5e0      	LDI  R30,LOW(80)
                +
00099f 93e0 0316+STS _dataLed + ( 22 ) , R30
                 	__PUTB1MN _dataLed,22
                 ; 0000 028B             dataLed[23]=0x00;
0009a1 e0e0      	LDI  R30,LOW(0)
                +
0009a2 93e0 0317+STS _dataLed + ( 23 ) , R30
                 	__PUTB1MN _dataLed,23
                 ; 0000 028C             }else{dataLed[21]=0x00;
0009a4 c007      	RJMP _0x79
                 _0x78:
0009a5 e0e0      	LDI  R30,LOW(0)
                +
0009a6 93e0 0315+STS _dataLed + ( 21 ) , R30
                 	__PUTB1MN _dataLed,21
                 ; 0000 028D             dataLed[22]=0x00;
                +
0009a8 93e0 0316+STS _dataLed + ( 22 ) , R30
                 	__PUTB1MN _dataLed,22
                 ; 0000 028E             dataLed[23]=0x00;}
                +
0009aa 93e0 0317+STS _dataLed + ( 23 ) , R30
                 	__PUTB1MN _dataLed,23
                 _0x79:
                 ; 0000 028F 
                 ; 0000 0290             //T
                 ; 0000 0291             dataLed[24]=0x00;
0009ac e0e0      	LDI  R30,LOW(0)
                +
0009ad 93e0 0318+STS _dataLed + ( 24 ) , R30
                 	__PUTB1MN _dataLed,24
                 ; 0000 0292             dataLed[25]=0x50;
0009af e5e0      	LDI  R30,LOW(80)
                +
0009b0 93e0 0319+STS _dataLed + ( 25 ) , R30
                 	__PUTB1MN _dataLed,25
                 ; 0000 0293             dataLed[26]=0x00;
0009b2 e0e0      	LDI  R30,LOW(0)
                +
0009b3 93e0 031a+STS _dataLed + ( 26 ) , R30
                 	__PUTB1MN _dataLed,26
                 ; 0000 0294             if (t>=-100)
0009b5 91a0 04cf 	LDS  R26,_t
0009b7 91b0 04d0 	LDS  R27,_t+1
0009b9 9180 04d1 	LDS  R24,_t+2
0009bb 9190 04d2 	LDS  R25,_t+3
                +
0009bd 39ac     +CPI R26 , LOW ( 0xFFFFFF9C )
0009be efef     +LDI R30 , HIGH ( 0xFFFFFF9C )
0009bf 07be     +CPC R27 , R30
0009c0 efef     +LDI R30 , BYTE3 ( 0xFFFFFF9C )
0009c1 078e     +CPC R24 , R30
0009c2 efef     +LDI R30 , BYTE4 ( 0xFFFFFF9C )
0009c3 079e     +CPC R25 , R30
                 	__CPD2N 0xFFFFFF9C
0009c4 f414      	BRGE PC+3
0009c5 940c 09d1 	JMP _0x7A
                 ; 0000 0295             {
                 ; 0000 0296             dataLed[27]=0x25;
0009c7 e2e5      	LDI  R30,LOW(37)
                +
0009c8 93e0 031b+STS _dataLed + ( 27 ) , R30
                 	__PUTB1MN _dataLed,27
                 ; 0000 0297             dataLed[28]=0x50;
0009ca e5e0      	LDI  R30,LOW(80)
                +
0009cb 93e0 031c+STS _dataLed + ( 28 ) , R30
                 	__PUTB1MN _dataLed,28
                 ; 0000 0298             dataLed[29]=0x00;
0009cd e0e0      	LDI  R30,LOW(0)
                +
0009ce 93e0 031d+STS _dataLed + ( 29 ) , R30
                 	__PUTB1MN _dataLed,29
                 ; 0000 0299             }else{dataLed[27]=0x00;
0009d0 c007      	RJMP _0x7B
                 _0x7A:
0009d1 e0e0      	LDI  R30,LOW(0)
                +
0009d2 93e0 031b+STS _dataLed + ( 27 ) , R30
                 	__PUTB1MN _dataLed,27
                 ; 0000 029A             dataLed[28]=0x00;
                +
0009d4 93e0 031c+STS _dataLed + ( 28 ) , R30
                 	__PUTB1MN _dataLed,28
                 ; 0000 029B             dataLed[29]=0x00;}
                +
0009d6 93e0 031d+STS _dataLed + ( 29 ) , R30
                 	__PUTB1MN _dataLed,29
                 _0x7B:
                 ; 0000 029C             if (t>=0)
0009d8 91a0 04d2 	LDS  R26,_t+3
0009da 23aa      	TST  R26
0009db f412      	BRPL PC+3
0009dc 940c 09e7 	JMP _0x7C
                 ; 0000 029D             {
                 ; 0000 029E             dataLed[30]=0x50;
0009de e5e0      	LDI  R30,LOW(80)
                +
0009df 93e0 031e+STS _dataLed + ( 30 ) , R30
                 	__PUTB1MN _dataLed,30
                 ; 0000 029F             dataLed[31]=0x50;
                +
0009e1 93e0 031f+STS _dataLed + ( 31 ) , R30
                 	__PUTB1MN _dataLed,31
                 ; 0000 02A0             dataLed[32]=0x00;}else{dataLed[30]=0x00;
0009e3 e0e0      	LDI  R30,LOW(0)
                +
0009e4 93e0 0320+STS _dataLed + ( 32 ) , R30
                 	__PUTB1MN _dataLed,32
0009e6 c007      	RJMP _0x7D
                 _0x7C:
0009e7 e0e0      	LDI  R30,LOW(0)
                +
0009e8 93e0 031e+STS _dataLed + ( 30 ) , R30
                 	__PUTB1MN _dataLed,30
                 ; 0000 02A1             dataLed[31]=0x00;
                +
0009ea 93e0 031f+STS _dataLed + ( 31 ) , R30
                 	__PUTB1MN _dataLed,31
                 ; 0000 02A2             dataLed[32]=0x00;}
                +
0009ec 93e0 0320+STS _dataLed + ( 32 ) , R30
                 	__PUTB1MN _dataLed,32
                 _0x7D:
                 ; 0000 02A3             if (t>=100)
0009ee 91a0 04cf 	LDS  R26,_t
0009f0 91b0 04d0 	LDS  R27,_t+1
0009f2 9180 04d1 	LDS  R24,_t+2
0009f4 9190 04d2 	LDS  R25,_t+3
                +
0009f6 36a4     +CPI R26 , LOW ( 0x64 )
0009f7 e0e0     +LDI R30 , HIGH ( 0x64 )
0009f8 07be     +CPC R27 , R30
0009f9 e0e0     +LDI R30 , BYTE3 ( 0x64 )
0009fa 078e     +CPC R24 , R30
0009fb e0e0     +LDI R30 , BYTE4 ( 0x64 )
0009fc 079e     +CPC R25 , R30
                 	__CPD2N 0x64
0009fd f414      	BRGE PC+3
0009fe 940c 0a09 	JMP _0x7E
                 ; 0000 02A4             {
                 ; 0000 02A5             dataLed[33]=0x50;
000a00 e5e0      	LDI  R30,LOW(80)
                +
000a01 93e0 0321+STS _dataLed + ( 33 ) , R30
                 	__PUTB1MN _dataLed,33
                 ; 0000 02A6             dataLed[34]=0x00;
000a03 e0e0      	LDI  R30,LOW(0)
                +
000a04 93e0 0322+STS _dataLed + ( 34 ) , R30
                 	__PUTB1MN _dataLed,34
                 ; 0000 02A7             dataLed[35]=0x00;}else{dataLed[33]=0x00;
                +
000a06 93e0 0323+STS _dataLed + ( 35 ) , R30
                 	__PUTB1MN _dataLed,35
000a08 c007      	RJMP _0x7F
                 _0x7E:
000a09 e0e0      	LDI  R30,LOW(0)
                +
000a0a 93e0 0321+STS _dataLed + ( 33 ) , R30
                 	__PUTB1MN _dataLed,33
                 ; 0000 02A8             dataLed[34]=0x00;
                +
000a0c 93e0 0322+STS _dataLed + ( 34 ) , R30
                 	__PUTB1MN _dataLed,34
                 ; 0000 02A9             dataLed[35]=0x00;}
                +
000a0e 93e0 0323+STS _dataLed + ( 35 ) , R30
                 	__PUTB1MN _dataLed,35
                 _0x7F:
                 ; 0000 02AA             if (t>=200)
000a10 91a0 04cf 	LDS  R26,_t
000a12 91b0 04d0 	LDS  R27,_t+1
000a14 9180 04d1 	LDS  R24,_t+2
000a16 9190 04d2 	LDS  R25,_t+3
                +
000a18 3ca8     +CPI R26 , LOW ( 0xC8 )
000a19 e0e0     +LDI R30 , HIGH ( 0xC8 )
000a1a 07be     +CPC R27 , R30
000a1b e0e0     +LDI R30 , BYTE3 ( 0xC8 )
000a1c 078e     +CPC R24 , R30
000a1d e0e0     +LDI R30 , BYTE4 ( 0xC8 )
000a1e 079e     +CPC R25 , R30
                 	__CPD2N 0xC8
000a1f f414      	BRGE PC+3
000a20 940c 0a2b 	JMP _0x80
                 ; 0000 02AB             {
                 ; 0000 02AC             dataLed[36]=0x50;
000a22 e5e0      	LDI  R30,LOW(80)
                +
000a23 93e0 0324+STS _dataLed + ( 36 ) , R30
                 	__PUTB1MN _dataLed,36
                 ; 0000 02AD             dataLed[37]=0x0;
000a25 e0e0      	LDI  R30,LOW(0)
                +
000a26 93e0 0325+STS _dataLed + ( 37 ) , R30
                 	__PUTB1MN _dataLed,37
                 ; 0000 02AE             dataLed[38]=0x00;}else{dataLed[36]=0x00;
                +
000a28 93e0 0326+STS _dataLed + ( 38 ) , R30
                 	__PUTB1MN _dataLed,38
000a2a c007      	RJMP _0x81
                 _0x80:
000a2b e0e0      	LDI  R30,LOW(0)
                +
000a2c 93e0 0324+STS _dataLed + ( 36 ) , R30
                 	__PUTB1MN _dataLed,36
                 ; 0000 02AF             dataLed[37]=0x00;
                +
000a2e 93e0 0325+STS _dataLed + ( 37 ) , R30
                 	__PUTB1MN _dataLed,37
                 ; 0000 02B0             dataLed[38]=0x00;}
                +
000a30 93e0 0326+STS _dataLed + ( 38 ) , R30
                 	__PUTB1MN _dataLed,38
                 _0x81:
                 ; 0000 02B1             if (t>=300)
000a32 91a0 04cf 	LDS  R26,_t
000a34 91b0 04d0 	LDS  R27,_t+1
000a36 9180 04d1 	LDS  R24,_t+2
000a38 9190 04d2 	LDS  R25,_t+3
                +
000a3a 32ac     +CPI R26 , LOW ( 0x12C )
000a3b e0e1     +LDI R30 , HIGH ( 0x12C )
000a3c 07be     +CPC R27 , R30
000a3d e0e0     +LDI R30 , BYTE3 ( 0x12C )
000a3e 078e     +CPC R24 , R30
000a3f e0e0     +LDI R30 , BYTE4 ( 0x12C )
000a40 079e     +CPC R25 , R30
                 	__CPD2N 0x12C
000a41 f414      	BRGE PC+3
000a42 940c 0a4d 	JMP _0x82
                 ; 0000 02B2             {
                 ; 0000 02B3             dataLed[39]=0x50;
000a44 e5e0      	LDI  R30,LOW(80)
                +
000a45 93e0 0327+STS _dataLed + ( 39 ) , R30
                 	__PUTB1MN _dataLed,39
                 ; 0000 02B4             dataLed[40]=0x50;
                +
000a47 93e0 0328+STS _dataLed + ( 40 ) , R30
                 	__PUTB1MN _dataLed,40
                 ; 0000 02B5             dataLed[41]=0x00;}else{dataLed[39]=0x00;
000a49 e0e0      	LDI  R30,LOW(0)
                +
000a4a 93e0 0329+STS _dataLed + ( 41 ) , R30
                 	__PUTB1MN _dataLed,41
000a4c c007      	RJMP _0x83
                 _0x82:
000a4d e0e0      	LDI  R30,LOW(0)
                +
000a4e 93e0 0327+STS _dataLed + ( 39 ) , R30
                 	__PUTB1MN _dataLed,39
                 ; 0000 02B6             dataLed[40]=0x00;
                +
000a50 93e0 0328+STS _dataLed + ( 40 ) , R30
                 	__PUTB1MN _dataLed,40
                 ; 0000 02B7             dataLed[41]=0x00;}
                +
000a52 93e0 0329+STS _dataLed + ( 41 ) , R30
                 	__PUTB1MN _dataLed,41
                 _0x83:
                 ; 0000 02B8             if (t>=400)
000a54 91a0 04cf 	LDS  R26,_t
000a56 91b0 04d0 	LDS  R27,_t+1
000a58 9180 04d1 	LDS  R24,_t+2
000a5a 9190 04d2 	LDS  R25,_t+3
                +
000a5c 39a0     +CPI R26 , LOW ( 0x190 )
000a5d e0e1     +LDI R30 , HIGH ( 0x190 )
000a5e 07be     +CPC R27 , R30
000a5f e0e0     +LDI R30 , BYTE3 ( 0x190 )
000a60 078e     +CPC R24 , R30
000a61 e0e0     +LDI R30 , BYTE4 ( 0x190 )
000a62 079e     +CPC R25 , R30
                 	__CPD2N 0x190
000a63 f414      	BRGE PC+3
000a64 940c 0a70 	JMP _0x84
                 ; 0000 02B9             {
                 ; 0000 02BA             dataLed[42]=0x25;
000a66 e2e5      	LDI  R30,LOW(37)
                +
000a67 93e0 032a+STS _dataLed + ( 42 ) , R30
                 	__PUTB1MN _dataLed,42
                 ; 0000 02BB             dataLed[43]=0x50;
000a69 e5e0      	LDI  R30,LOW(80)
                +
000a6a 93e0 032b+STS _dataLed + ( 43 ) , R30
                 	__PUTB1MN _dataLed,43
                 ; 0000 02BC             dataLed[44]=0x00;}else{dataLed[42]=0x00;
000a6c e0e0      	LDI  R30,LOW(0)
                +
000a6d 93e0 032c+STS _dataLed + ( 44 ) , R30
                 	__PUTB1MN _dataLed,44
000a6f c007      	RJMP _0x85
                 _0x84:
000a70 e0e0      	LDI  R30,LOW(0)
                +
000a71 93e0 032a+STS _dataLed + ( 42 ) , R30
                 	__PUTB1MN _dataLed,42
                 ; 0000 02BD             dataLed[43]=0x00;
                +
000a73 93e0 032b+STS _dataLed + ( 43 ) , R30
                 	__PUTB1MN _dataLed,43
                 ; 0000 02BE             dataLed[44]=0x00;}
                +
000a75 93e0 032c+STS _dataLed + ( 44 ) , R30
                 	__PUTB1MN _dataLed,44
                 _0x85:
                 ; 0000 02BF             if(t>=500)
000a77 91a0 04cf 	LDS  R26,_t
000a79 91b0 04d0 	LDS  R27,_t+1
000a7b 9180 04d1 	LDS  R24,_t+2
000a7d 9190 04d2 	LDS  R25,_t+3
                +
000a7f 3fa4     +CPI R26 , LOW ( 0x1F4 )
000a80 e0e1     +LDI R30 , HIGH ( 0x1F4 )
000a81 07be     +CPC R27 , R30
000a82 e0e0     +LDI R30 , BYTE3 ( 0x1F4 )
000a83 078e     +CPC R24 , R30
000a84 e0e0     +LDI R30 , BYTE4 ( 0x1F4 )
000a85 079e     +CPC R25 , R30
                 	__CPD2N 0x1F4
000a86 f414      	BRGE PC+3
000a87 940c 0a93 	JMP _0x86
                 ; 0000 02C0             {
                 ; 0000 02C1             dataLed[45]=0x00;
000a89 e0e0      	LDI  R30,LOW(0)
                +
000a8a 93e0 032d+STS _dataLed + ( 45 ) , R30
                 	__PUTB1MN _dataLed,45
                 ; 0000 02C2             dataLed[46]=0x50;
000a8c e5e0      	LDI  R30,LOW(80)
                +
000a8d 93e0 032e+STS _dataLed + ( 46 ) , R30
                 	__PUTB1MN _dataLed,46
                 ; 0000 02C3             dataLed[47]=0x00;
000a8f e0e0      	LDI  R30,LOW(0)
                +
000a90 93e0 032f+STS _dataLed + ( 47 ) , R30
                 	__PUTB1MN _dataLed,47
                 ; 0000 02C4             }else{dataLed[45]=0x00;
000a92 c007      	RJMP _0x87
                 _0x86:
000a93 e0e0      	LDI  R30,LOW(0)
                +
000a94 93e0 032d+STS _dataLed + ( 45 ) , R30
                 	__PUTB1MN _dataLed,45
                 ; 0000 02C5             dataLed[46]=0x00;
                +
000a96 93e0 032e+STS _dataLed + ( 46 ) , R30
                 	__PUTB1MN _dataLed,46
                 ; 0000 02C6             dataLed[47]=0x00;}
                +
000a98 93e0 032f+STS _dataLed + ( 47 ) , R30
                 	__PUTB1MN _dataLed,47
                 _0x87:
                 ; 0000 02C7 
                 ; 0000 02C8              //CO2
                 ; 0000 02C9             dataLed[48]=0x00;
000a9a e0e0      	LDI  R30,LOW(0)
                +
000a9b 93e0 0330+STS _dataLed + ( 48 ) , R30
                 	__PUTB1MN _dataLed,48
                 ; 0000 02CA             dataLed[49]=0x50;
000a9d e5e0      	LDI  R30,LOW(80)
                +
000a9e 93e0 0331+STS _dataLed + ( 49 ) , R30
                 	__PUTB1MN _dataLed,49
                 ; 0000 02CB             dataLed[50]=0x00;
000aa0 e0e0      	LDI  R30,LOW(0)
                +
000aa1 93e0 0332+STS _dataLed + ( 50 ) , R30
                 	__PUTB1MN _dataLed,50
                 ; 0000 02CC             if (co2led>=400)
000aa3 91a0 0362 	LDS  R26,_co2led
000aa5 91b0 0363 	LDS  R27,_co2led+1
000aa7 39a0      	CPI  R26,LOW(0x190)
000aa8 e0e1      	LDI  R30,HIGH(0x190)
000aa9 07be      	CPC  R27,R30
000aaa f410      	BRSH PC+3
000aab 940c 0ab7 	JMP _0x88
                 ; 0000 02CD             {
                 ; 0000 02CE             dataLed[51]=0x25;
000aad e2e5      	LDI  R30,LOW(37)
                +
000aae 93e0 0333+STS _dataLed + ( 51 ) , R30
                 	__PUTB1MN _dataLed,51
                 ; 0000 02CF             dataLed[52]=0x50;
000ab0 e5e0      	LDI  R30,LOW(80)
                +
000ab1 93e0 0334+STS _dataLed + ( 52 ) , R30
                 	__PUTB1MN _dataLed,52
                 ; 0000 02D0             dataLed[53]=0x00;
000ab3 e0e0      	LDI  R30,LOW(0)
                +
000ab4 93e0 0335+STS _dataLed + ( 53 ) , R30
                 	__PUTB1MN _dataLed,53
                 ; 0000 02D1             }else{dataLed[51]=0x00;
000ab6 c007      	RJMP _0x89
                 _0x88:
000ab7 e0e0      	LDI  R30,LOW(0)
                +
000ab8 93e0 0333+STS _dataLed + ( 51 ) , R30
                 	__PUTB1MN _dataLed,51
                 ; 0000 02D2             dataLed[52]=0x00;
                +
000aba 93e0 0334+STS _dataLed + ( 52 ) , R30
                 	__PUTB1MN _dataLed,52
                 ; 0000 02D3             dataLed[53]=0x00;}
                +
000abc 93e0 0335+STS _dataLed + ( 53 ) , R30
                 	__PUTB1MN _dataLed,53
                 _0x89:
                 ; 0000 02D4             if (co2led>=600)
000abe 91a0 0362 	LDS  R26,_co2led
000ac0 91b0 0363 	LDS  R27,_co2led+1
000ac2 35a8      	CPI  R26,LOW(0x258)
000ac3 e0e2      	LDI  R30,HIGH(0x258)
000ac4 07be      	CPC  R27,R30
000ac5 f410      	BRSH PC+3
000ac6 940c 0ad1 	JMP _0x8A
                 ; 0000 02D5             {
                 ; 0000 02D6             dataLed[54]=0x50;
000ac8 e5e0      	LDI  R30,LOW(80)
                +
000ac9 93e0 0336+STS _dataLed + ( 54 ) , R30
                 	__PUTB1MN _dataLed,54
                 ; 0000 02D7             dataLed[55]=0x50;
                +
000acb 93e0 0337+STS _dataLed + ( 55 ) , R30
                 	__PUTB1MN _dataLed,55
                 ; 0000 02D8             dataLed[56]=0x00;}else{dataLed[54]=0x00;
000acd e0e0      	LDI  R30,LOW(0)
                +
000ace 93e0 0338+STS _dataLed + ( 56 ) , R30
                 	__PUTB1MN _dataLed,56
000ad0 c007      	RJMP _0x8B
                 _0x8A:
000ad1 e0e0      	LDI  R30,LOW(0)
                +
000ad2 93e0 0336+STS _dataLed + ( 54 ) , R30
                 	__PUTB1MN _dataLed,54
                 ; 0000 02D9             dataLed[55]=0x00;
                +
000ad4 93e0 0337+STS _dataLed + ( 55 ) , R30
                 	__PUTB1MN _dataLed,55
                 ; 0000 02DA             dataLed[56]=0x00;}
                +
000ad6 93e0 0338+STS _dataLed + ( 56 ) , R30
                 	__PUTB1MN _dataLed,56
                 _0x8B:
                 ; 0000 02DB             if (co2led>=800)
000ad8 91a0 0362 	LDS  R26,_co2led
000ada 91b0 0363 	LDS  R27,_co2led+1
000adc 32a0      	CPI  R26,LOW(0x320)
000add e0e3      	LDI  R30,HIGH(0x320)
000ade 07be      	CPC  R27,R30
000adf f410      	BRSH PC+3
000ae0 940c 0aeb 	JMP _0x8C
                 ; 0000 02DC             {
                 ; 0000 02DD             dataLed[57]=0x50;
000ae2 e5e0      	LDI  R30,LOW(80)
                +
000ae3 93e0 0339+STS _dataLed + ( 57 ) , R30
                 	__PUTB1MN _dataLed,57
                 ; 0000 02DE             dataLed[58]=0x00;
000ae5 e0e0      	LDI  R30,LOW(0)
                +
000ae6 93e0 033a+STS _dataLed + ( 58 ) , R30
                 	__PUTB1MN _dataLed,58
                 ; 0000 02DF             dataLed[59]=0x00;}else{dataLed[57]=0x00;
                +
000ae8 93e0 033b+STS _dataLed + ( 59 ) , R30
                 	__PUTB1MN _dataLed,59
000aea c007      	RJMP _0x8D
                 _0x8C:
000aeb e0e0      	LDI  R30,LOW(0)
                +
000aec 93e0 0339+STS _dataLed + ( 57 ) , R30
                 	__PUTB1MN _dataLed,57
                 ; 0000 02E0             dataLed[58]=0x00;
                +
000aee 93e0 033a+STS _dataLed + ( 58 ) , R30
                 	__PUTB1MN _dataLed,58
                 ; 0000 02E1             dataLed[59]=0x00;}
                +
000af0 93e0 033b+STS _dataLed + ( 59 ) , R30
                 	__PUTB1MN _dataLed,59
                 _0x8D:
                 ; 0000 02E2             if (co2led>=1000)
000af2 91a0 0362 	LDS  R26,_co2led
000af4 91b0 0363 	LDS  R27,_co2led+1
000af6 3ea8      	CPI  R26,LOW(0x3E8)
000af7 e0e3      	LDI  R30,HIGH(0x3E8)
000af8 07be      	CPC  R27,R30
000af9 f410      	BRSH PC+3
000afa 940c 0b05 	JMP _0x8E
                 ; 0000 02E3             {
                 ; 0000 02E4             dataLed[60]=0x50;
000afc e5e0      	LDI  R30,LOW(80)
                +
000afd 93e0 033c+STS _dataLed + ( 60 ) , R30
                 	__PUTB1MN _dataLed,60
                 ; 0000 02E5             dataLed[61]=0x0;
000aff e0e0      	LDI  R30,LOW(0)
                +
000b00 93e0 033d+STS _dataLed + ( 61 ) , R30
                 	__PUTB1MN _dataLed,61
                 ; 0000 02E6             dataLed[62]=0x00;}else{dataLed[60]=0x00;
                +
000b02 93e0 033e+STS _dataLed + ( 62 ) , R30
                 	__PUTB1MN _dataLed,62
000b04 c007      	RJMP _0x8F
                 _0x8E:
000b05 e0e0      	LDI  R30,LOW(0)
                +
000b06 93e0 033c+STS _dataLed + ( 60 ) , R30
                 	__PUTB1MN _dataLed,60
                 ; 0000 02E7             dataLed[61]=0x00;
                +
000b08 93e0 033d+STS _dataLed + ( 61 ) , R30
                 	__PUTB1MN _dataLed,61
                 ; 0000 02E8             dataLed[62]=0x00;}
                +
000b0a 93e0 033e+STS _dataLed + ( 62 ) , R30
                 	__PUTB1MN _dataLed,62
                 _0x8F:
                 ; 0000 02E9             if (co2led>=1200)
000b0c 91a0 0362 	LDS  R26,_co2led
000b0e 91b0 0363 	LDS  R27,_co2led+1
000b10 3ba0      	CPI  R26,LOW(0x4B0)
000b11 e0e4      	LDI  R30,HIGH(0x4B0)
000b12 07be      	CPC  R27,R30
000b13 f410      	BRSH PC+3
000b14 940c 0b1f 	JMP _0x90
                 ; 0000 02EA             {
                 ; 0000 02EB             dataLed[63]=0x50;
000b16 e5e0      	LDI  R30,LOW(80)
                +
000b17 93e0 033f+STS _dataLed + ( 63 ) , R30
                 	__PUTB1MN _dataLed,63
                 ; 0000 02EC             dataLed[64]=0x50;
                +
000b19 93e0 0340+STS _dataLed + ( 64 ) , R30
                 	__PUTB1MN _dataLed,64
                 ; 0000 02ED             dataLed[65]=0x00;}else{dataLed[63]=0x00;
000b1b e0e0      	LDI  R30,LOW(0)
                +
000b1c 93e0 0341+STS _dataLed + ( 65 ) , R30
                 	__PUTB1MN _dataLed,65
000b1e c007      	RJMP _0x91
                 _0x90:
000b1f e0e0      	LDI  R30,LOW(0)
                +
000b20 93e0 033f+STS _dataLed + ( 63 ) , R30
                 	__PUTB1MN _dataLed,63
                 ; 0000 02EE             dataLed[64]=0x00;
                +
000b22 93e0 0340+STS _dataLed + ( 64 ) , R30
                 	__PUTB1MN _dataLed,64
                 ; 0000 02EF             dataLed[65]=0x00;}
                +
000b24 93e0 0341+STS _dataLed + ( 65 ) , R30
                 	__PUTB1MN _dataLed,65
                 _0x91:
                 ; 0000 02F0             if (co2led>=1400)
000b26 91a0 0362 	LDS  R26,_co2led
000b28 91b0 0363 	LDS  R27,_co2led+1
000b2a 37a8      	CPI  R26,LOW(0x578)
000b2b e0e5      	LDI  R30,HIGH(0x578)
000b2c 07be      	CPC  R27,R30
000b2d f410      	BRSH PC+3
000b2e 940c 0b3a 	JMP _0x92
                 ; 0000 02F1             {
                 ; 0000 02F2             dataLed[66]=0x25;
000b30 e2e5      	LDI  R30,LOW(37)
                +
000b31 93e0 0342+STS _dataLed + ( 66 ) , R30
                 	__PUTB1MN _dataLed,66
                 ; 0000 02F3             dataLed[67]=0x50;
000b33 e5e0      	LDI  R30,LOW(80)
                +
000b34 93e0 0343+STS _dataLed + ( 67 ) , R30
                 	__PUTB1MN _dataLed,67
                 ; 0000 02F4             dataLed[68]=0x00;}else{dataLed[66]=0x00;
000b36 e0e0      	LDI  R30,LOW(0)
                +
000b37 93e0 0344+STS _dataLed + ( 68 ) , R30
                 	__PUTB1MN _dataLed,68
000b39 c007      	RJMP _0x93
                 _0x92:
000b3a e0e0      	LDI  R30,LOW(0)
                +
000b3b 93e0 0342+STS _dataLed + ( 66 ) , R30
                 	__PUTB1MN _dataLed,66
                 ; 0000 02F5             dataLed[67]=0x00;
                +
000b3d 93e0 0343+STS _dataLed + ( 67 ) , R30
                 	__PUTB1MN _dataLed,67
                 ; 0000 02F6             dataLed[68]=0x00;}
                +
000b3f 93e0 0344+STS _dataLed + ( 68 ) , R30
                 	__PUTB1MN _dataLed,68
                 _0x93:
                 ; 0000 02F7             if(co2led>=1600)
000b41 91a0 0362 	LDS  R26,_co2led
000b43 91b0 0363 	LDS  R27,_co2led+1
000b45 34a0      	CPI  R26,LOW(0x640)
000b46 e0e6      	LDI  R30,HIGH(0x640)
000b47 07be      	CPC  R27,R30
000b48 f410      	BRSH PC+3
000b49 940c 0b55 	JMP _0x94
                 ; 0000 02F8             {
                 ; 0000 02F9             dataLed[69]=0x00;
000b4b e0e0      	LDI  R30,LOW(0)
                +
000b4c 93e0 0345+STS _dataLed + ( 69 ) , R30
                 	__PUTB1MN _dataLed,69
                 ; 0000 02FA             dataLed[70]=0x50;
000b4e e5e0      	LDI  R30,LOW(80)
                +
000b4f 93e0 0346+STS _dataLed + ( 70 ) , R30
                 	__PUTB1MN _dataLed,70
                 ; 0000 02FB             dataLed[71]=0x00;
000b51 e0e0      	LDI  R30,LOW(0)
                +
000b52 93e0 0347+STS _dataLed + ( 71 ) , R30
                 	__PUTB1MN _dataLed,71
                 ; 0000 02FC             }else{dataLed[69]=0x00;
000b54 c007      	RJMP _0x95
                 _0x94:
000b55 e0e0      	LDI  R30,LOW(0)
                +
000b56 93e0 0345+STS _dataLed + ( 69 ) , R30
                 	__PUTB1MN _dataLed,69
                 ; 0000 02FD             dataLed[70]=0x00;
                +
000b58 93e0 0346+STS _dataLed + ( 70 ) , R30
                 	__PUTB1MN _dataLed,70
                 ; 0000 02FE             dataLed[71]=0x00;}
                +
000b5a 93e0 0347+STS _dataLed + ( 71 ) , R30
                 	__PUTB1MN _dataLed,71
                 _0x95:
                 ; 0000 02FF 
                 ; 0000 0300             //H
                 ; 0000 0301             dataLed[72]=0x00;
000b5c e0e0      	LDI  R30,LOW(0)
                +
000b5d 93e0 0348+STS _dataLed + ( 72 ) , R30
                 	__PUTB1MN _dataLed,72
                 ; 0000 0302             dataLed[73]=0x50;
000b5f e5e0      	LDI  R30,LOW(80)
                +
000b60 93e0 0349+STS _dataLed + ( 73 ) , R30
                 	__PUTB1MN _dataLed,73
                 ; 0000 0303             dataLed[74]=0x00;
000b62 e0e0      	LDI  R30,LOW(0)
                +
000b63 93e0 034a+STS _dataLed + ( 74 ) , R30
                 	__PUTB1MN _dataLed,74
                 ; 0000 0304             if (vled>=120)
000b65 91a0 0364 	LDS  R26,_vled
000b67 91b0 0365 	LDS  R27,_vled+1
000b69 37a8      	CPI  R26,LOW(0x78)
000b6a e0e0      	LDI  R30,HIGH(0x78)
000b6b 07be      	CPC  R27,R30
000b6c f410      	BRSH PC+3
000b6d 940c 0b79 	JMP _0x96
                 ; 0000 0305             {
                 ; 0000 0306             dataLed[75]=0x25;
000b6f e2e5      	LDI  R30,LOW(37)
                +
000b70 93e0 034b+STS _dataLed + ( 75 ) , R30
                 	__PUTB1MN _dataLed,75
                 ; 0000 0307             dataLed[76]=0x50;
000b72 e5e0      	LDI  R30,LOW(80)
                +
000b73 93e0 034c+STS _dataLed + ( 76 ) , R30
                 	__PUTB1MN _dataLed,76
                 ; 0000 0308             dataLed[77]=0x00;
000b75 e0e0      	LDI  R30,LOW(0)
                +
000b76 93e0 034d+STS _dataLed + ( 77 ) , R30
                 	__PUTB1MN _dataLed,77
                 ; 0000 0309             }else{dataLed[75]=0x00;
000b78 c007      	RJMP _0x97
                 _0x96:
000b79 e0e0      	LDI  R30,LOW(0)
                +
000b7a 93e0 034b+STS _dataLed + ( 75 ) , R30
                 	__PUTB1MN _dataLed,75
                 ; 0000 030A             dataLed[76]=0x00;
                +
000b7c 93e0 034c+STS _dataLed + ( 76 ) , R30
                 	__PUTB1MN _dataLed,76
                 ; 0000 030B             dataLed[77]=0x00;}
                +
000b7e 93e0 034d+STS _dataLed + ( 77 ) , R30
                 	__PUTB1MN _dataLed,77
                 _0x97:
                 ; 0000 030C             if (vled>=250)
000b80 91a0 0364 	LDS  R26,_vled
000b82 91b0 0365 	LDS  R27,_vled+1
000b84 3faa      	CPI  R26,LOW(0xFA)
000b85 e0e0      	LDI  R30,HIGH(0xFA)
000b86 07be      	CPC  R27,R30
000b87 f410      	BRSH PC+3
000b88 940c 0b93 	JMP _0x98
                 ; 0000 030D             {
                 ; 0000 030E             dataLed[78]=0x50;
000b8a e5e0      	LDI  R30,LOW(80)
                +
000b8b 93e0 034e+STS _dataLed + ( 78 ) , R30
                 	__PUTB1MN _dataLed,78
                 ; 0000 030F             dataLed[79]=0x50;
                +
000b8d 93e0 034f+STS _dataLed + ( 79 ) , R30
                 	__PUTB1MN _dataLed,79
                 ; 0000 0310             dataLed[80]=0x00;}else{dataLed[78]=0x00;
000b8f e0e0      	LDI  R30,LOW(0)
                +
000b90 93e0 0350+STS _dataLed + ( 80 ) , R30
                 	__PUTB1MN _dataLed,80
000b92 c007      	RJMP _0x99
                 _0x98:
000b93 e0e0      	LDI  R30,LOW(0)
                +
000b94 93e0 034e+STS _dataLed + ( 78 ) , R30
                 	__PUTB1MN _dataLed,78
                 ; 0000 0311             dataLed[79]=0x00;
                +
000b96 93e0 034f+STS _dataLed + ( 79 ) , R30
                 	__PUTB1MN _dataLed,79
                 ; 0000 0312             dataLed[80]=0x00;}
                +
000b98 93e0 0350+STS _dataLed + ( 80 ) , R30
                 	__PUTB1MN _dataLed,80
                 _0x99:
                 ; 0000 0313             if (vled>=370)
000b9a 91a0 0364 	LDS  R26,_vled
000b9c 91b0 0365 	LDS  R27,_vled+1
000b9e 37a2      	CPI  R26,LOW(0x172)
000b9f e0e1      	LDI  R30,HIGH(0x172)
000ba0 07be      	CPC  R27,R30
000ba1 f410      	BRSH PC+3
000ba2 940c 0bad 	JMP _0x9A
                 ; 0000 0314             {
                 ; 0000 0315             dataLed[81]=0x50;
000ba4 e5e0      	LDI  R30,LOW(80)
                +
000ba5 93e0 0351+STS _dataLed + ( 81 ) , R30
                 	__PUTB1MN _dataLed,81
                 ; 0000 0316             dataLed[82]=0x00;
000ba7 e0e0      	LDI  R30,LOW(0)
                +
000ba8 93e0 0352+STS _dataLed + ( 82 ) , R30
                 	__PUTB1MN _dataLed,82
                 ; 0000 0317             dataLed[83]=0x00;}else{dataLed[81]=0x00;
                +
000baa 93e0 0353+STS _dataLed + ( 83 ) , R30
                 	__PUTB1MN _dataLed,83
000bac c007      	RJMP _0x9B
                 _0x9A:
000bad e0e0      	LDI  R30,LOW(0)
                +
000bae 93e0 0351+STS _dataLed + ( 81 ) , R30
                 	__PUTB1MN _dataLed,81
                 ; 0000 0318             dataLed[82]=0x00;
                +
000bb0 93e0 0352+STS _dataLed + ( 82 ) , R30
                 	__PUTB1MN _dataLed,82
                 ; 0000 0319             dataLed[83]=0x00;}
                +
000bb2 93e0 0353+STS _dataLed + ( 83 ) , R30
                 	__PUTB1MN _dataLed,83
                 _0x9B:
                 ; 0000 031A             if (vled>=500)
000bb4 91a0 0364 	LDS  R26,_vled
000bb6 91b0 0365 	LDS  R27,_vled+1
000bb8 3fa4      	CPI  R26,LOW(0x1F4)
000bb9 e0e1      	LDI  R30,HIGH(0x1F4)
000bba 07be      	CPC  R27,R30
000bbb f410      	BRSH PC+3
000bbc 940c 0bc7 	JMP _0x9C
                 ; 0000 031B             {
                 ; 0000 031C             dataLed[84]=0x50;
000bbe e5e0      	LDI  R30,LOW(80)
                +
000bbf 93e0 0354+STS _dataLed + ( 84 ) , R30
                 	__PUTB1MN _dataLed,84
                 ; 0000 031D             dataLed[85]=0x0;
000bc1 e0e0      	LDI  R30,LOW(0)
                +
000bc2 93e0 0355+STS _dataLed + ( 85 ) , R30
                 	__PUTB1MN _dataLed,85
                 ; 0000 031E             dataLed[86]=0x00;}else{dataLed[84]=0x00;
                +
000bc4 93e0 0356+STS _dataLed + ( 86 ) , R30
                 	__PUTB1MN _dataLed,86
000bc6 c007      	RJMP _0x9D
                 _0x9C:
000bc7 e0e0      	LDI  R30,LOW(0)
                +
000bc8 93e0 0354+STS _dataLed + ( 84 ) , R30
                 	__PUTB1MN _dataLed,84
                 ; 0000 031F             dataLed[85]=0x00;
                +
000bca 93e0 0355+STS _dataLed + ( 85 ) , R30
                 	__PUTB1MN _dataLed,85
                 ; 0000 0320             dataLed[86]=0x00;}
                +
000bcc 93e0 0356+STS _dataLed + ( 86 ) , R30
                 	__PUTB1MN _dataLed,86
                 _0x9D:
                 ; 0000 0321             if (vled>=620)
000bce 91a0 0364 	LDS  R26,_vled
000bd0 91b0 0365 	LDS  R27,_vled+1
000bd2 36ac      	CPI  R26,LOW(0x26C)
000bd3 e0e2      	LDI  R30,HIGH(0x26C)
000bd4 07be      	CPC  R27,R30
000bd5 f410      	BRSH PC+3
000bd6 940c 0be1 	JMP _0x9E
                 ; 0000 0322             {
                 ; 0000 0323             dataLed[87]=0x50;
000bd8 e5e0      	LDI  R30,LOW(80)
                +
000bd9 93e0 0357+STS _dataLed + ( 87 ) , R30
                 	__PUTB1MN _dataLed,87
                 ; 0000 0324             dataLed[88]=0x50;
                +
000bdb 93e0 0358+STS _dataLed + ( 88 ) , R30
                 	__PUTB1MN _dataLed,88
                 ; 0000 0325             dataLed[89]=0x00;}else{dataLed[87]=0x00;
000bdd e0e0      	LDI  R30,LOW(0)
                +
000bde 93e0 0359+STS _dataLed + ( 89 ) , R30
                 	__PUTB1MN _dataLed,89
000be0 c007      	RJMP _0x9F
                 _0x9E:
000be1 e0e0      	LDI  R30,LOW(0)
                +
000be2 93e0 0357+STS _dataLed + ( 87 ) , R30
                 	__PUTB1MN _dataLed,87
                 ; 0000 0326             dataLed[88]=0x00;
                +
000be4 93e0 0358+STS _dataLed + ( 88 ) , R30
                 	__PUTB1MN _dataLed,88
                 ; 0000 0327             dataLed[89]=0x00;}
                +
000be6 93e0 0359+STS _dataLed + ( 89 ) , R30
                 	__PUTB1MN _dataLed,89
                 _0x9F:
                 ; 0000 0328             if (co2led>=800)
000be8 91a0 0362 	LDS  R26,_co2led
000bea 91b0 0363 	LDS  R27,_co2led+1
000bec 32a0      	CPI  R26,LOW(0x320)
000bed e0e3      	LDI  R30,HIGH(0x320)
000bee 07be      	CPC  R27,R30
000bef f410      	BRSH PC+3
000bf0 940c 0bfc 	JMP _0xA0
                 ; 0000 0329             {
                 ; 0000 032A             dataLed[90]=0x25;
000bf2 e2e5      	LDI  R30,LOW(37)
                +
000bf3 93e0 035a+STS _dataLed + ( 90 ) , R30
                 	__PUTB1MN _dataLed,90
                 ; 0000 032B             dataLed[91]=0x50;
000bf5 e5e0      	LDI  R30,LOW(80)
                +
000bf6 93e0 035b+STS _dataLed + ( 91 ) , R30
                 	__PUTB1MN _dataLed,91
                 ; 0000 032C             dataLed[92]=0x00;}else{dataLed[90]=0x00;
000bf8 e0e0      	LDI  R30,LOW(0)
                +
000bf9 93e0 035c+STS _dataLed + ( 92 ) , R30
                 	__PUTB1MN _dataLed,92
000bfb c007      	RJMP _0xA1
                 _0xA0:
000bfc e0e0      	LDI  R30,LOW(0)
                +
000bfd 93e0 035a+STS _dataLed + ( 90 ) , R30
                 	__PUTB1MN _dataLed,90
                 ; 0000 032D             dataLed[91]=0x00;
                +
000bff 93e0 035b+STS _dataLed + ( 91 ) , R30
                 	__PUTB1MN _dataLed,91
                 ; 0000 032E             dataLed[92]=0x00;}
                +
000c01 93e0 035c+STS _dataLed + ( 92 ) , R30
                 	__PUTB1MN _dataLed,92
                 _0xA1:
                 ; 0000 032F             if(co2led==100)
000c03 91a0 0362 	LDS  R26,_co2led
000c05 91b0 0363 	LDS  R27,_co2led+1
000c07 36a4      	CPI  R26,LOW(0x64)
000c08 e0e0      	LDI  R30,HIGH(0x64)
000c09 07be      	CPC  R27,R30
000c0a f011      	BREQ PC+3
000c0b 940c 0c17 	JMP _0xA2
                 ; 0000 0330             {
                 ; 0000 0331             dataLed[93]=0x00;
000c0d e0e0      	LDI  R30,LOW(0)
                +
000c0e 93e0 035d+STS _dataLed + ( 93 ) , R30
                 	__PUTB1MN _dataLed,93
                 ; 0000 0332             dataLed[94]=0x50;
000c10 e5e0      	LDI  R30,LOW(80)
                +
000c11 93e0 035e+STS _dataLed + ( 94 ) , R30
                 	__PUTB1MN _dataLed,94
                 ; 0000 0333             dataLed[95]=0x00;
000c13 e0e0      	LDI  R30,LOW(0)
                +
000c14 93e0 035f+STS _dataLed + ( 95 ) , R30
                 	__PUTB1MN _dataLed,95
                 ; 0000 0334             }else{dataLed[93]=0x00;
000c16 c007      	RJMP _0xA3
                 _0xA2:
000c17 e0e0      	LDI  R30,LOW(0)
                +
000c18 93e0 035d+STS _dataLed + ( 93 ) , R30
                 	__PUTB1MN _dataLed,93
                 ; 0000 0335             dataLed[94]=0x00;
                +
000c1a 93e0 035e+STS _dataLed + ( 94 ) , R30
                 	__PUTB1MN _dataLed,94
                 ; 0000 0336             dataLed[95]=0x00;}
                +
000c1c 93e0 035f+STS _dataLed + ( 95 ) , R30
                 	__PUTB1MN _dataLed,95
                 _0xA3:
                 ; 0000 0337 
                 ; 0000 0338              dataLed[0]=dataLed[0];
000c1e 91e0 0300 	LDS  R30,_dataLed
000c20 93e0 0300 	STS  _dataLed,R30
                 ; 0000 0339         asmSendData(96);
000c22 e6a0      	LDI  R26,LOW(96)
000c23 940e 01df 	CALL _asmSendData
                 ; 0000 033A              }
                 ; 0000 033B         if (permit==24)
                 _0x6B:
000c25 e1e8      	LDI  R30,LOW(24)
000c26 15e8      	CP   R30,R8
000c27 f011      	BREQ PC+3
000c28 940c 0ced 	JMP _0xA4
                 ; 0000 033C         {
                 ; 0000 033D             temp=pressure/100000;
000c2a 91a0 04df 	LDS  R26,_pressure
000c2c 91b0 04e0 	LDS  R27,_pressure+1
000c2e 9180 04e1 	LDS  R24,_pressure+2
000c30 9190 04e2 	LDS  R25,_pressure+3
                +
000c32 eae0     +LDI R30 , LOW ( 0x186A0 )
000c33 e8f6     +LDI R31 , HIGH ( 0x186A0 )
000c34 e061     +LDI R22 , BYTE3 ( 0x186A0 )
000c35 e070     +LDI R23 , BYTE4 ( 0x186A0 )
                 	__GETD1N 0x186A0
000c36 940e 16a2 	CALL __DIVD21
000c38 2f1e      	MOV  R17,R30
                 ; 0000 033E             ps[0]=temp+'0';
000c39 5de0      	SUBI R30,-LOW(48)
000c3a 93e0 048a 	STS  _ps,R30
                 ; 0000 033F             pressure-=(unsigned long int)temp*100000;
000c3c 2fe1      	MOV  R30,R17
000c3d e0f0      	LDI  R31,0
000c3e 940e 1624 	CALL __CWD1
                +
000c40 eaa0     +LDI R26 , LOW ( 0x186A0 )
000c41 e8b6     +LDI R27 , HIGH ( 0x186A0 )
000c42 e081     +LDI R24 , BYTE3 ( 0x186A0 )
000c43 e090     +LDI R25 , BYTE4 ( 0x186A0 )
                 	__GETD2N 0x186A0
000c44 940e 163b 	CALL __MULD12U
000c46 91a0 04df 	LDS  R26,_pressure
000c48 91b0 04e0 	LDS  R27,_pressure+1
000c4a 9180 04e1 	LDS  R24,_pressure+2
000c4c 9190 04e2 	LDS  R25,_pressure+3
000c4e 940e 15cf 	CALL __SUBD21
000c50 93a0 04df 	STS  _pressure,R26
000c52 93b0 04e0 	STS  _pressure+1,R27
000c54 9380 04e1 	STS  _pressure+2,R24
000c56 9390 04e2 	STS  _pressure+3,R25
                 ; 0000 0340             temp=pressure/10000;
000c58 91a0 04df 	LDS  R26,_pressure
000c5a 91b0 04e0 	LDS  R27,_pressure+1
000c5c 9180 04e1 	LDS  R24,_pressure+2
000c5e 9190 04e2 	LDS  R25,_pressure+3
                +
000c60 e1e0     +LDI R30 , LOW ( 0x2710 )
000c61 e2f7     +LDI R31 , HIGH ( 0x2710 )
000c62 e060     +LDI R22 , BYTE3 ( 0x2710 )
000c63 e070     +LDI R23 , BYTE4 ( 0x2710 )
                 	__GETD1N 0x2710
000c64 940e 16a2 	CALL __DIVD21
000c66 2f1e      	MOV  R17,R30
                 ; 0000 0341             ps[1]=temp+'0';
000c67 5de0      	SUBI R30,-LOW(48)
                +
000c68 93e0 048b+STS _ps + ( 1 ) , R30
                 	__PUTB1MN _ps,1
                 ; 0000 0342             pressure-=(unsigned long int)temp*10000;
000c6a 2fe1      	MOV  R30,R17
000c6b e0f0      	LDI  R31,0
000c6c 940e 1624 	CALL __CWD1
                +
000c6e e1a0     +LDI R26 , LOW ( 0x2710 )
000c6f e2b7     +LDI R27 , HIGH ( 0x2710 )
000c70 e080     +LDI R24 , BYTE3 ( 0x2710 )
000c71 e090     +LDI R25 , BYTE4 ( 0x2710 )
                 	__GETD2N 0x2710
000c72 940e 163b 	CALL __MULD12U
000c74 91a0 04df 	LDS  R26,_pressure
000c76 91b0 04e0 	LDS  R27,_pressure+1
000c78 9180 04e1 	LDS  R24,_pressure+2
000c7a 9190 04e2 	LDS  R25,_pressure+3
000c7c 940e 15cf 	CALL __SUBD21
000c7e 93a0 04df 	STS  _pressure,R26
000c80 93b0 04e0 	STS  _pressure+1,R27
000c82 9380 04e1 	STS  _pressure+2,R24
000c84 9390 04e2 	STS  _pressure+3,R25
                 ; 0000 0343             temp=pressure/1000;
000c86 91a0 04df 	LDS  R26,_pressure
000c88 91b0 04e0 	LDS  R27,_pressure+1
000c8a 9180 04e1 	LDS  R24,_pressure+2
000c8c 9190 04e2 	LDS  R25,_pressure+3
                +
000c8e eee8     +LDI R30 , LOW ( 0x3E8 )
000c8f e0f3     +LDI R31 , HIGH ( 0x3E8 )
000c90 e060     +LDI R22 , BYTE3 ( 0x3E8 )
000c91 e070     +LDI R23 , BYTE4 ( 0x3E8 )
                 	__GETD1N 0x3E8
000c92 940e 16a2 	CALL __DIVD21
000c94 2f1e      	MOV  R17,R30
                 ; 0000 0344             ps[2]=temp+'0';
000c95 5de0      	SUBI R30,-LOW(48)
                +
000c96 93e0 048c+STS _ps + ( 2 ) , R30
                 	__PUTB1MN _ps,2
                 ; 0000 0345             pressure-=temp*1000;
000c98 2fa1      	MOV  R26,R17
000c99 e0b0      	LDI  R27,0
000c9a eee8      	LDI  R30,LOW(1000)
000c9b e0f3      	LDI  R31,HIGH(1000)
000c9c 940e 165b 	CALL __MULW12
000c9e 91a0 04df 	LDS  R26,_pressure
000ca0 91b0 04e0 	LDS  R27,_pressure+1
000ca2 9180 04e1 	LDS  R24,_pressure+2
000ca4 9190 04e2 	LDS  R25,_pressure+3
000ca6 940e 1624 	CALL __CWD1
000ca8 940e 15cf 	CALL __SUBD21
000caa 93a0 04df 	STS  _pressure,R26
000cac 93b0 04e0 	STS  _pressure+1,R27
000cae 9380 04e1 	STS  _pressure+2,R24
000cb0 9390 04e2 	STS  _pressure+3,R25
                 ; 0000 0346             temp=pressure/100;
000cb2 91a0 04df 	LDS  R26,_pressure
000cb4 91b0 04e0 	LDS  R27,_pressure+1
000cb6 9180 04e1 	LDS  R24,_pressure+2
000cb8 9190 04e2 	LDS  R25,_pressure+3
                +
000cba e6e4     +LDI R30 , LOW ( 0x64 )
000cbb e0f0     +LDI R31 , HIGH ( 0x64 )
000cbc e060     +LDI R22 , BYTE3 ( 0x64 )
000cbd e070     +LDI R23 , BYTE4 ( 0x64 )
                 	__GETD1N 0x64
000cbe 940e 16a2 	CALL __DIVD21
000cc0 2f1e      	MOV  R17,R30
                 ; 0000 0347             ps[4]=temp+'0';
000cc1 5de0      	SUBI R30,-LOW(48)
                +
000cc2 93e0 048e+STS _ps + ( 4 ) , R30
                 	__PUTB1MN _ps,4
                 ; 0000 0348             pressure-=temp*100;
000cc4 e6e4      	LDI  R30,LOW(100)
000cc5 9fe1      	MUL  R30,R17
000cc6 01f0      	MOVW R30,R0
000cc7 91a0 04df 	LDS  R26,_pressure
000cc9 91b0 04e0 	LDS  R27,_pressure+1
000ccb 9180 04e1 	LDS  R24,_pressure+2
000ccd 9190 04e2 	LDS  R25,_pressure+3
000ccf 940e 1624 	CALL __CWD1
000cd1 940e 15cf 	CALL __SUBD21
000cd3 93a0 04df 	STS  _pressure,R26
000cd5 93b0 04e0 	STS  _pressure+1,R27
000cd7 9380 04e1 	STS  _pressure+2,R24
000cd9 9390 04e2 	STS  _pressure+3,R25
                 ; 0000 0349             temp=pressure/10;
000cdb 91a0 04df 	LDS  R26,_pressure
000cdd 91b0 04e0 	LDS  R27,_pressure+1
000cdf 9180 04e1 	LDS  R24,_pressure+2
000ce1 9190 04e2 	LDS  R25,_pressure+3
                +
000ce3 e0ea     +LDI R30 , LOW ( 0xA )
000ce4 e0f0     +LDI R31 , HIGH ( 0xA )
000ce5 e060     +LDI R22 , BYTE3 ( 0xA )
000ce6 e070     +LDI R23 , BYTE4 ( 0xA )
                 	__GETD1N 0xA
000ce7 940e 16a2 	CALL __DIVD21
000ce9 2f1e      	MOV  R17,R30
                 ; 0000 034A             ps[5]=temp+'0';
000cea 5de0      	SUBI R30,-LOW(48)
                +
000ceb 93e0 048f+STS _ps + ( 5 ) , R30
                 	__PUTB1MN _ps,5
                 ; 0000 034B         }
                 ; 0000 034C         if (Run)
                 _0xA4:
000ced 9bf3      	SBIS 0x1E,3
000cee c0f6      	RJMP _0xA5
                 ; 0000 034D         {
                 ; 0000 034E             if (permit==25)
000cef e1e9      	LDI  R30,LOW(25)
000cf0 15e8      	CP   R30,R8
000cf1 f011      	BREQ PC+3
000cf2 940c 0d26 	JMP _0xA6
                 ; 0000 034F             {
                 ; 0000 0350                 txBuffer[txWrIndex++]='*';
000cf4 2de9      	MOV  R30,R9
000cf5 9493      	INC  R9
000cf6 e0f0      	LDI  R31,0
000cf7 59e0      	SUBI R30,LOW(-_txBuffer)
000cf8 4ffc      	SBCI R31,HIGH(-_txBuffer)
000cf9 e2aa      	LDI  R26,LOW(42)
000cfa 83a0      	STD  Z+0,R26
                 ; 0000 0351                 txBuffer[txWrIndex++]='P';
000cfb 2de9      	MOV  R30,R9
000cfc 9493      	INC  R9
000cfd e0f0      	LDI  R31,0
000cfe 59e0      	SUBI R30,LOW(-_txBuffer)
000cff 4ffc      	SBCI R31,HIGH(-_txBuffer)
000d00 e5a0      	LDI  R26,LOW(80)
000d01 83a0      	STD  Z+0,R26
                 ; 0000 0352                 temp=0;
000d02 e010      	LDI  R17,LOW(0)
                 ; 0000 0353                 while (ps[temp])
                 _0xA7:
000d03 2fe1      	MOV  R30,R17
000d04 e0f0      	LDI  R31,0
000d05 57e6      	SUBI R30,LOW(-_ps)
000d06 4ffb      	SBCI R31,HIGH(-_ps)
000d07 81e0      	LD   R30,Z
000d08 30e0      	CPI  R30,0
000d09 f411      	BRNE PC+3
000d0a 940c 0d1a 	JMP _0xA9
                 ; 0000 0354                 {
                 ; 0000 0355                     txBuffer[txWrIndex++]=ps[temp++];
000d0c 2de9      	MOV  R30,R9
000d0d 9493      	INC  R9
000d0e e0f0      	LDI  R31,0
000d0f 59e0      	SUBI R30,LOW(-_txBuffer)
000d10 4ffc      	SBCI R31,HIGH(-_txBuffer)
000d11 01df      	MOVW R26,R30
000d12 2fe1      	MOV  R30,R17
000d13 5f1f      	SUBI R17,-1
000d14 e0f0      	LDI  R31,0
000d15 57e6      	SUBI R30,LOW(-_ps)
000d16 4ffb      	SBCI R31,HIGH(-_ps)
000d17 81e0      	LD   R30,Z
000d18 93ec      	ST   X,R30
                 ; 0000 0356                 }
000d19 cfe9      	RJMP _0xA7
                 _0xA9:
                 ; 0000 0357                 txBuffer[txWrIndex++]='*';
000d1a 2de9      	MOV  R30,R9
000d1b 9493      	INC  R9
000d1c e0f0      	LDI  R31,0
000d1d 59e0      	SUBI R30,LOW(-_txBuffer)
000d1e 4ffc      	SBCI R31,HIGH(-_txBuffer)
000d1f e2aa      	LDI  R26,LOW(42)
000d20 83a0      	STD  Z+0,R26
                 ; 0000 0358                 SetBit(UCSR0B,UDRIE0);
000d21 91e0 00c1 	LDS  R30,193
000d23 62e0      	ORI  R30,0x20
000d24 93e0 00c1 	STS  193,R30
                 ; 0000 0359             }
                 ; 0000 035A             if (permit==27)
                 _0xA6:
000d26 e1eb      	LDI  R30,LOW(27)
000d27 15e8      	CP   R30,R8
000d28 f011      	BREQ PC+3
000d29 940c 0d77 	JMP _0xAA
                 ; 0000 035B             {
                 ; 0000 035C                 txBuffer[txWrIndex++]='*';
000d2b 2de9      	MOV  R30,R9
000d2c 9493      	INC  R9
000d2d e0f0      	LDI  R31,0
000d2e 59e0      	SUBI R30,LOW(-_txBuffer)
000d2f 4ffc      	SBCI R31,HIGH(-_txBuffer)
000d30 e2aa      	LDI  R26,LOW(42)
000d31 83a0      	STD  Z+0,R26
                 ; 0000 035D                 txBuffer[txWrIndex++]='T';
000d32 2de9      	MOV  R30,R9
000d33 9493      	INC  R9
000d34 e0f0      	LDI  R31,0
000d35 59e0      	SUBI R30,LOW(-_txBuffer)
000d36 4ffc      	SBCI R31,HIGH(-_txBuffer)
000d37 e5a4      	LDI  R26,LOW(84)
000d38 83a0      	STD  Z+0,R26
                 ; 0000 035E                 temp=0;
000d39 e010      	LDI  R17,LOW(0)
                 ; 0000 035F                 if (Sw)
000d3a 9bf2      	SBIS 0x1E,2
000d3b c018      	RJMP _0xAB
                 ; 0000 0360                 {
                 ; 0000 0361                     while (t1s[temp])
                 _0xAC:
000d3c 2fe1      	MOV  R30,R17
000d3d e0f0      	LDI  R31,0
000d3e 58e2      	SUBI R30,LOW(-_t1s)
000d3f 4ffb      	SBCI R31,HIGH(-_t1s)
000d40 81e0      	LD   R30,Z
000d41 30e0      	CPI  R30,0
000d42 f411      	BRNE PC+3
000d43 940c 0d53 	JMP _0xAE
                 ; 0000 0362                     {
                 ; 0000 0363                         txBuffer[txWrIndex++]=t1s[temp++];
000d45 2de9      	MOV  R30,R9
000d46 9493      	INC  R9
000d47 e0f0      	LDI  R31,0
000d48 59e0      	SUBI R30,LOW(-_txBuffer)
000d49 4ffc      	SBCI R31,HIGH(-_txBuffer)
000d4a 01df      	MOVW R26,R30
000d4b 2fe1      	MOV  R30,R17
000d4c 5f1f      	SUBI R17,-1
000d4d e0f0      	LDI  R31,0
000d4e 58e2      	SUBI R30,LOW(-_t1s)
000d4f 4ffb      	SBCI R31,HIGH(-_t1s)
000d50 81e0      	LD   R30,Z
000d51 93ec      	ST   X,R30
                 ; 0000 0364                     }
000d52 cfe9      	RJMP _0xAC
                 _0xAE:
                 ; 0000 0365                 }
                 ; 0000 0366                 else
000d53 c017      	RJMP _0xAF
                 _0xAB:
                 ; 0000 0367                 {
                 ; 0000 0368                     while (t2s[temp])
                 _0xB0:
000d54 2fe1      	MOV  R30,R17
000d55 e0f0      	LDI  R31,0
000d56 57ec      	SUBI R30,LOW(-_t2s)
000d57 4ffb      	SBCI R31,HIGH(-_t2s)
000d58 81e0      	LD   R30,Z
000d59 30e0      	CPI  R30,0
000d5a f411      	BRNE PC+3
000d5b 940c 0d6b 	JMP _0xB2
                 ; 0000 0369                     {
                 ; 0000 036A                         txBuffer[txWrIndex++]=t2s[temp++];
000d5d 2de9      	MOV  R30,R9
000d5e 9493      	INC  R9
000d5f e0f0      	LDI  R31,0
000d60 59e0      	SUBI R30,LOW(-_txBuffer)
000d61 4ffc      	SBCI R31,HIGH(-_txBuffer)
000d62 01df      	MOVW R26,R30
000d63 2fe1      	MOV  R30,R17
000d64 5f1f      	SUBI R17,-1
000d65 e0f0      	LDI  R31,0
000d66 57ec      	SUBI R30,LOW(-_t2s)
000d67 4ffb      	SBCI R31,HIGH(-_t2s)
000d68 81e0      	LD   R30,Z
000d69 93ec      	ST   X,R30
                 ; 0000 036B                     }
000d6a cfe9      	RJMP _0xB0
                 _0xB2:
                 ; 0000 036C                 }
                 _0xAF:
                 ; 0000 036D                 txBuffer[txWrIndex++]='*';
000d6b 2de9      	MOV  R30,R9
000d6c 9493      	INC  R9
000d6d e0f0      	LDI  R31,0
000d6e 59e0      	SUBI R30,LOW(-_txBuffer)
000d6f 4ffc      	SBCI R31,HIGH(-_txBuffer)
000d70 e2aa      	LDI  R26,LOW(42)
000d71 83a0      	STD  Z+0,R26
                 ; 0000 036E                 SetBit(UCSR0B,UDRIE0);
000d72 91e0 00c1 	LDS  R30,193
000d74 62e0      	ORI  R30,0x20
000d75 93e0 00c1 	STS  193,R30
                 ; 0000 036F             }
                 ; 0000 0370             if (permit==29)
                 _0xAA:
000d77 e1ed      	LDI  R30,LOW(29)
000d78 15e8      	CP   R30,R8
000d79 f011      	BREQ PC+3
000d7a 940c 0dae 	JMP _0xB3
                 ; 0000 0371             {
                 ; 0000 0372                 txBuffer[txWrIndex++]='*';
000d7c 2de9      	MOV  R30,R9
000d7d 9493      	INC  R9
000d7e e0f0      	LDI  R31,0
000d7f 59e0      	SUBI R30,LOW(-_txBuffer)
000d80 4ffc      	SBCI R31,HIGH(-_txBuffer)
000d81 e2aa      	LDI  R26,LOW(42)
000d82 83a0      	STD  Z+0,R26
                 ; 0000 0373                 txBuffer[txWrIndex++]='V';
000d83 2de9      	MOV  R30,R9
000d84 9493      	INC  R9
000d85 e0f0      	LDI  R31,0
000d86 59e0      	SUBI R30,LOW(-_txBuffer)
000d87 4ffc      	SBCI R31,HIGH(-_txBuffer)
000d88 e5a6      	LDI  R26,LOW(86)
000d89 83a0      	STD  Z+0,R26
                 ; 0000 0374                 temp=0;
000d8a e010      	LDI  R17,LOW(0)
                 ; 0000 0375                 while (vs[temp])
                 _0xB4:
000d8b 2fe1      	MOV  R30,R17
000d8c e0f0      	LDI  R31,0
000d8d 58e8      	SUBI R30,LOW(-_vs)
000d8e 4ffb      	SBCI R31,HIGH(-_vs)
000d8f 81e0      	LD   R30,Z
000d90 30e0      	CPI  R30,0
000d91 f411      	BRNE PC+3
000d92 940c 0da2 	JMP _0xB6
                 ; 0000 0376                 {
                 ; 0000 0377                     txBuffer[txWrIndex++]=vs[temp++];
000d94 2de9      	MOV  R30,R9
000d95 9493      	INC  R9
000d96 e0f0      	LDI  R31,0
000d97 59e0      	SUBI R30,LOW(-_txBuffer)
000d98 4ffc      	SBCI R31,HIGH(-_txBuffer)
000d99 01df      	MOVW R26,R30
000d9a 2fe1      	MOV  R30,R17
000d9b 5f1f      	SUBI R17,-1
000d9c e0f0      	LDI  R31,0
000d9d 58e8      	SUBI R30,LOW(-_vs)
000d9e 4ffb      	SBCI R31,HIGH(-_vs)
000d9f 81e0      	LD   R30,Z
000da0 93ec      	ST   X,R30
                 ; 0000 0378                 }
000da1 cfe9      	RJMP _0xB4
                 _0xB6:
                 ; 0000 0379                 txBuffer[txWrIndex++]='*';
000da2 2de9      	MOV  R30,R9
000da3 9493      	INC  R9
000da4 e0f0      	LDI  R31,0
000da5 59e0      	SUBI R30,LOW(-_txBuffer)
000da6 4ffc      	SBCI R31,HIGH(-_txBuffer)
000da7 e2aa      	LDI  R26,LOW(42)
000da8 83a0      	STD  Z+0,R26
                 ; 0000 037A                 SetBit(UCSR0B,UDRIE0);
000da9 91e0 00c1 	LDS  R30,193
000dab 62e0      	ORI  R30,0x20
000dac 93e0 00c1 	STS  193,R30
                 ; 0000 037B             }
                 ; 0000 037C             if (permit==30)
                 _0xB3:
000dae e1ee      	LDI  R30,LOW(30)
000daf 15e8      	CP   R30,R8
000db0 f011      	BREQ PC+3
000db1 940c 0de5 	JMP _0xB7
                 ; 0000 037D             {
                 ; 0000 037E                 txBuffer[txWrIndex++]='*';
000db3 2de9      	MOV  R30,R9
000db4 9493      	INC  R9
000db5 e0f0      	LDI  R31,0
000db6 59e0      	SUBI R30,LOW(-_txBuffer)
000db7 4ffc      	SBCI R31,HIGH(-_txBuffer)
000db8 e2aa      	LDI  R26,LOW(42)
000db9 83a0      	STD  Z+0,R26
                 ; 0000 037F                 txBuffer[txWrIndex++]='N';
000dba 2de9      	MOV  R30,R9
000dbb 9493      	INC  R9
000dbc e0f0      	LDI  R31,0
000dbd 59e0      	SUBI R30,LOW(-_txBuffer)
000dbe 4ffc      	SBCI R31,HIGH(-_txBuffer)
000dbf e4ae      	LDI  R26,LOW(78)
000dc0 83a0      	STD  Z+0,R26
                 ; 0000 0380                 temp=0;
000dc1 e010      	LDI  R17,LOW(0)
                 ; 0000 0381                 while (co2s[temp])
                 _0xB8:
000dc2 2fe1      	MOV  R30,R17
000dc3 e0f0      	LDI  R31,0
000dc4 58ef      	SUBI R30,LOW(-_co2s)
000dc5 4ffb      	SBCI R31,HIGH(-_co2s)
000dc6 81e0      	LD   R30,Z
000dc7 30e0      	CPI  R30,0
000dc8 f411      	BRNE PC+3
000dc9 940c 0dd9 	JMP _0xBA
                 ; 0000 0382                 {
                 ; 0000 0383                     txBuffer[txWrIndex++]=co2s[temp++];
000dcb 2de9      	MOV  R30,R9
000dcc 9493      	INC  R9
000dcd e0f0      	LDI  R31,0
000dce 59e0      	SUBI R30,LOW(-_txBuffer)
000dcf 4ffc      	SBCI R31,HIGH(-_txBuffer)
000dd0 01df      	MOVW R26,R30
000dd1 2fe1      	MOV  R30,R17
000dd2 5f1f      	SUBI R17,-1
000dd3 e0f0      	LDI  R31,0
000dd4 58ef      	SUBI R30,LOW(-_co2s)
000dd5 4ffb      	SBCI R31,HIGH(-_co2s)
000dd6 81e0      	LD   R30,Z
000dd7 93ec      	ST   X,R30
                 ; 0000 0384                 }
000dd8 cfe9      	RJMP _0xB8
                 _0xBA:
                 ; 0000 0385                 txBuffer[txWrIndex++]='*';
000dd9 2de9      	MOV  R30,R9
000dda 9493      	INC  R9
000ddb e0f0      	LDI  R31,0
000ddc 59e0      	SUBI R30,LOW(-_txBuffer)
000ddd 4ffc      	SBCI R31,HIGH(-_txBuffer)
000dde e2aa      	LDI  R26,LOW(42)
000ddf 83a0      	STD  Z+0,R26
                 ; 0000 0386                 SetBit(UCSR0B,UDRIE0);
000de0 91e0 00c1 	LDS  R30,193
000de2 62e0      	ORI  R30,0x20
000de3 93e0 00c1 	STS  193,R30
                 ; 0000 0387             }
                 ; 0000 0388         }
                 _0xB7:
                 ; 0000 0389         if (permit==31)
                 _0xA5:
000de5 e1ef      	LDI  R30,LOW(31)
000de6 15e8      	CP   R30,R8
000de7 f011      	BREQ PC+3
000de8 940c 0e1f 	JMP _0xBB
                 ; 0000 038A         {
                 ; 0000 038B             lcd_gotoxy(0,0);
000dea e0e0      	LDI  R30,LOW(0)
000deb 93ea      	ST   -Y,R30
000dec e0a0      	LDI  R26,LOW(0)
000ded 940e 1096 	CALL _lcd_gotoxy
                 ; 0000 038C             if (Sw)
000def 9bf2      	SBIS 0x1E,2
000df0 c005      	RJMP _0xBC
                 ; 0000 038D                 lcd_puts(t1s);
000df1 e7ae      	LDI  R26,LOW(_t1s)
000df2 e0b4      	LDI  R27,HIGH(_t1s)
000df3 940e 10ea 	CALL _lcd_puts
                 ; 0000 038E             else
000df5 c004      	RJMP _0xBD
                 _0xBC:
                 ; 0000 038F                 lcd_puts(t2s);
000df6 e8a4      	LDI  R26,LOW(_t2s)
000df7 e0b4      	LDI  R27,HIGH(_t2s)
000df8 940e 10ea 	CALL _lcd_puts
                 ; 0000 0390             lcd_gotoxy(7,0);
                 _0xBD:
000dfa e0e7      	LDI  R30,LOW(7)
000dfb 93ea      	ST   -Y,R30
000dfc e0a0      	LDI  R26,LOW(0)
000dfd 940e 1096 	CALL _lcd_gotoxy
                 ; 0000 0391             lcd_puts(ps);
000dff e8aa      	LDI  R26,LOW(_ps)
000e00 e0b4      	LDI  R27,HIGH(_ps)
000e01 940e 10ea 	CALL _lcd_puts
                 ; 0000 0392             lcd_gotoxy(0,1);
000e03 e0e0      	LDI  R30,LOW(0)
000e04 93ea      	ST   -Y,R30
000e05 e0a1      	LDI  R26,LOW(1)
000e06 940e 1096 	CALL _lcd_gotoxy
                 ; 0000 0393             lcd_puts(vs);
000e08 e7a8      	LDI  R26,LOW(_vs)
000e09 e0b4      	LDI  R27,HIGH(_vs)
000e0a 940e 10ea 	CALL _lcd_puts
                 ; 0000 0394             lcd_gotoxy(7,1);
000e0c e0e7      	LDI  R30,LOW(7)
000e0d 93ea      	ST   -Y,R30
000e0e e0a1      	LDI  R26,LOW(1)
000e0f 940e 1096 	CALL _lcd_gotoxy
                 ; 0000 0395             lcd_puts(co2s);
000e11 e7a1      	LDI  R26,LOW(_co2s)
000e12 e0b4      	LDI  R27,HIGH(_co2s)
000e13 940e 10ea 	CALL _lcd_puts
                 ; 0000 0396             permit=0;
000e15 2488      	CLR  R8
                 ; 0000 0397             pressure=0;
000e16 e0e0      	LDI  R30,LOW(0)
000e17 93e0 04df 	STS  _pressure,R30
000e19 93e0 04e0 	STS  _pressure+1,R30
000e1b 93e0 04e1 	STS  _pressure+2,R30
000e1d 93e0 04e2 	STS  _pressure+3,R30
                 ; 0000 0398         }
                 ; 0000 0399 
                 ; 0000 039A         while(timerEnd){};
                 _0xBB:
                 _0xBE:
000e1f 9bf0      	SBIS 0x1E,0
000e20 c001      	RJMP _0xC0
000e21 cffd      	RJMP _0xBE
                 _0xC0:
                 ; 0000 039B     }
000e22 940c 0346 	JMP  _0x48
                 _0x4A:
                 ; 0000 039C }
                 _0xC1:
000e24 cfff      	RJMP _0xC1
                 ; .FEND
                 
                 	.CSEG
                 _ftrunc:
                 ; .FSTART _ftrunc
000e25 940e 16e1 	CALL __PUTPARD2
000e27 817b         ldd  r23,y+3
000e28 816a         ldd  r22,y+2
000e29 81f9         ldd  r31,y+1
000e2a 81e8         ld   r30,y
000e2b fb77         bst  r23,7
000e2c 0f77         lsl  r23
000e2d fd67         sbrc r22,7
000e2e 6071         sbr  r23,1
000e2f 2f97         mov  r25,r23
000e30 579e         subi r25,0x7e
000e31 f081         breq __ftrunc0
000e32 f078         brcs __ftrunc0
000e33 3198         cpi  r25,24
000e34 f490         brsh __ftrunc1
000e35 27aa         clr  r26
000e36 27bb         clr  r27
000e37 2788         clr  r24
                 __ftrunc2:
000e38 9408         sec
000e39 9587         ror  r24
000e3a 95b7         ror  r27
000e3b 95a7         ror  r26
000e3c 959a         dec  r25
000e3d f7d1         brne __ftrunc2
000e3e 23ea         and  r30,r26
000e3f 23fb         and  r31,r27
000e40 2368         and  r22,r24
000e41 c005         rjmp __ftrunc1
                 __ftrunc0:
000e42 94e8         clt
000e43 2777         clr  r23
000e44 27ee         clr  r30
000e45 27ff         clr  r31
000e46 2766         clr  r22
                 __ftrunc1:
000e47 776f         cbr  r22,0x80
000e48 9576         lsr  r23
000e49 f408         brcc __ftrunc3
000e4a 6860         sbr  r22,0x80
                 __ftrunc3:
000e4b f977         bld  r23,7
000e4c 91a9         ld   r26,y+
000e4d 91b9         ld   r27,y+
000e4e 9189         ld   r24,y+
000e4f 9199         ld   r25,y+
000e50 17ea         cp   r30,r26
000e51 07fb         cpc  r31,r27
000e52 0768         cpc  r22,r24
000e53 0779         cpc  r23,r25
000e54 fb97         bst  r25,7
000e55 9508         ret
                 ; .FEND
                 _floor:
                 ; .FSTART _floor
000e56 940e 16e1 	CALL __PUTPARD2
000e58 940e 16d2 	CALL __GETD2S0
000e5a 940e 0e25 	CALL _ftrunc
000e5c 940e 16d7 	CALL __PUTD1S0
000e5e f421          brne __floor1
                 __floor0:
000e5f 940e 16cd 	CALL __GETD1S0
000e61 9624      	ADIW R28,4
000e62 9508      	RET
                 __floor1:
000e63 f7de          brtc __floor0
000e64 940e 16cd 	CALL __GETD1S0
                +
000e66 e0a0     +LDI R26 , LOW ( 0x3F800000 )
000e67 e0b0     +LDI R27 , HIGH ( 0x3F800000 )
000e68 e880     +LDI R24 , BYTE3 ( 0x3F800000 )
000e69 e39f     +LDI R25 , BYTE4 ( 0x3F800000 )
                 	__GETD2N 0x3F800000
000e6a 940e 14bb 	CALL __SUBF12
000e6c 9624      	ADIW R28,4
000e6d 9508      	RET
                 ; .FEND
                 _log:
                 ; .FSTART _log
000e6e 940e 16e1 	CALL __PUTPARD2
000e70 9724      	SBIW R28,4
000e71 931a      	ST   -Y,R17
000e72 930a      	ST   -Y,R16
                +
000e73 81ae     +LDD R26 , Y + 6
000e74 81bf     +LDD R27 , Y + 6 + 1
000e75 8588     +LDD R24 , Y + 6 + 2
000e76 8599     +LDD R25 , Y + 6 + 3
                 	__GETD2S 6
000e77 940e 1719 	CALL __CPD02
000e79 f414      	BRGE PC+3
000e7a 940c 0e84 	JMP _0x200000C
                +
000e7c efef     +LDI R30 , LOW ( 0xFF7FFFFF )
000e7d efff     +LDI R31 , HIGH ( 0xFF7FFFFF )
000e7e e76f     +LDI R22 , BYTE3 ( 0xFF7FFFFF )
000e7f ef7f     +LDI R23 , BYTE4 ( 0xFF7FFFFF )
                 	__GETD1N 0xFF7FFFFF
000e80 8119      	LDD  R17,Y+1
000e81 8108      	LDD  R16,Y+0
000e82 962a      	ADIW R28,10
000e83 9508      	RET
                 _0x200000C:
                +
000e84 81ee     +LDD R30 , Y + 6
000e85 81ff     +LDD R31 , Y + 6 + 1
000e86 8568     +LDD R22 , Y + 6 + 2
000e87 8579     +LDD R23 , Y + 6 + 3
                 	__GETD1S 6
000e88 940e 16dc 	CALL __PUTPARD1
000e8a b7ad      	IN   R26,SPL
000e8b b7be      	IN   R27,SPH
000e8c 9711      	SBIW R26,1
000e8d 931f      	PUSH R17
000e8e 930f      	PUSH R16
000e8f 940e 13ff 	CALL _frexp
000e91 910f      	POP  R16
000e92 911f      	POP  R17
                +
000e93 83ee     +STD Y + 6 , R30
000e94 83ff     +STD Y + 6 + 1 , R31
000e95 8768     +STD Y + 6 + 2 , R22
000e96 8779     +STD Y + 6 + 3 , R23
                 	__PUTD1S 6
                +
000e97 81ae     +LDD R26 , Y + 6
000e98 81bf     +LDD R27 , Y + 6 + 1
000e99 8588     +LDD R24 , Y + 6 + 2
000e9a 8599     +LDD R25 , Y + 6 + 3
                 	__GETD2S 6
                +
000e9b efe3     +LDI R30 , LOW ( 0x3F3504F3 )
000e9c e0f4     +LDI R31 , HIGH ( 0x3F3504F3 )
000e9d e365     +LDI R22 , BYTE3 ( 0x3F3504F3 )
000e9e e37f     +LDI R23 , BYTE4 ( 0x3F3504F3 )
                 	__GETD1N 0x3F3504F3
000e9f 940e 15a5 	CALL __CMPF12
000ea1 f010      	BRLO PC+3
000ea2 940c 0eb0 	JMP _0x200000D
                +
000ea4 81ee     +LDD R30 , Y + 6
000ea5 81ff     +LDD R31 , Y + 6 + 1
000ea6 8568     +LDD R22 , Y + 6 + 2
000ea7 8579     +LDD R23 , Y + 6 + 3
                 	__GETD1S 6
000ea8 940e 14c2 	CALL __ADDF12
                +
000eaa 83ee     +STD Y + 6 , R30
000eab 83ff     +STD Y + 6 + 1 , R31
000eac 8768     +STD Y + 6 + 2 , R22
000ead 8779     +STD Y + 6 + 3 , R23
                 	__PUTD1S 6
                +
000eae 5001     +SUBI R16 , LOW ( 1 )
000eaf 4010     +SBCI R17 , HIGH ( 1 )
                 	__SUBWRN 16,17,1
                 _0x200000D:
                +
000eb0 81ee     +LDD R30 , Y + 6
000eb1 81ff     +LDD R31 , Y + 6 + 1
000eb2 8568     +LDD R22 , Y + 6 + 2
000eb3 8579     +LDD R23 , Y + 6 + 3
                 	__GETD1S 6
                +
000eb4 e0a0     +LDI R26 , LOW ( 0x3F800000 )
000eb5 e0b0     +LDI R27 , HIGH ( 0x3F800000 )
000eb6 e880     +LDI R24 , BYTE3 ( 0x3F800000 )
000eb7 e39f     +LDI R25 , BYTE4 ( 0x3F800000 )
                 	__GETD2N 0x3F800000
000eb8 940e 14bb 	CALL __SUBF12
000eba 937f      	PUSH R23
000ebb 936f      	PUSH R22
000ebc 93ff      	PUSH R31
000ebd 93ef      	PUSH R30
                +
000ebe 81ee     +LDD R30 , Y + 6
000ebf 81ff     +LDD R31 , Y + 6 + 1
000ec0 8568     +LDD R22 , Y + 6 + 2
000ec1 8579     +LDD R23 , Y + 6 + 3
                 	__GETD1S 6
                +
000ec2 e0a0     +LDI R26 , LOW ( 0x3F800000 )
000ec3 e0b0     +LDI R27 , HIGH ( 0x3F800000 )
000ec4 e880     +LDI R24 , BYTE3 ( 0x3F800000 )
000ec5 e39f     +LDI R25 , BYTE4 ( 0x3F800000 )
                 	__GETD2N 0x3F800000
000ec6 940e 14c2 	CALL __ADDF12
000ec8 91af      	POP  R26
000ec9 91bf      	POP  R27
000eca 918f      	POP  R24
000ecb 919f      	POP  R25
000ecc 940e 1560 	CALL __DIVF21
                +
000ece 83ee     +STD Y + 6 , R30
000ecf 83ff     +STD Y + 6 + 1 , R31
000ed0 8768     +STD Y + 6 + 2 , R22
000ed1 8779     +STD Y + 6 + 3 , R23
                 	__PUTD1S 6
                +
000ed2 81ae     +LDD R26 , Y + 6
000ed3 81bf     +LDD R27 , Y + 6 + 1
000ed4 8588     +LDD R24 , Y + 6 + 2
000ed5 8599     +LDD R25 , Y + 6 + 3
                 	__GETD2S 6
000ed6 940e 1512 	CALL __MULF12
                +
000ed8 83ea     +STD Y + 2 , R30
000ed9 83fb     +STD Y + 2 + 1 , R31
000eda 836c     +STD Y + 2 + 2 , R22
000edb 837d     +STD Y + 2 + 3 , R23
                 	__PUTD1S 2
                +
000edc e2a6     +LDI R26 , LOW ( 0x3F654226 )
000edd e4b2     +LDI R27 , HIGH ( 0x3F654226 )
000ede e685     +LDI R24 , BYTE3 ( 0x3F654226 )
000edf e39f     +LDI R25 , BYTE4 ( 0x3F654226 )
                 	__GETD2N 0x3F654226
000ee0 940e 1512 	CALL __MULF12
000ee2 01df      	MOVW R26,R30
000ee3 01cb      	MOVW R24,R22
                +
000ee4 e4ee     +LDI R30 , LOW ( 0x4054114E )
000ee5 e1f1     +LDI R31 , HIGH ( 0x4054114E )
000ee6 e564     +LDI R22 , BYTE3 ( 0x4054114E )
000ee7 e470     +LDI R23 , BYTE4 ( 0x4054114E )
                 	__GETD1N 0x4054114E
000ee8 940e 16eb 	CALL __SWAPD12
000eea 940e 14bb 	CALL __SUBF12
                +
000eec 81ae     +LDD R26 , Y + 6
000eed 81bf     +LDD R27 , Y + 6 + 1
000eee 8588     +LDD R24 , Y + 6 + 2
000eef 8599     +LDD R25 , Y + 6 + 3
                 	__GETD2S 6
000ef0 940e 1512 	CALL __MULF12
000ef2 937f      	PUSH R23
000ef3 936f      	PUSH R22
000ef4 93ff      	PUSH R31
000ef5 93ef      	PUSH R30
                +
000ef6 81ea     +LDD R30 , Y + 2
000ef7 81fb     +LDD R31 , Y + 2 + 1
000ef8 816c     +LDD R22 , Y + 2 + 2
000ef9 817d     +LDD R23 , Y + 2 + 3
                 	__GETD1S 2
                +
000efa e4ad     +LDI R26 , LOW ( 0x3FD4114D )
000efb e1b1     +LDI R27 , HIGH ( 0x3FD4114D )
000efc ed84     +LDI R24 , BYTE3 ( 0x3FD4114D )
000efd e39f     +LDI R25 , BYTE4 ( 0x3FD4114D )
                 	__GETD2N 0x3FD4114D
000efe 940e 14bb 	CALL __SUBF12
000f00 91af      	POP  R26
000f01 91bf      	POP  R27
000f02 918f      	POP  R24
000f03 919f      	POP  R25
000f04 940e 1560 	CALL __DIVF21
000f06 937f      	PUSH R23
000f07 936f      	PUSH R22
000f08 93ff      	PUSH R31
000f09 93ef      	PUSH R30
000f0a 01f8      	MOVW R30,R16
000f0b 940e 1624 	CALL __CWD1
000f0d 940e 1488 	CALL __CDF1
                +
000f0f e1a8     +LDI R26 , LOW ( 0x3F317218 )
000f10 e7b2     +LDI R27 , HIGH ( 0x3F317218 )
000f11 e381     +LDI R24 , BYTE3 ( 0x3F317218 )
000f12 e39f     +LDI R25 , BYTE4 ( 0x3F317218 )
                 	__GETD2N 0x3F317218
000f13 940e 1512 	CALL __MULF12
000f15 91af      	POP  R26
000f16 91bf      	POP  R27
000f17 918f      	POP  R24
000f18 919f      	POP  R25
000f19 940e 14c2 	CALL __ADDF12
000f1b 8119      	LDD  R17,Y+1
000f1c 8108      	LDD  R16,Y+0
000f1d 962a      	ADIW R28,10
000f1e 9508      	RET
                 ; .FEND
                 _exp:
                 ; .FSTART _exp
000f1f 940e 16e1 	CALL __PUTPARD2
000f21 9728      	SBIW R28,8
000f22 931a      	ST   -Y,R17
000f23 930a      	ST   -Y,R16
                +
000f24 85aa     +LDD R26 , Y + 10
000f25 85bb     +LDD R27 , Y + 10 + 1
000f26 858c     +LDD R24 , Y + 10 + 2
000f27 859d     +LDD R25 , Y + 10 + 3
                 	__GETD2S 10
                +
000f28 e5e0     +LDI R30 , LOW ( 0xC2AEAC50 )
000f29 eafc     +LDI R31 , HIGH ( 0xC2AEAC50 )
000f2a ea6e     +LDI R22 , BYTE3 ( 0xC2AEAC50 )
000f2b ec72     +LDI R23 , BYTE4 ( 0xC2AEAC50 )
                 	__GETD1N 0xC2AEAC50
000f2c 940e 15a5 	CALL __CMPF12
000f2e f010      	BRLO PC+3
000f2f 940c 0f39 	JMP _0x200000F
                +
000f31 e0e0     +LDI R30 , LOW ( 0x0 )
000f32 e0f0     +LDI R31 , HIGH ( 0x0 )
000f33 e060     +LDI R22 , BYTE3 ( 0x0 )
000f34 e070     +LDI R23 , BYTE4 ( 0x0 )
                 	__GETD1N 0x0
000f35 8119      	LDD  R17,Y+1
000f36 8108      	LDD  R16,Y+0
000f37 962e      	ADIW R28,14
000f38 9508      	RET
                 _0x200000F:
                +
000f39 85ea     +LDD R30 , Y + 10
000f3a 85fb     +LDD R31 , Y + 10 + 1
000f3b 856c     +LDD R22 , Y + 10 + 2
000f3c 857d     +LDD R23 , Y + 10 + 3
                 	__GETD1S 10
000f3d 940e 1715 	CALL __CPD10
000f3f f011      	BREQ PC+3
000f40 940c 0f4a 	JMP _0x2000010
                +
000f42 e0e0     +LDI R30 , LOW ( 0x3F800000 )
000f43 e0f0     +LDI R31 , HIGH ( 0x3F800000 )
000f44 e860     +LDI R22 , BYTE3 ( 0x3F800000 )
000f45 e37f     +LDI R23 , BYTE4 ( 0x3F800000 )
                 	__GETD1N 0x3F800000
000f46 8119      	LDD  R17,Y+1
000f47 8108      	LDD  R16,Y+0
000f48 962e      	ADIW R28,14
000f49 9508      	RET
                 _0x2000010:
                +
000f4a 85aa     +LDD R26 , Y + 10
000f4b 85bb     +LDD R27 , Y + 10 + 1
000f4c 858c     +LDD R24 , Y + 10 + 2
000f4d 859d     +LDD R25 , Y + 10 + 3
                 	__GETD2S 10
                +
000f4e e1e8     +LDI R30 , LOW ( 0x42B17218 )
000f4f e7f2     +LDI R31 , HIGH ( 0x42B17218 )
000f50 eb61     +LDI R22 , BYTE3 ( 0x42B17218 )
000f51 e472     +LDI R23 , BYTE4 ( 0x42B17218 )
                 	__GETD1N 0x42B17218
000f52 940e 15a5 	CALL __CMPF12
000f54 f009      	BREQ PC+2
000f55 f410      	BRCC PC+3
000f56 940c 0f60 	JMP  _0x2000011
                +
000f58 efef     +LDI R30 , LOW ( 0x7F7FFFFF )
000f59 efff     +LDI R31 , HIGH ( 0x7F7FFFFF )
000f5a e76f     +LDI R22 , BYTE3 ( 0x7F7FFFFF )
000f5b e77f     +LDI R23 , BYTE4 ( 0x7F7FFFFF )
                 	__GETD1N 0x7F7FFFFF
000f5c 8119      	LDD  R17,Y+1
000f5d 8108      	LDD  R16,Y+0
000f5e 962e      	ADIW R28,14
000f5f 9508      	RET
                 _0x2000011:
                +
000f60 85aa     +LDD R26 , Y + 10
000f61 85bb     +LDD R27 , Y + 10 + 1
000f62 858c     +LDD R24 , Y + 10 + 2
000f63 859d     +LDD R25 , Y + 10 + 3
                 	__GETD2S 10
                +
000f64 e3eb     +LDI R30 , LOW ( 0x3FB8AA3B )
000f65 eafa     +LDI R31 , HIGH ( 0x3FB8AA3B )
000f66 eb68     +LDI R22 , BYTE3 ( 0x3FB8AA3B )
000f67 e37f     +LDI R23 , BYTE4 ( 0x3FB8AA3B )
                 	__GETD1N 0x3FB8AA3B
000f68 940e 1512 	CALL __MULF12
                +
000f6a 87ea     +STD Y + 10 , R30
000f6b 87fb     +STD Y + 10 + 1 , R31
000f6c 876c     +STD Y + 10 + 2 , R22
000f6d 877d     +STD Y + 10 + 3 , R23
                 	__PUTD1S 10
                +
000f6e 85aa     +LDD R26 , Y + 10
000f6f 85bb     +LDD R27 , Y + 10 + 1
000f70 858c     +LDD R24 , Y + 10 + 2
000f71 859d     +LDD R25 , Y + 10 + 3
                 	__GETD2S 10
000f72 940e 0e56 	CALL _floor
000f74 940e 1451 	CALL __CFD1
000f76 018f      	MOVW R16,R30
                +
000f77 85aa     +LDD R26 , Y + 10
000f78 85bb     +LDD R27 , Y + 10 + 1
000f79 858c     +LDD R24 , Y + 10 + 2
000f7a 859d     +LDD R25 , Y + 10 + 3
                 	__GETD2S 10
000f7b 940e 1624 	CALL __CWD1
000f7d 940e 1488 	CALL __CDF1
000f7f 940e 16eb 	CALL __SWAPD12
000f81 940e 14bb 	CALL __SUBF12
000f83 01df      	MOVW R26,R30
000f84 01cb      	MOVW R24,R22
                +
000f85 e0e0     +LDI R30 , LOW ( 0x3F000000 )
000f86 e0f0     +LDI R31 , HIGH ( 0x3F000000 )
000f87 e060     +LDI R22 , BYTE3 ( 0x3F000000 )
000f88 e37f     +LDI R23 , BYTE4 ( 0x3F000000 )
                 	__GETD1N 0x3F000000
000f89 940e 16eb 	CALL __SWAPD12
000f8b 940e 14bb 	CALL __SUBF12
                +
000f8d 83ee     +STD Y + 6 , R30
000f8e 83ff     +STD Y + 6 + 1 , R31
000f8f 8768     +STD Y + 6 + 2 , R22
000f90 8779     +STD Y + 6 + 3 , R23
                 	__PUTD1S 6
                +
000f91 81ae     +LDD R26 , Y + 6
000f92 81bf     +LDD R27 , Y + 6 + 1
000f93 8588     +LDD R24 , Y + 6 + 2
000f94 8599     +LDD R25 , Y + 6 + 3
                 	__GETD2S 6
000f95 940e 1512 	CALL __MULF12
                +
000f97 83ea     +STD Y + 2 , R30
000f98 83fb     +STD Y + 2 + 1 , R31
000f99 836c     +STD Y + 2 + 2 , R22
000f9a 837d     +STD Y + 2 + 3 , R23
                 	__PUTD1S 2
                +
000f9b e6ad     +LDI R26 , LOW ( 0x3D6C4C6D )
000f9c e4bc     +LDI R27 , HIGH ( 0x3D6C4C6D )
000f9d e68c     +LDI R24 , BYTE3 ( 0x3D6C4C6D )
000f9e e39d     +LDI R25 , BYTE4 ( 0x3D6C4C6D )
                 	__GETD2N 0x3D6C4C6D
000f9f 940e 1512 	CALL __MULF12
                +
000fa1 eaa6     +LDI R26 , LOW ( 0x40E6E3A6 )
000fa2 eeb3     +LDI R27 , HIGH ( 0x40E6E3A6 )
000fa3 ee86     +LDI R24 , BYTE3 ( 0x40E6E3A6 )
000fa4 e490     +LDI R25 , BYTE4 ( 0x40E6E3A6 )
                 	__GETD2N 0x40E6E3A6
000fa5 940e 14c2 	CALL __ADDF12
                +
000fa7 81ae     +LDD R26 , Y + 6
000fa8 81bf     +LDD R27 , Y + 6 + 1
000fa9 8588     +LDD R24 , Y + 6 + 2
000faa 8599     +LDD R25 , Y + 6 + 3
                 	__GETD2S 6
000fab 940e 1512 	CALL __MULF12
                +
000fad 83ee     +STD Y + 6 , R30
000fae 83ff     +STD Y + 6 + 1 , R31
000faf 8768     +STD Y + 6 + 2 , R22
000fb0 8779     +STD Y + 6 + 3 , R23
                 	__PUTD1S 6
                +
000fb1 81ea     +LDD R30 , Y + 2
000fb2 81fb     +LDD R31 , Y + 2 + 1
000fb3 816c     +LDD R22 , Y + 2 + 2
000fb4 817d     +LDD R23 , Y + 2 + 3
                 	__GETD1S 2
                +
000fb5 e2a8     +LDI R26 , LOW ( 0x41A68D28 )
000fb6 e8bd     +LDI R27 , HIGH ( 0x41A68D28 )
000fb7 ea86     +LDI R24 , BYTE3 ( 0x41A68D28 )
000fb8 e491     +LDI R25 , BYTE4 ( 0x41A68D28 )
                 	__GETD2N 0x41A68D28
000fb9 940e 14c2 	CALL __ADDF12
                +
000fbb 83ea     +STD Y + 2 , R30
000fbc 83fb     +STD Y + 2 + 1 , R31
000fbd 836c     +STD Y + 2 + 2 , R22
000fbe 837d     +STD Y + 2 + 3 , R23
                 	__PUTD1S 2
                +
000fbf 81ee     +LDD R30 , Y + 6
000fc0 81ff     +LDD R31 , Y + 6 + 1
000fc1 8568     +LDD R22 , Y + 6 + 2
000fc2 8579     +LDD R23 , Y + 6 + 3
                 	__GETD1S 6
                +
000fc3 81aa     +LDD R26 , Y + 2
000fc4 81bb     +LDD R27 , Y + 2 + 1
000fc5 818c     +LDD R24 , Y + 2 + 2
000fc6 819d     +LDD R25 , Y + 2 + 3
                 	__GETD2S 2
000fc7 940e 14c2 	CALL __ADDF12
                +
000fc9 efa3     +LDI R26 , LOW ( 0x3FB504F3 )
000fca e0b4     +LDI R27 , HIGH ( 0x3FB504F3 )
000fcb eb85     +LDI R24 , BYTE3 ( 0x3FB504F3 )
000fcc e39f     +LDI R25 , BYTE4 ( 0x3FB504F3 )
                 	__GETD2N 0x3FB504F3
000fcd 940e 1512 	CALL __MULF12
000fcf 937f      	PUSH R23
000fd0 936f      	PUSH R22
000fd1 93ff      	PUSH R31
000fd2 93ef      	PUSH R30
                +
000fd3 81ae     +LDD R26 , Y + 6
000fd4 81bf     +LDD R27 , Y + 6 + 1
000fd5 8588     +LDD R24 , Y + 6 + 2
000fd6 8599     +LDD R25 , Y + 6 + 3
                 	__GETD2S 6
                +
000fd7 81ea     +LDD R30 , Y + 2
000fd8 81fb     +LDD R31 , Y + 2 + 1
000fd9 816c     +LDD R22 , Y + 2 + 2
000fda 817d     +LDD R23 , Y + 2 + 3
                 	__GETD1S 2
000fdb 940e 14bb 	CALL __SUBF12
000fdd 91af      	POP  R26
000fde 91bf      	POP  R27
000fdf 918f      	POP  R24
000fe0 919f      	POP  R25
000fe1 940e 1560 	CALL __DIVF21
000fe3 940e 16dc 	CALL __PUTPARD1
000fe5 01d8      	MOVW R26,R16
000fe6 940e 1410 	CALL _ldexp
000fe8 8119      	LDD  R17,Y+1
000fe9 8108      	LDD  R16,Y+0
000fea 962e      	ADIW R28,14
000feb 9508      	RET
                 ; .FEND
                 _pow:
                 ; .FSTART _pow
000fec 940e 16e1 	CALL __PUTPARD2
000fee 9724      	SBIW R28,4
                +
000fef 85e8     +LDD R30 , Y + 8
000ff0 85f9     +LDD R31 , Y + 8 + 1
000ff1 856a     +LDD R22 , Y + 8 + 2
000ff2 857b     +LDD R23 , Y + 8 + 3
                 	__GETD1S 8
000ff3 940e 1715 	CALL __CPD10
000ff5 f011      	BREQ PC+3
000ff6 940c 0ffe 	JMP _0x2000012
                +
000ff8 e0e0     +LDI R30 , LOW ( 0x0 )
000ff9 e0f0     +LDI R31 , HIGH ( 0x0 )
000ffa e060     +LDI R22 , BYTE3 ( 0x0 )
000ffb e070     +LDI R23 , BYTE4 ( 0x0 )
                 	__GETD1N 0x0
000ffc 962c      	ADIW R28,12
000ffd 9508      	RET
                 _0x2000012:
                +
000ffe 85a8     +LDD R26 , Y + 8
000fff 85b9     +LDD R27 , Y + 8 + 1
001000 858a     +LDD R24 , Y + 8 + 2
001001 859b     +LDD R25 , Y + 8 + 3
                 	__GETD2S 8
001002 940e 1719 	CALL __CPD02
001004 f014      	BRLT PC+3
001005 940c 1028 	JMP _0x2000013
                +
001007 81ec     +LDD R30 , Y + 4
001008 81fd     +LDD R31 , Y + 4 + 1
001009 816e     +LDD R22 , Y + 4 + 2
00100a 817f     +LDD R23 , Y + 4 + 3
                 	__GETD1S 4
00100b 940e 1715 	CALL __CPD10
00100d f011      	BREQ PC+3
00100e 940c 1016 	JMP _0x2000014
                +
001010 e0e0     +LDI R30 , LOW ( 0x3F800000 )
001011 e0f0     +LDI R31 , HIGH ( 0x3F800000 )
001012 e860     +LDI R22 , BYTE3 ( 0x3F800000 )
001013 e37f     +LDI R23 , BYTE4 ( 0x3F800000 )
                 	__GETD1N 0x3F800000
001014 962c      	ADIW R28,12
001015 9508      	RET
                 _0x2000014:
                +
001016 85a8     +LDD R26 , Y + 8
001017 85b9     +LDD R27 , Y + 8 + 1
001018 858a     +LDD R24 , Y + 8 + 2
001019 859b     +LDD R25 , Y + 8 + 3
                 	__GETD2S 8
00101a 940e 0e6e 	CALL _log
                +
00101c 81ac     +LDD R26 , Y + 4
00101d 81bd     +LDD R27 , Y + 4 + 1
00101e 818e     +LDD R24 , Y + 4 + 2
00101f 819f     +LDD R25 , Y + 4 + 3
                 	__GETD2S 4
001020 940e 1512 	CALL __MULF12
001022 01df      	MOVW R26,R30
001023 01cb      	MOVW R24,R22
001024 940e 0f1f 	CALL _exp
001026 962c      	ADIW R28,12
001027 9508      	RET
                 _0x2000013:
                +
001028 81ec     +LDD R30 , Y + 4
001029 81fd     +LDD R31 , Y + 4 + 1
00102a 816e     +LDD R22 , Y + 4 + 2
00102b 817f     +LDD R23 , Y + 4 + 3
                 	__GETD1S 4
00102c 01de      	MOVW R26,R28
00102d 940e 1451 	CALL __CFD1
00102f 940e 16c8 	CALL __PUTDP1
001031 940e 16cd 	CALL __GETD1S0
001033 940e 1488 	CALL __CDF1
001035 01df      	MOVW R26,R30
001036 01cb      	MOVW R24,R22
                +
001037 81ec     +LDD R30 , Y + 4
001038 81fd     +LDD R31 , Y + 4 + 1
001039 816e     +LDD R22 , Y + 4 + 2
00103a 817f     +LDD R23 , Y + 4 + 3
                 	__GETD1S 4
00103b 940e 171f 	CALL __CPD12
00103d f411      	BRNE PC+3
00103e 940c 1046 	JMP _0x2000015
                +
001040 e0e0     +LDI R30 , LOW ( 0x0 )
001041 e0f0     +LDI R31 , HIGH ( 0x0 )
001042 e060     +LDI R22 , BYTE3 ( 0x0 )
001043 e070     +LDI R23 , BYTE4 ( 0x0 )
                 	__GETD1N 0x0
001044 962c      	ADIW R28,12
001045 9508      	RET
                 _0x2000015:
                +
001046 85e8     +LDD R30 , Y + 8
001047 85f9     +LDD R31 , Y + 8 + 1
001048 856a     +LDD R22 , Y + 8 + 2
001049 857b     +LDD R23 , Y + 8 + 3
                 	__GETD1S 8
00104a 940e 141c 	CALL __ANEGF1
00104c 01df      	MOVW R26,R30
00104d 01cb      	MOVW R24,R22
00104e 940e 0e6e 	CALL _log
                +
001050 81ac     +LDD R26 , Y + 4
001051 81bd     +LDD R27 , Y + 4 + 1
001052 818e     +LDD R24 , Y + 4 + 2
001053 819f     +LDD R25 , Y + 4 + 3
                 	__GETD2S 4
001054 940e 1512 	CALL __MULF12
001056 01df      	MOVW R26,R30
001057 01cb      	MOVW R24,R22
001058 940e 0f1f 	CALL _exp
                +
00105a 87e8     +STD Y + 8 , R30
00105b 87f9     +STD Y + 8 + 1 , R31
00105c 876a     +STD Y + 8 + 2 , R22
00105d 877b     +STD Y + 8 + 3 , R23
                 	__PUTD1S 8
00105e 81e8      	LD   R30,Y
00105f 70e1      	ANDI R30,LOW(0x1)
001060 f011      	BREQ PC+3
001061 940c 1069 	JMP _0x2000016
                +
001063 85e8     +LDD R30 , Y + 8
001064 85f9     +LDD R31 , Y + 8 + 1
001065 856a     +LDD R22 , Y + 8 + 2
001066 857b     +LDD R23 , Y + 8 + 3
                 	__GETD1S 8
001067 962c      	ADIW R28,12
001068 9508      	RET
                 _0x2000016:
                +
001069 85e8     +LDD R30 , Y + 8
00106a 85f9     +LDD R31 , Y + 8 + 1
00106b 856a     +LDD R22 , Y + 8 + 2
00106c 857b     +LDD R23 , Y + 8 + 3
                 	__GETD1S 8
00106d 940e 141c 	CALL __ANEGF1
00106f 962c      	ADIW R28,12
001070 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G101:
                 ; .FSTART __lcd_write_nibble_G101
001071 93aa      	ST   -Y,R26
001072 b1eb      	IN   R30,0xB
001073 70ef      	ANDI R30,LOW(0xF)
001074 2fae      	MOV  R26,R30
001075 81e8      	LD   R30,Y
001076 7fe0      	ANDI R30,LOW(0xF0)
001077 2bea      	OR   R30,R26
001078 b9eb      	OUT  0xB,R30
                +
001079 e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
00107a 958a     +DEC R24
00107b f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
00107c 9a2a      	SBI  0x5,2
                +
00107d e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
00107e 958a     +DEC R24
00107f f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
001080 982a      	CBI  0x5,2
                +
001081 e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
001082 958a     +DEC R24
001083 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
001084 9621      	ADIW R28,1
001085 9508      	RET
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
001086 93aa      	ST   -Y,R26
001087 81a8      	LD   R26,Y
001088 940e 1071 	CALL __lcd_write_nibble_G101
00108a 81e8          ld    r30,y
00108b 95e2          swap  r30
00108c 83e8          st    y,r30
00108d 81a8      	LD   R26,Y
00108e 940e 1071 	CALL __lcd_write_nibble_G101
                +
001090 ec88     +LDI R24 , LOW ( 200 )
001091 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
001092 9701     +SBIW R24 , 1
001093 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
001094 9621      	ADIW R28,1
001095 9508      	RET
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
001096 93aa      	ST   -Y,R26
001097 81e8      	LD   R30,Y
001098 e0f0      	LDI  R31,0
001099 50e8      	SUBI R30,LOW(-__base_y_G101)
00109a 4ffb      	SBCI R31,HIGH(-__base_y_G101)
00109b 81e0      	LD   R30,Z
00109c 81a9      	LDD  R26,Y+1
00109d 0fae      	ADD  R26,R30
00109e 940e 1086 	CALL __lcd_write_data
0010a0 81e9      	LDD  R30,Y+1
0010a1 93e0 04fc 	STS  __lcd_x,R30
0010a3 81e8      	LD   R30,Y
0010a4 93e0 04fd 	STS  __lcd_y,R30
0010a6 9622      	ADIW R28,2
0010a7 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
0010a8 e0a2      	LDI  R26,LOW(2)
0010a9 940e 1086 	CALL __lcd_write_data
0010ab e0a3      	LDI  R26,LOW(3)
0010ac e0b0      	LDI  R27,0
0010ad 940e 13f5 	CALL _delay_ms
0010af e0ac      	LDI  R26,LOW(12)
0010b0 940e 1086 	CALL __lcd_write_data
0010b2 e0a1      	LDI  R26,LOW(1)
0010b3 940e 1086 	CALL __lcd_write_data
0010b5 e0a3      	LDI  R26,LOW(3)
0010b6 e0b0      	LDI  R27,0
0010b7 940e 13f5 	CALL _delay_ms
0010b9 e0e0      	LDI  R30,LOW(0)
0010ba 93e0 04fd 	STS  __lcd_y,R30
0010bc 93e0 04fc 	STS  __lcd_x,R30
0010be 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
0010bf 93aa      	ST   -Y,R26
0010c0 81a8      	LD   R26,Y
0010c1 30aa      	CPI  R26,LOW(0xA)
0010c2 f411      	BRNE PC+3
0010c3 940c 10ce 	JMP _0x2020005
0010c5 91e0 04fe 	LDS  R30,__lcd_maxx
0010c7 91a0 04fc 	LDS  R26,__lcd_x
0010c9 17ae      	CP   R26,R30
0010ca f010      	BRLO PC+3
0010cb 940c 10ce 	JMP _0x2020005
0010cd c010      	RJMP _0x2020004
                 _0x2020005:
0010ce e0e0      	LDI  R30,LOW(0)
0010cf 93ea      	ST   -Y,R30
0010d0 91a0 04fd 	LDS  R26,__lcd_y
0010d2 5faf      	SUBI R26,-LOW(1)
0010d3 93a0 04fd 	STS  __lcd_y,R26
0010d5 940e 1096 	CALL _lcd_gotoxy
0010d7 81a8      	LD   R26,Y
0010d8 30aa      	CPI  R26,LOW(0xA)
0010d9 f011      	BREQ PC+3
0010da 940c 10de 	JMP _0x2020007
0010dc 9621      	ADIW R28,1
0010dd 9508      	RET
                 _0x2020007:
                 _0x2020004:
0010de 91e0 04fc 	LDS  R30,__lcd_x
0010e0 5fef      	SUBI R30,-LOW(1)
0010e1 93e0 04fc 	STS  __lcd_x,R30
0010e3 9a28      	SBI  0x5,0
0010e4 81a8      	LD   R26,Y
0010e5 940e 1086 	CALL __lcd_write_data
0010e7 9828      	CBI  0x5,0
0010e8 9621      	ADIW R28,1
0010e9 9508      	RET
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
0010ea 93ba      	ST   -Y,R27
0010eb 93aa      	ST   -Y,R26
0010ec 931a      	ST   -Y,R17
                 _0x2020008:
0010ed 81a9      	LDD  R26,Y+1
0010ee 81ba      	LDD  R27,Y+1+1
0010ef 91ed      	LD   R30,X+
0010f0 83a9      	STD  Y+1,R26
0010f1 83ba      	STD  Y+1+1,R27
0010f2 2f1e      	MOV  R17,R30
0010f3 30e0      	CPI  R30,0
0010f4 f411      	BRNE PC+3
0010f5 940c 10fb 	JMP _0x202000A
0010f7 2fa1      	MOV  R26,R17
0010f8 940e 10bf 	CALL _lcd_putchar
0010fa cff2      	RJMP _0x2020008
                 _0x202000A:
0010fb 8118      	LDD  R17,Y+0
0010fc 9623      	ADIW R28,3
0010fd 9508      	RET
                 ; .FEND
                 _lcd_putsf:
                 ; .FSTART _lcd_putsf
0010fe 93ba      	ST   -Y,R27
0010ff 93aa      	ST   -Y,R26
001100 931a      	ST   -Y,R17
                 _0x202000B:
001101 81e9      	LDD  R30,Y+1
001102 81fa      	LDD  R31,Y+1+1
001103 9631      	ADIW R30,1
001104 83e9      	STD  Y+1,R30
001105 83fa      	STD  Y+1+1,R31
001106 9731      	SBIW R30,1
001107 91e4      	LPM  R30,Z
001108 2f1e      	MOV  R17,R30
001109 30e0      	CPI  R30,0
00110a f411      	BRNE PC+3
00110b 940c 1111 	JMP _0x202000D
00110d 2fa1      	MOV  R26,R17
00110e 940e 10bf 	CALL _lcd_putchar
001110 cff0      	RJMP _0x202000B
                 _0x202000D:
001111 8118      	LDD  R17,Y+0
001112 9623      	ADIW R28,3
001113 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
001114 93aa      	ST   -Y,R26
001115 b1ea      	IN   R30,0xA
001116 6fe0      	ORI  R30,LOW(0xF0)
001117 b9ea      	OUT  0xA,R30
001118 9a22      	SBI  0x4,2
001119 9a20      	SBI  0x4,0
00111a 9a21      	SBI  0x4,1
00111b 982a      	CBI  0x5,2
00111c 9828      	CBI  0x5,0
00111d 9829      	CBI  0x5,1
00111e 81e8      	LD   R30,Y
00111f 93e0 04fe 	STS  __lcd_maxx,R30
001121 58e0      	SUBI R30,-LOW(128)
                +
001122 93e0 04fa+STS __base_y_G101 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G101,2
001124 81e8      	LD   R30,Y
001125 54e0      	SUBI R30,-LOW(192)
                +
001126 93e0 04fb+STS __base_y_G101 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G101,3
001128 e1a4      	LDI  R26,LOW(20)
001129 e0b0      	LDI  R27,0
00112a 940e 13f5 	CALL _delay_ms
00112c e3a0      	LDI  R26,LOW(48)
00112d 940e 1071 	CALL __lcd_write_nibble_G101
                +
00112f e980     +LDI R24 , LOW ( 400 )
001130 e091     +LDI R25 , HIGH ( 400 )
                +__DELAY_USW_LOOP :
001131 9701     +SBIW R24 , 1
001132 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 400
001133 e3a0      	LDI  R26,LOW(48)
001134 940e 1071 	CALL __lcd_write_nibble_G101
                +
001136 e980     +LDI R24 , LOW ( 400 )
001137 e091     +LDI R25 , HIGH ( 400 )
                +__DELAY_USW_LOOP :
001138 9701     +SBIW R24 , 1
001139 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 400
00113a e3a0      	LDI  R26,LOW(48)
00113b 940e 1071 	CALL __lcd_write_nibble_G101
                +
00113d e980     +LDI R24 , LOW ( 400 )
00113e e091     +LDI R25 , HIGH ( 400 )
                +__DELAY_USW_LOOP :
00113f 9701     +SBIW R24 , 1
001140 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 400
001141 e2a0      	LDI  R26,LOW(32)
001142 940e 1071 	CALL __lcd_write_nibble_G101
                +
001144 e980     +LDI R24 , LOW ( 400 )
001145 e091     +LDI R25 , HIGH ( 400 )
                +__DELAY_USW_LOOP :
001146 9701     +SBIW R24 , 1
001147 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 400
001148 e2a8      	LDI  R26,LOW(40)
001149 940e 1086 	CALL __lcd_write_data
00114b e0a4      	LDI  R26,LOW(4)
00114c 940e 1086 	CALL __lcd_write_data
00114e e8a5      	LDI  R26,LOW(133)
00114f 940e 1086 	CALL __lcd_write_data
001151 e0a6      	LDI  R26,LOW(6)
001152 940e 1086 	CALL __lcd_write_data
001154 940e 10a8 	CALL _lcd_clear
001156 9621      	ADIW R28,1
001157 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 _twi_master_init:
                 ; .FSTART _twi_master_init
001158 93ba      	ST   -Y,R27
001159 93aa      	ST   -Y,R26
00115a 931a      	ST   -Y,R17
00115b 9af7      	SBI  0x1E,7
00115c e0e7      	LDI  R30,LOW(7)
00115d 93e0 04f7 	STS  _twi_result,R30
00115f e0e0      	LDI  R30,LOW(0)
001160 93e0 0507 	STS  _twi_slave_rx_handler_G102,R30
001162 93e0 0508 	STS  _twi_slave_rx_handler_G102+1,R30
001164 93e0 0509 	STS  _twi_slave_tx_handler_G102,R30
001166 93e0 050a 	STS  _twi_slave_tx_handler_G102+1,R30
001168 9a44      	SBI  0x8,4
001169 9a45      	SBI  0x8,5
00116a 93e0 00bc 	STS  188,R30
00116c 91e0 00b9 	LDS  R30,185
00116e 7fec      	ANDI R30,LOW(0xFC)
00116f 93e0 00b9 	STS  185,R30
001171 81e9      	LDD  R30,Y+1
001172 81fa      	LDD  R31,Y+1+1
001173 e4a0      	LDI  R26,LOW(8000)
001174 e1bf      	LDI  R27,HIGH(8000)
001175 940e 1665 	CALL __DIVW21U
001177 2f1e      	MOV  R17,R30
001178 3018      	CPI  R17,8
001179 f410      	BRSH PC+3
00117a 940c 117d 	JMP _0x2040006
00117c 5018      	SUBI R17,LOW(8)
                 _0x2040006:
00117d 9310 00b8 	STS  184,R17
00117f 91e0 00bc 	LDS  R30,188
001181 78e0      	ANDI R30,LOW(0x80)
001182 64e5      	ORI  R30,LOW(0x45)
001183 93e0 00bc 	STS  188,R30
001185 8118      	LDD  R17,Y+0
001186 9623      	ADIW R28,3
001187 9508      	RET
                 ; .FEND
                 _twi_master_trans:
                 ; .FSTART _twi_master_trans
001188 93aa      	ST   -Y,R26
001189 9724      	SBIW R28,4
00118a 9bf7      	SBIS 0x1E,7
00118b c07c      	RJMP _0x2040007
00118c 85ea      	LDD  R30,Y+10
00118d 0fee      	LSL  R30
00118e 93e0 04ff 	STS  _slave_address_G102,R30
001190 85e8      	LDD  R30,Y+8
001191 85f9      	LDD  R31,Y+8+1
001192 93e0 0500 	STS  _twi_tx_buffer_G102,R30
001194 93f0 0501 	STS  _twi_tx_buffer_G102+1,R31
001196 e0e0      	LDI  R30,LOW(0)
001197 93e0 04f5 	STS  _twi_tx_index,R30
001199 81ef      	LDD  R30,Y+7
00119a 93e0 0502 	STS  _bytes_to_tx_G102,R30
00119c 81ed      	LDD  R30,Y+5
00119d 81fe      	LDD  R31,Y+5+1
00119e 93e0 0503 	STS  _twi_rx_buffer_G102,R30
0011a0 93f0 0504 	STS  _twi_rx_buffer_G102+1,R31
0011a2 e0e0      	LDI  R30,LOW(0)
0011a3 93e0 04f6 	STS  _twi_rx_index,R30
0011a5 81ec      	LDD  R30,Y+4
0011a6 93e0 0505 	STS  _bytes_to_rx_G102,R30
0011a8 e0e6      	LDI  R30,LOW(6)
0011a9 93e0 04f7 	STS  _twi_result,R30
0011ab 9478      	sei
0011ac 81ef      	LDD  R30,Y+7
0011ad 30e0      	CPI  R30,0
0011ae f411      	BRNE PC+3
0011af 940c 11cc 	JMP _0x2040008
0011b1 85e8      	LDD  R30,Y+8
0011b2 85f9      	LDD  R31,Y+8+1
0011b3 9730      	SBIW R30,0
0011b4 f011      	BREQ PC+3
0011b5 940c 11ba 	JMP _0x2040009
0011b7 e0e0      	LDI  R30,LOW(0)
0011b8 962b      	ADIW R28,11
0011b9 9508      	RET
                 _0x2040009:
0011ba 81ec      	LDD  R30,Y+4
0011bb 30e0      	CPI  R30,0
0011bc f411      	BRNE PC+3
0011bd 940c 11c6 	JMP _0x204000B
0011bf 81ad      	LDD  R26,Y+5
0011c0 81be      	LDD  R27,Y+5+1
0011c1 9710      	SBIW R26,0
0011c2 f011      	BREQ PC+3
0011c3 940c 11c6 	JMP _0x204000B
0011c5 c001      	RJMP _0x204000C
                 _0x204000B:
0011c6 c003      	RJMP _0x204000A
                 _0x204000C:
0011c7 e0e0      	LDI  R30,LOW(0)
0011c8 962b      	ADIW R28,11
0011c9 9508      	RET
                 _0x204000A:
0011ca 9af6      	SBI  0x1E,6
0011cb c014      	RJMP _0x204000F
                 _0x2040008:
0011cc 81ec      	LDD  R30,Y+4
0011cd 30e0      	CPI  R30,0
0011ce f411      	BRNE PC+3
0011cf 940c 1201 	JMP _0x2040010
0011d1 81ed      	LDD  R30,Y+5
0011d2 81fe      	LDD  R31,Y+5+1
0011d3 9730      	SBIW R30,0
0011d4 f011      	BREQ PC+3
0011d5 940c 11da 	JMP _0x2040011
0011d7 e0e0      	LDI  R30,LOW(0)
0011d8 962b      	ADIW R28,11
0011d9 9508      	RET
                 _0x2040011:
0011da 91e0 04ff 	LDS  R30,_slave_address_G102
0011dc 60e1      	ORI  R30,1
0011dd 93e0 04ff 	STS  _slave_address_G102,R30
0011df 98f6      	CBI  0x1E,6
                 _0x204000F:
0011e0 98f7      	CBI  0x1E,7
0011e1 91e0 00bc 	LDS  R30,188
0011e3 70ef      	ANDI R30,LOW(0xF)
0011e4 6ae0      	ORI  R30,LOW(0xA0)
0011e5 93e0 00bc 	STS  188,R30
                +
0011e7 e2e0     +LDI R30 , LOW ( 0x7A120 )
0011e8 eaf1     +LDI R31 , HIGH ( 0x7A120 )
0011e9 e067     +LDI R22 , BYTE3 ( 0x7A120 )
0011ea e070     +LDI R23 , BYTE4 ( 0x7A120 )
                 	__GETD1N 0x7A120
0011eb 940e 16d7 	CALL __PUTD1S0
                 _0x2040016:
0011ed 99f7      	SBIC 0x1E,7
0011ee c012      	RJMP _0x2040018
0011ef 940e 16cd 	CALL __GETD1S0
0011f1 9731      	SBIW R30,1
0011f2 4060      	SBCI R22,0
0011f3 4070      	SBCI R23,0
0011f4 940e 16d7 	CALL __PUTD1S0
0011f6 f011      	BREQ PC+3
0011f7 940c 1200 	JMP _0x2040019
0011f9 e0e5      	LDI  R30,LOW(5)
0011fa 93e0 04f7 	STS  _twi_result,R30
0011fc 9af7      	SBI  0x1E,7
0011fd e0e0      	LDI  R30,LOW(0)
0011fe 962b      	ADIW R28,11
0011ff 9508      	RET
                 _0x2040019:
001200 cfec      	RJMP _0x2040016
                 _0x2040018:
                 _0x2040010:
001201 91a0 04f7 	LDS  R26,_twi_result
001203 e0e0      	LDI  R30,LOW(0)
001204 940e 162e 	CALL __EQB12
001206 962b      	ADIW R28,11
001207 9508      	RET
                 _0x2040007:
001208 e0e0      	LDI  R30,LOW(0)
001209 962b      	ADIW R28,11
00120a 9508      	RET
                 ; .FEND
                 _twi_int_handler:
                 ; .FSTART _twi_int_handler
00120b 920a      	ST   -Y,R0
00120c 921a      	ST   -Y,R1
00120d 92fa      	ST   -Y,R15
00120e 936a      	ST   -Y,R22
00120f 937a      	ST   -Y,R23
001210 938a      	ST   -Y,R24
001211 939a      	ST   -Y,R25
001212 93aa      	ST   -Y,R26
001213 93ba      	ST   -Y,R27
001214 93ea      	ST   -Y,R30
001215 93fa      	ST   -Y,R31
001216 b7ef      	IN   R30,SREG
001217 93ea      	ST   -Y,R30
001218 940e 1724 	CALL __SAVELOCR6
00121a 9110 04f6 	LDS  R17,_twi_rx_index
00121c 9100 04f5 	LDS  R16,_twi_tx_index
00121e 9130 0502 	LDS  R19,_bytes_to_tx_G102
001220 9120 04f7 	LDS  R18,_twi_result
001222 2fe1      	MOV  R30,R17
001223 91a0 0503 	LDS  R26,_twi_rx_buffer_G102
001225 91b0 0504 	LDS  R27,_twi_rx_buffer_G102+1
001227 e0f0      	LDI  R31,0
001228 0fea      	ADD  R30,R26
001229 1ffb      	ADC  R31,R27
00122a 01af      	MOVW R20,R30
00122b 91e0 00b9 	LDS  R30,185
00122d 7fe8      	ANDI R30,LOW(0xF8)
00122e 30e8      	CPI  R30,LOW(0x8)
00122f f011      	BREQ PC+3
001230 940c 1234 	JMP _0x2040023
001232 e020      	LDI  R18,LOW(0)
001233 c004      	RJMP _0x2040024
                 _0x2040023:
001234 31e0      	CPI  R30,LOW(0x10)
001235 f011      	BREQ PC+3
001236 940c 123e 	JMP _0x2040025
                 _0x2040024:
001238 91e0 04ff 	LDS  R30,_slave_address_G102
00123a 93e0 00bb 	STS  187,R30
00123c c01a      	RJMP _0x2040026
00123d c004      	RJMP _0x2040027
                 _0x2040025:
00123e 31e8      	CPI  R30,LOW(0x18)
00123f f011      	BREQ PC+3
001240 940c 1243 	JMP _0x2040028
                 _0x2040027:
001242 c004      	RJMP _0x2040029
                 _0x2040028:
001243 32e8      	CPI  R30,LOW(0x28)
001244 f011      	BREQ PC+3
001245 940c 1273 	JMP _0x204002A
                 _0x2040029:
001247 1703      	CP   R16,R19
001248 f010      	BRLO PC+3
001249 940c 125e 	JMP _0x204002B
00124b 2fe0      	MOV  R30,R16
00124c 5f0f      	SUBI R16,-1
00124d 91a0 0500 	LDS  R26,_twi_tx_buffer_G102
00124f 91b0 0501 	LDS  R27,_twi_tx_buffer_G102+1
001251 e0f0      	LDI  R31,0
001252 0fae      	ADD  R26,R30
001253 1fbf      	ADC  R27,R31
001254 91ec      	LD   R30,X
001255 93e0 00bb 	STS  187,R30
                 _0x2040026:
001257 91e0 00bc 	LDS  R30,188
001259 70ef      	ANDI R30,LOW(0xF)
00125a 68e0      	ORI  R30,0x80
00125b 93e0 00bc 	STS  188,R30
00125d c014      	RJMP _0x204002C
                 _0x204002B:
00125e 91e0 0505 	LDS  R30,_bytes_to_rx_G102
001260 171e      	CP   R17,R30
001261 f010      	BRLO PC+3
001262 940c 1271 	JMP _0x204002D
001264 91e0 04ff 	LDS  R30,_slave_address_G102
001266 60e1      	ORI  R30,1
001267 93e0 04ff 	STS  _slave_address_G102,R30
001269 98f6      	CBI  0x1E,6
00126a 91e0 00bc 	LDS  R30,188
00126c 70ef      	ANDI R30,LOW(0xF)
00126d 6ae0      	ORI  R30,LOW(0xA0)
00126e 93e0 00bc 	STS  188,R30
001270 c16b      	RJMP _0x2040022
                 _0x204002D:
001271 c04f      	RJMP _0x2040030
                 _0x204002C:
001272 c169      	RJMP _0x2040022
                 _0x204002A:
001273 35e0      	CPI  R30,LOW(0x50)
001274 f011      	BREQ PC+3
001275 940c 127d 	JMP _0x2040031
001277 91e0 00bb 	LDS  R30,187
001279 01da      	MOVW R26,R20
00127a 93ec      	ST   X,R30
00127b 5f1f      	SUBI R17,-LOW(1)
00127c c004      	RJMP _0x2040032
                 _0x2040031:
00127d 34e0      	CPI  R30,LOW(0x40)
00127e f011      	BREQ PC+3
00127f 940c 1296 	JMP _0x2040033
                 _0x2040032:
001281 91e0 0505 	LDS  R30,_bytes_to_rx_G102
001283 50e1      	SUBI R30,LOW(1)
001284 171e      	CP   R17,R30
001285 f410      	BRSH PC+3
001286 940c 128f 	JMP _0x2040034
001288 91e0 00bc 	LDS  R30,188
00128a 70ef      	ANDI R30,LOW(0xF)
00128b 68e0      	ORI  R30,0x80
00128c 93e0 00bc 	STS  188,R30
00128e c006      	RJMP _0x2040035
                 _0x2040034:
00128f 91e0 00bc 	LDS  R30,188
001291 70ef      	ANDI R30,LOW(0xF)
001292 6ce0      	ORI  R30,LOW(0xC0)
001293 93e0 00bc 	STS  188,R30
                 _0x2040035:
001295 c146      	RJMP _0x2040022
                 _0x2040033:
001296 35e8      	CPI  R30,LOW(0x58)
001297 f011      	BREQ PC+3
001298 940c 12a0 	JMP _0x2040036
00129a 91e0 00bb 	LDS  R30,187
00129c 01da      	MOVW R26,R20
00129d 93ec      	ST   X,R30
00129e 5f1f      	SUBI R17,-LOW(1)
00129f c004      	RJMP _0x2040037
                 _0x2040036:
0012a0 32e0      	CPI  R30,LOW(0x20)
0012a1 f011      	BREQ PC+3
0012a2 940c 12a5 	JMP _0x2040038
                 _0x2040037:
0012a4 c004      	RJMP _0x2040039
                 _0x2040038:
0012a5 33e0      	CPI  R30,LOW(0x30)
0012a6 f011      	BREQ PC+3
0012a7 940c 12aa 	JMP _0x204003A
                 _0x2040039:
0012a9 c004      	RJMP _0x204003B
                 _0x204003A:
0012aa 34e8      	CPI  R30,LOW(0x48)
0012ab f011      	BREQ PC+3
0012ac 940c 12c9 	JMP _0x204003C
                 _0x204003B:
0012ae 3020      	CPI  R18,0
0012af f011      	BREQ PC+3
0012b0 940c 12c1 	JMP _0x204003D
0012b2 9bf6      	SBIS 0x1E,6
0012b3 c006      	RJMP _0x204003E
0012b4 1703      	CP   R16,R19
0012b5 f010      	BRLO PC+3
0012b6 940c 12b9 	JMP _0x204003F
0012b8 c007      	RJMP _0x2040040
                 _0x204003F:
0012b9 c007      	RJMP _0x2040041
                 _0x204003E:
0012ba 91e0 0505 	LDS  R30,_bytes_to_rx_G102
0012bc 171e      	CP   R17,R30
0012bd f010      	BRLO PC+3
0012be 940c 12c1 	JMP _0x2040042
                 _0x2040040:
0012c0 e024      	LDI  R18,LOW(4)
                 _0x2040042:
                 _0x2040041:
                 _0x204003D:
                 _0x2040030:
0012c1 91e0 00bc 	LDS  R30,188
0012c3 70ef      	ANDI R30,LOW(0xF)
0012c4 6de0      	ORI  R30,LOW(0xD0)
0012c5 93e0 00bc 	STS  188,R30
0012c7 c113      	RJMP _0x2040043
0012c8 c004      	RJMP _0x2040044
                 _0x204003C:
0012c9 33e8      	CPI  R30,LOW(0x38)
0012ca f011      	BREQ PC+3
0012cb 940c 12d6 	JMP _0x2040045
                 _0x2040044:
0012cd e022      	LDI  R18,LOW(2)
0012ce 91e0 00bc 	LDS  R30,188
0012d0 70ef      	ANDI R30,LOW(0xF)
0012d1 68e0      	ORI  R30,0x80
0012d2 93e0 00bc 	STS  188,R30
0012d4 c106      	RJMP _0x2040043
0012d5 c004      	RJMP _0x2040046
                 _0x2040045:
0012d6 36e8      	CPI  R30,LOW(0x68)
0012d7 f011      	BREQ PC+3
0012d8 940c 12db 	JMP _0x2040047
                 _0x2040046:
0012da c004      	RJMP _0x2040048
                 _0x2040047:
0012db 37e8      	CPI  R30,LOW(0x78)
0012dc f011      	BREQ PC+3
0012dd 940c 12e2 	JMP _0x2040049
                 _0x2040048:
0012df e022      	LDI  R18,LOW(2)
0012e0 c00b      	RJMP _0x204004A
0012e1 c004      	RJMP _0x204004B
                 _0x2040049:
0012e2 36e0      	CPI  R30,LOW(0x60)
0012e3 f011      	BREQ PC+3
0012e4 940c 12e7 	JMP _0x204004C
                 _0x204004B:
0012e6 c004      	RJMP _0x204004D
                 _0x204004C:
0012e7 37e0      	CPI  R30,LOW(0x70)
0012e8 f011      	BREQ PC+3
0012e9 940c 1303 	JMP _0x204004E
                 _0x204004D:
0012eb e020      	LDI  R18,LOW(0)
                 _0x204004A:
0012ec e010      	LDI  R17,LOW(0)
0012ed 98f6      	CBI  0x1E,6
0012ee 91e0 0506 	LDS  R30,_twi_rx_buffer_size_G102
0012f0 30e0      	CPI  R30,0
0012f1 f011      	BREQ PC+3
0012f2 940c 12fc 	JMP _0x2040051
0012f4 e021      	LDI  R18,LOW(1)
0012f5 91e0 00bc 	LDS  R30,188
0012f7 70ef      	ANDI R30,LOW(0xF)
0012f8 68e0      	ORI  R30,0x80
0012f9 93e0 00bc 	STS  188,R30
0012fb c006      	RJMP _0x2040052
                 _0x2040051:
0012fc 91e0 00bc 	LDS  R30,188
0012fe 70ef      	ANDI R30,LOW(0xF)
0012ff 6ce0      	ORI  R30,LOW(0xC0)
001300 93e0 00bc 	STS  188,R30
                 _0x2040052:
001302 c0d9      	RJMP _0x2040022
                 _0x204004E:
001303 38e0      	CPI  R30,LOW(0x80)
001304 f011      	BREQ PC+3
001305 940c 1308 	JMP _0x2040053
001307 c004      	RJMP _0x2040054
                 _0x2040053:
001308 39e0      	CPI  R30,LOW(0x90)
001309 f011      	BREQ PC+3
00130a 940c 1339 	JMP _0x2040055
                 _0x2040054:
00130c 9bf6      	SBIS 0x1E,6
00130d c002      	RJMP _0x2040056
00130e e021      	LDI  R18,LOW(1)
00130f c0c5      	RJMP _0x2040057
                 _0x2040056:
001310 91e0 00bb 	LDS  R30,187
001312 01da      	MOVW R26,R20
001313 93ec      	ST   X,R30
001314 5f1f      	SUBI R17,-LOW(1)
001315 91e0 0506 	LDS  R30,_twi_rx_buffer_size_G102
001317 171e      	CP   R17,R30
001318 f010      	BRLO PC+3
001319 940c 1337 	JMP _0x2040058
00131b 91e0 0507 	LDS  R30,_twi_slave_rx_handler_G102
00131d 91f0 0508 	LDS  R31,_twi_slave_rx_handler_G102+1
00131f 9730      	SBIW R30,0
001320 f011      	BREQ PC+3
001321 940c 1325 	JMP _0x2040059
001323 e026      	LDI  R18,LOW(6)
001324 c0b0      	RJMP _0x2040057
                 _0x2040059:
001325 e0a0      	LDI  R26,LOW(0)
                +
001326 91e0 0507+LDS R30 , _twi_slave_rx_handler_G102 + ( 0 )
001328 91f0 0508+LDS R31 , _twi_slave_rx_handler_G102 + ( 0 ) + 1
00132a 9509     +ICALL
                 	__CALL1MN _twi_slave_rx_handler_G102,0
00132b 30e0      	CPI  R30,0
00132c f411      	BRNE PC+3
00132d 940c 1336 	JMP _0x204005A
00132f 91e0 00bc 	LDS  R30,188
001331 70ef      	ANDI R30,LOW(0xF)
001332 6ce0      	ORI  R30,LOW(0xC0)
001333 93e0 00bc 	STS  188,R30
001335 c0a6      	RJMP _0x2040022
                 _0x204005A:
001336 c001      	RJMP _0x204005B
                 _0x2040058:
001337 9af6      	SBI  0x1E,6
                 _0x204005B:
001338 c004      	RJMP _0x204005E
                 _0x2040055:
001339 38e8      	CPI  R30,LOW(0x88)
00133a f011      	BREQ PC+3
00133b 940c 133e 	JMP _0x204005F
                 _0x204005E:
00133d c004      	RJMP _0x2040060
                 _0x204005F:
00133e 39e8      	CPI  R30,LOW(0x98)
00133f f011      	BREQ PC+3
001340 940c 1349 	JMP _0x2040061
                 _0x2040060:
001342 91e0 00bc 	LDS  R30,188
001344 70ef      	ANDI R30,LOW(0xF)
001345 68e0      	ORI  R30,0x80
001346 93e0 00bc 	STS  188,R30
001348 c093      	RJMP _0x2040022
                 _0x2040061:
001349 3ae0      	CPI  R30,LOW(0xA0)
00134a f011      	BREQ PC+3
00134b 940c 1365 	JMP _0x2040062
00134d 91e0 00bc 	LDS  R30,188
00134f 70ef      	ANDI R30,LOW(0xF)
001350 6ce0      	ORI  R30,LOW(0xC0)
001351 93e0 00bc 	STS  188,R30
001353 9af7      	SBI  0x1E,7
001354 91e0 0507 	LDS  R30,_twi_slave_rx_handler_G102
001356 91f0 0508 	LDS  R31,_twi_slave_rx_handler_G102+1
001358 9730      	SBIW R30,0
001359 f411      	BRNE PC+3
00135a 940c 1363 	JMP _0x2040065
00135c e0a1      	LDI  R26,LOW(1)
                +
00135d 91e0 0507+LDS R30 , _twi_slave_rx_handler_G102 + ( 0 )
00135f 91f0 0508+LDS R31 , _twi_slave_rx_handler_G102 + ( 0 ) + 1
001361 9509     +ICALL
                 	__CALL1MN _twi_slave_rx_handler_G102,0
001362 c001      	RJMP _0x2040066
                 _0x2040065:
001363 e026      	LDI  R18,LOW(6)
                 _0x2040066:
001364 c077      	RJMP _0x2040022
                 _0x2040062:
001365 3be0      	CPI  R30,LOW(0xB0)
001366 f011      	BREQ PC+3
001367 940c 136b 	JMP _0x2040067
001369 e022      	LDI  R18,LOW(2)
00136a c004      	RJMP _0x2040068
                 _0x2040067:
00136b 3ae8      	CPI  R30,LOW(0xA8)
00136c f011      	BREQ PC+3
00136d 940c 138a 	JMP _0x2040069
                 _0x2040068:
00136f 91e0 0509 	LDS  R30,_twi_slave_tx_handler_G102
001371 91f0 050a 	LDS  R31,_twi_slave_tx_handler_G102+1
001373 9730      	SBIW R30,0
001374 f411      	BRNE PC+3
001375 940c 1385 	JMP _0x204006A
001377 e0a0      	LDI  R26,LOW(0)
                +
001378 91e0 0509+LDS R30 , _twi_slave_tx_handler_G102 + ( 0 )
00137a 91f0 050a+LDS R31 , _twi_slave_tx_handler_G102 + ( 0 ) + 1
00137c 9509     +ICALL
                 	__CALL1MN _twi_slave_tx_handler_G102,0
00137d 2f3e      	MOV  R19,R30
00137e 30e0      	CPI  R30,0
00137f f011      	BREQ PC+3
001380 940c 1383 	JMP _0x204006B
001382 c002      	RJMP _0x204006C
                 _0x204006B:
001383 e020      	LDI  R18,LOW(0)
001384 c002      	RJMP _0x204006D
                 _0x204006A:
                 _0x204006C:
001385 e026      	LDI  R18,LOW(6)
001386 c04e      	RJMP _0x2040057
                 _0x204006D:
001387 e000      	LDI  R16,LOW(0)
001388 98f6      	CBI  0x1E,6
001389 c004      	RJMP _0x2040070
                 _0x2040069:
00138a 3be8      	CPI  R30,LOW(0xB8)
00138b f011      	BREQ PC+3
00138c 940c 13b1 	JMP _0x2040071
                 _0x2040070:
00138e 9bf6      	SBIS 0x1E,6
00138f c002      	RJMP _0x2040072
001390 e021      	LDI  R18,LOW(1)
001391 c043      	RJMP _0x2040057
                 _0x2040072:
001392 2fe0      	MOV  R30,R16
001393 5f0f      	SUBI R16,-1
001394 91a0 0500 	LDS  R26,_twi_tx_buffer_G102
001396 91b0 0501 	LDS  R27,_twi_tx_buffer_G102+1
001398 e0f0      	LDI  R31,0
001399 0fae      	ADD  R26,R30
00139a 1fbf      	ADC  R27,R31
00139b 91ec      	LD   R30,X
00139c 93e0 00bb 	STS  187,R30
00139e 1703      	CP   R16,R19
00139f f010      	BRLO PC+3
0013a0 940c 13a9 	JMP _0x2040073
0013a2 91e0 00bc 	LDS  R30,188
0013a4 70ef      	ANDI R30,LOW(0xF)
0013a5 6ce0      	ORI  R30,LOW(0xC0)
0013a6 93e0 00bc 	STS  188,R30
0013a8 c007      	RJMP _0x2040074
                 _0x2040073:
0013a9 9af6      	SBI  0x1E,6
0013aa 91e0 00bc 	LDS  R30,188
0013ac 70ef      	ANDI R30,LOW(0xF)
0013ad 68e0      	ORI  R30,0x80
0013ae 93e0 00bc 	STS  188,R30
                 _0x2040074:
0013b0 c02b      	RJMP _0x2040022
                 _0x2040071:
0013b1 3ce0      	CPI  R30,LOW(0xC0)
0013b2 f011      	BREQ PC+3
0013b3 940c 13b6 	JMP _0x2040077
0013b5 c004      	RJMP _0x2040078
                 _0x2040077:
0013b6 3ce8      	CPI  R30,LOW(0xC8)
0013b7 f011      	BREQ PC+3
0013b8 940c 13d0 	JMP _0x2040079
                 _0x2040078:
0013ba 91e0 00bc 	LDS  R30,188
0013bc 70ef      	ANDI R30,LOW(0xF)
0013bd 6ce0      	ORI  R30,LOW(0xC0)
0013be 93e0 00bc 	STS  188,R30
0013c0 91e0 0509 	LDS  R30,_twi_slave_tx_handler_G102
0013c2 91f0 050a 	LDS  R31,_twi_slave_tx_handler_G102+1
0013c4 9730      	SBIW R30,0
0013c5 f411      	BRNE PC+3
0013c6 940c 13ce 	JMP _0x204007A
0013c8 e0a1      	LDI  R26,LOW(1)
                +
0013c9 91e0 0509+LDS R30 , _twi_slave_tx_handler_G102 + ( 0 )
0013cb 91f0 050a+LDS R31 , _twi_slave_tx_handler_G102 + ( 0 ) + 1
0013cd 9509     +ICALL
                 	__CALL1MN _twi_slave_tx_handler_G102,0
                 _0x204007A:
0013ce c00c      	RJMP _0x2040043
0013cf c004      	RJMP _0x204007B
                 _0x2040079:
0013d0 30e0      	CPI  R30,0
0013d1 f011      	BREQ PC+3
0013d2 940c 13dc 	JMP _0x2040022
                 _0x204007B:
0013d4 e023      	LDI  R18,LOW(3)
                 _0x2040057:
0013d5 91e0 00bc 	LDS  R30,188
0013d7 70ef      	ANDI R30,LOW(0xF)
0013d8 6de0      	ORI  R30,LOW(0xD0)
0013d9 93e0 00bc 	STS  188,R30
                 _0x2040043:
0013db 9af7      	SBI  0x1E,7
                 _0x2040022:
0013dc 9310 04f6 	STS  _twi_rx_index,R17
0013de 9300 04f5 	STS  _twi_tx_index,R16
0013e0 9320 04f7 	STS  _twi_result,R18
0013e2 9330 0502 	STS  _bytes_to_tx_G102,R19
0013e4 940e 172b 	CALL __LOADLOCR6
0013e6 9626      	ADIW R28,6
0013e7 91e9      	LD   R30,Y+
0013e8 bfef      	OUT  SREG,R30
0013e9 91f9      	LD   R31,Y+
0013ea 91e9      	LD   R30,Y+
0013eb 91b9      	LD   R27,Y+
0013ec 91a9      	LD   R26,Y+
0013ed 9199      	LD   R25,Y+
0013ee 9189      	LD   R24,Y+
0013ef 9179      	LD   R23,Y+
0013f0 9169      	LD   R22,Y+
0013f1 90f9      	LD   R15,Y+
0013f2 9019      	LD   R1,Y+
0013f3 9009      	LD   R0,Y+
0013f4 9518      	RETI
                 ; .FEND
                 
                 	.CSEG
                 
                 	.DSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.ESEG
                 _etemp:
000000           	.BYTE 0x2
                 _eCod0:
000002           	.BYTE 0x1
                 _eCod1:
000003           	.BYTE 0x1
                 
                 	.DSEG
                 _dataLed:
000300           	.BYTE 0x60
                 _v:
000360           	.BYTE 0x2
                 _co2led:
000362           	.BYTE 0x2
                 _vled:
000364           	.BYTE 0x2
                 _t1:
000366           	.BYTE 0x2
                 _xxx:
000368           	.BYTE 0x4
                 _xxx1:
00036c           	.BYTE 0x4
                 _txBuffer:
000370           	.BYTE 0x100
                 _txRdIndex:
000470           	.BYTE 0x1
                 _co2s:
000471           	.BYTE 0x7
                 _vs:
000478           	.BYTE 0x6
                 _t1s:
00047e           	.BYTE 0x6
                 _t2s:
000484           	.BYTE 0x6
                 _ps:
00048a           	.BYTE 0x7
                 _twi_eeprom:
000491           	.BYTE 0x16
                 _twi_adr:
0004a7           	.BYTE 0x2
                 _ac1:
0004a9           	.BYTE 0x2
                 _ac2:
0004ab           	.BYTE 0x2
                 _ac3:
0004ad           	.BYTE 0x2
                 _b1:
0004af           	.BYTE 0x2
                 _b2:
0004b1           	.BYTE 0x2
                 _mb:
0004b3           	.BYTE 0x2
                 _mc:
0004b5           	.BYTE 0x2
                 _md:
0004b7           	.BYTE 0x2
                 _ac4:
0004b9           	.BYTE 0x2
                 _ac5:
0004bb           	.BYTE 0x2
                 _ac6:
0004bd           	.BYTE 0x2
                 _ut:
0004bf           	.BYTE 0x4
                 _x1:
0004c3           	.BYTE 0x4
                 _x2:
0004c7           	.BYTE 0x4
                 _b5:
0004cb           	.BYTE 0x4
                 _t:
0004cf           	.BYTE 0x4
                 _b6:
0004d3           	.BYTE 0x4
                 _x3:
0004d7           	.BYTE 0x4
                 _b3:
0004db           	.BYTE 0x4
                 _pressure:
0004df           	.BYTE 0x4
                 _p:
0004e3           	.BYTE 0x4
                 _b4:
0004e7           	.BYTE 0x4
                 _b7:
0004eb           	.BYTE 0x4
                 _nnn:
0004ef           	.BYTE 0x1
                 _dataDHT:
0004f0           	.BYTE 0x5
                 _twi_tx_index:
0004f5           	.BYTE 0x1
                 _twi_rx_index:
0004f6           	.BYTE 0x1
                 _twi_result:
0004f7           	.BYTE 0x1
                 __base_y_G101:
0004f8           	.BYTE 0x4
                 __lcd_x:
0004fc           	.BYTE 0x1
                 __lcd_y:
0004fd           	.BYTE 0x1
                 __lcd_maxx:
0004fe           	.BYTE 0x1
                 _slave_address_G102:
0004ff           	.BYTE 0x1
                 _twi_tx_buffer_G102:
000500           	.BYTE 0x2
                 _bytes_to_tx_G102:
000502           	.BYTE 0x1
                 _twi_rx_buffer_G102:
000503           	.BYTE 0x2
                 _bytes_to_rx_G102:
000505           	.BYTE 0x1
                 _twi_rx_buffer_size_G102:
000506           	.BYTE 0x1
                 _twi_slave_rx_handler_G102:
000507           	.BYTE 0x2
                 _twi_slave_tx_handler_G102:
000509           	.BYTE 0x2
                 __seed_G103:
00050b           	.BYTE 0x4
                 
                 	.CSEG
                 
                 	.CSEG
                 _delay_ms:
0013f5 9610      	adiw r26,0
0013f6 f039      	breq __delay_ms1
                 __delay_ms0:
                +
0013f7 ea80     +LDI R24 , LOW ( 0xFA0 )
0013f8 e09f     +LDI R25 , HIGH ( 0xFA0 )
                +__DELAY_USW_LOOP :
0013f9 9701     +SBIW R24 , 1
0013fa f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xFA0
0013fb 95a8      	wdr
0013fc 9711      	sbiw r26,1
0013fd f7c9      	brne __delay_ms0
                 __delay_ms1:
0013fe 9508      	ret
                 
                 _frexp:
0013ff 91e9      	LD   R30,Y+
001400 91f9      	LD   R31,Y+
001401 9169      	LD   R22,Y+
001402 9179      	LD   R23,Y+
001403 fb77      	BST  R23,7
001404 0f66      	LSL  R22
001405 1f77      	ROL  R23
001406 2788      	CLR  R24
001407 577e      	SUBI R23,0x7E
001408 0b88      	SBC  R24,R24
001409 937d      	ST   X+,R23
00140a 938c      	ST   X,R24
00140b e77e      	LDI  R23,0x7E
00140c 9576      	LSR  R23
00140d 9567      	ROR  R22
00140e f06e      	BRTS __ANEGF1
00140f 9508      	RET
                 
                 _ldexp:
001410 91e9      	LD   R30,Y+
001411 91f9      	LD   R31,Y+
001412 9169      	LD   R22,Y+
001413 9179      	LD   R23,Y+
001414 fb77      	BST  R23,7
001415 0f66      	LSL  R22
001416 1f77      	ROL  R23
001417 0f7a      	ADD  R23,R26
001418 9576      	LSR  R23
001419 9567      	ROR  R22
00141a f00e      	BRTS __ANEGF1
00141b 9508      	RET
                 
                 __ANEGF1:
00141c 9730      	SBIW R30,0
00141d 4060      	SBCI R22,0
00141e 4070      	SBCI R23,0
00141f f009      	BREQ __ANEGF10
001420 5870      	SUBI R23,0x80
                 __ANEGF10:
001421 9508      	RET
                 
                 __ROUND_REPACK:
001422 2355      	TST  R21
001423 f442      	BRPL __REPACK
001424 3850      	CPI  R21,0x80
001425 f411      	BRNE __ROUND_REPACK0
001426 ffe0      	SBRS R30,0
001427 c004      	RJMP __REPACK
                 __ROUND_REPACK0:
001428 9631      	ADIW R30,1
001429 1f69      	ADC  R22,R25
00142a 1f79      	ADC  R23,R25
00142b f06b      	BRVS __REPACK1
                 
                 __REPACK:
00142c e850      	LDI  R21,0x80
00142d 2757      	EOR  R21,R23
00142e f411      	BRNE __REPACK0
00142f 935f      	PUSH R21
001430 c0cf      	RJMP __ZERORES
                 __REPACK0:
001431 3f5f      	CPI  R21,0xFF
001432 f031      	BREQ __REPACK1
001433 0f66      	LSL  R22
001434 0c00      	LSL  R0
001435 9557      	ROR  R21
001436 9567      	ROR  R22
001437 2f75      	MOV  R23,R21
001438 9508      	RET
                 __REPACK1:
001439 935f      	PUSH R21
00143a 2000      	TST  R0
00143b f00a      	BRMI __REPACK2
00143c c0cf      	RJMP __MAXRES
                 __REPACK2:
00143d c0c8      	RJMP __MINRES
                 
                 __UNPACK:
00143e e850      	LDI  R21,0x80
00143f 2e19      	MOV  R1,R25
001440 2215      	AND  R1,R21
001441 0f88      	LSL  R24
001442 1f99      	ROL  R25
001443 2795      	EOR  R25,R21
001444 0f55      	LSL  R21
001445 9587      	ROR  R24
                 
                 __UNPACK1:
001446 e850      	LDI  R21,0x80
001447 2e07      	MOV  R0,R23
001448 2205      	AND  R0,R21
001449 0f66      	LSL  R22
00144a 1f77      	ROL  R23
00144b 2775      	EOR  R23,R21
00144c 0f55      	LSL  R21
00144d 9567      	ROR  R22
00144e 9508      	RET
                 
                 __CFD1U:
00144f 9468      	SET
001450 c001      	RJMP __CFD1U0
                 __CFD1:
001451 94e8      	CLT
                 __CFD1U0:
001452 935f      	PUSH R21
001453 dff2      	RCALL __UNPACK1
001454 3870      	CPI  R23,0x80
001455 f018      	BRLO __CFD10
001456 3f7f      	CPI  R23,0xFF
001457 f408      	BRCC __CFD10
001458 c0a7      	RJMP __ZERORES
                 __CFD10:
001459 e156      	LDI  R21,22
00145a 1b57      	SUB  R21,R23
00145b f4aa      	BRPL __CFD11
00145c 9551      	NEG  R21
00145d 3058      	CPI  R21,8
00145e f40e      	BRTC __CFD19
00145f 3059      	CPI  R21,9
                 __CFD19:
001460 f030      	BRLO __CFD17
001461 efef      	SER  R30
001462 efff      	SER  R31
001463 ef6f      	SER  R22
001464 e77f      	LDI  R23,0x7F
001465 f977      	BLD  R23,7
001466 c01a      	RJMP __CFD15
                 __CFD17:
001467 2777      	CLR  R23
001468 2355      	TST  R21
001469 f0b9      	BREQ __CFD15
                 __CFD18:
00146a 0fee      	LSL  R30
00146b 1fff      	ROL  R31
00146c 1f66      	ROL  R22
00146d 1f77      	ROL  R23
00146e 955a      	DEC  R21
00146f f7d1      	BRNE __CFD18
001470 c010      	RJMP __CFD15
                 __CFD11:
001471 2777      	CLR  R23
                 __CFD12:
001472 3058      	CPI  R21,8
001473 f028      	BRLO __CFD13
001474 2fef      	MOV  R30,R31
001475 2ff6      	MOV  R31,R22
001476 2f67      	MOV  R22,R23
001477 5058      	SUBI R21,8
001478 cff9      	RJMP __CFD12
                 __CFD13:
001479 2355      	TST  R21
00147a f031      	BREQ __CFD15
                 __CFD14:
00147b 9576      	LSR  R23
00147c 9567      	ROR  R22
00147d 95f7      	ROR  R31
00147e 95e7      	ROR  R30
00147f 955a      	DEC  R21
001480 f7d1      	BRNE __CFD14
                 __CFD15:
001481 2000      	TST  R0
001482 f40a      	BRPL __CFD16
001483 d154      	RCALL __ANEGD1
                 __CFD16:
001484 915f      	POP  R21
001485 9508      	RET
                 
                 __CDF1U:
001486 9468      	SET
001487 c001      	RJMP __CDF1U0
                 __CDF1:
001488 94e8      	CLT
                 __CDF1U0:
001489 9730      	SBIW R30,0
00148a 4060      	SBCI R22,0
00148b 4070      	SBCI R23,0
00148c f0b1      	BREQ __CDF10
00148d 2400      	CLR  R0
00148e f026      	BRTS __CDF11
00148f 2377      	TST  R23
001490 f412      	BRPL __CDF11
001491 9400      	COM  R0
001492 d145      	RCALL __ANEGD1
                 __CDF11:
001493 2e17      	MOV  R1,R23
001494 e17e      	LDI  R23,30
001495 2011      	TST  R1
                 __CDF12:
001496 f032      	BRMI __CDF13
001497 957a      	DEC  R23
001498 0fee      	LSL  R30
001499 1fff      	ROL  R31
00149a 1f66      	ROL  R22
00149b 1c11      	ROL  R1
00149c cff9      	RJMP __CDF12
                 __CDF13:
00149d 2fef      	MOV  R30,R31
00149e 2ff6      	MOV  R31,R22
00149f 2d61      	MOV  R22,R1
0014a0 935f      	PUSH R21
0014a1 df8a      	RCALL __REPACK
0014a2 915f      	POP  R21
                 __CDF10:
0014a3 9508      	RET
                 
                 __SWAPACC:
0014a4 934f      	PUSH R20
0014a5 01af      	MOVW R20,R30
0014a6 01fd      	MOVW R30,R26
0014a7 01da      	MOVW R26,R20
0014a8 01ab      	MOVW R20,R22
0014a9 01bc      	MOVW R22,R24
0014aa 01ca      	MOVW R24,R20
0014ab 2d40      	MOV  R20,R0
0014ac 2c01      	MOV  R0,R1
0014ad 2e14      	MOV  R1,R20
0014ae 914f      	POP  R20
0014af 9508      	RET
                 
                 __UADD12:
0014b0 0fea      	ADD  R30,R26
0014b1 1ffb      	ADC  R31,R27
0014b2 1f68      	ADC  R22,R24
0014b3 9508      	RET
                 
                 __NEGMAN1:
0014b4 95e0      	COM  R30
0014b5 95f0      	COM  R31
0014b6 9560      	COM  R22
0014b7 5fef      	SUBI R30,-1
0014b8 4fff      	SBCI R31,-1
0014b9 4f6f      	SBCI R22,-1
0014ba 9508      	RET
                 
                 __SUBF12:
0014bb 935f      	PUSH R21
0014bc df81      	RCALL __UNPACK
0014bd 3890      	CPI  R25,0x80
0014be f171      	BREQ __ADDF129
0014bf e850      	LDI  R21,0x80
0014c0 2615      	EOR  R1,R21
                 
0014c1 c004      	RJMP __ADDF120
                 
                 __ADDF12:
0014c2 935f      	PUSH R21
0014c3 df7a      	RCALL __UNPACK
0014c4 3890      	CPI  R25,0x80
0014c5 f139      	BREQ __ADDF129
                 
                 __ADDF120:
0014c6 3870      	CPI  R23,0x80
0014c7 f121      	BREQ __ADDF128
                 __ADDF121:
0014c8 2f57      	MOV  R21,R23
0014c9 1b59      	SUB  R21,R25
0014ca f12b      	BRVS __ADDF1211
0014cb f412      	BRPL __ADDF122
0014cc dfd7      	RCALL __SWAPACC
0014cd cffa      	RJMP __ADDF121
                 __ADDF122:
0014ce 3158      	CPI  R21,24
0014cf f018      	BRLO __ADDF123
0014d0 27aa      	CLR  R26
0014d1 27bb      	CLR  R27
0014d2 2788      	CLR  R24
                 __ADDF123:
0014d3 3058      	CPI  R21,8
0014d4 f028      	BRLO __ADDF124
0014d5 2fab      	MOV  R26,R27
0014d6 2fb8      	MOV  R27,R24
0014d7 2788      	CLR  R24
0014d8 5058      	SUBI R21,8
0014d9 cff9      	RJMP __ADDF123
                 __ADDF124:
0014da 2355      	TST  R21
0014db f029      	BREQ __ADDF126
                 __ADDF125:
0014dc 9586      	LSR  R24
0014dd 95b7      	ROR  R27
0014de 95a7      	ROR  R26
0014df 955a      	DEC  R21
0014e0 f7d9      	BRNE __ADDF125
                 __ADDF126:
0014e1 2d50      	MOV  R21,R0
0014e2 2551      	EOR  R21,R1
0014e3 f072      	BRMI __ADDF127
0014e4 dfcb      	RCALL __UADD12
0014e5 f438      	BRCC __ADDF129
0014e6 9567      	ROR  R22
0014e7 95f7      	ROR  R31
0014e8 95e7      	ROR  R30
0014e9 9573      	INC  R23
0014ea f413      	BRVC __ADDF129
0014eb c020      	RJMP __MAXRES
                 __ADDF128:
0014ec dfb7      	RCALL __SWAPACC
                 __ADDF129:
0014ed df3e      	RCALL __REPACK
0014ee 915f      	POP  R21
0014ef 9508      	RET
                 __ADDF1211:
0014f0 f7d8      	BRCC __ADDF128
0014f1 cffb      	RJMP __ADDF129
                 __ADDF127:
0014f2 1bea      	SUB  R30,R26
0014f3 0bfb      	SBC  R31,R27
0014f4 0b68      	SBC  R22,R24
0014f5 f051      	BREQ __ZERORES
0014f6 f410      	BRCC __ADDF1210
0014f7 9400      	COM  R0
0014f8 dfbb      	RCALL __NEGMAN1
                 __ADDF1210:
0014f9 2366      	TST  R22
0014fa f392      	BRMI __ADDF129
0014fb 0fee      	LSL  R30
0014fc 1fff      	ROL  R31
0014fd 1f66      	ROL  R22
0014fe 957a      	DEC  R23
0014ff f7cb      	BRVC __ADDF1210
                 
                 __ZERORES:
001500 27ee      	CLR  R30
001501 27ff      	CLR  R31
001502 2766      	CLR  R22
001503 2777      	CLR  R23
001504 915f      	POP  R21
001505 9508      	RET
                 
                 __MINRES:
001506 efef      	SER  R30
001507 efff      	SER  R31
001508 e76f      	LDI  R22,0x7F
001509 ef7f      	SER  R23
00150a 915f      	POP  R21
00150b 9508      	RET
                 
                 __MAXRES:
00150c efef      	SER  R30
00150d efff      	SER  R31
00150e e76f      	LDI  R22,0x7F
00150f e77f      	LDI  R23,0x7F
001510 915f      	POP  R21
001511 9508      	RET
                 
                 __MULF12:
001512 935f      	PUSH R21
001513 df2a      	RCALL __UNPACK
001514 3870      	CPI  R23,0x80
001515 f351      	BREQ __ZERORES
001516 3890      	CPI  R25,0x80
001517 f341      	BREQ __ZERORES
001518 2401      	EOR  R0,R1
001519 9408      	SEC
00151a 1f79      	ADC  R23,R25
00151b f423      	BRVC __MULF124
00151c f31c      	BRLT __ZERORES
                 __MULF125:
00151d 2000      	TST  R0
00151e f33a      	BRMI __MINRES
00151f cfec      	RJMP __MAXRES
                 __MULF124:
001520 920f      	PUSH R0
001521 931f      	PUSH R17
001522 932f      	PUSH R18
001523 933f      	PUSH R19
001524 934f      	PUSH R20
001525 2711      	CLR  R17
001526 2722      	CLR  R18
001527 2799      	CLR  R25
001528 9f68      	MUL  R22,R24
001529 01a0      	MOVW R20,R0
00152a 9f8f      	MUL  R24,R31
00152b 2d30      	MOV  R19,R0
00152c 0d41      	ADD  R20,R1
00152d 1f59      	ADC  R21,R25
00152e 9f6b      	MUL  R22,R27
00152f 0d30      	ADD  R19,R0
001530 1d41      	ADC  R20,R1
001531 1f59      	ADC  R21,R25
001532 9f8e      	MUL  R24,R30
001533 d027      	RCALL __MULF126
001534 9fbf      	MUL  R27,R31
001535 d025      	RCALL __MULF126
001536 9f6a      	MUL  R22,R26
001537 d023      	RCALL __MULF126
001538 9fbe      	MUL  R27,R30
001539 d01d      	RCALL __MULF127
00153a 9faf      	MUL  R26,R31
00153b d01b      	RCALL __MULF127
00153c 9fae      	MUL  R26,R30
00153d 0d11      	ADD  R17,R1
00153e 1f29      	ADC  R18,R25
00153f 1f39      	ADC  R19,R25
001540 1f49      	ADC  R20,R25
001541 1f59      	ADC  R21,R25
001542 2fe3      	MOV  R30,R19
001543 2ff4      	MOV  R31,R20
001544 2f65      	MOV  R22,R21
001545 2f52      	MOV  R21,R18
001546 914f      	POP  R20
001547 913f      	POP  R19
001548 912f      	POP  R18
001549 911f      	POP  R17
00154a 900f      	POP  R0
00154b 2366      	TST  R22
00154c f02a      	BRMI __MULF122
00154d 0f55      	LSL  R21
00154e 1fee      	ROL  R30
00154f 1fff      	ROL  R31
001550 1f66      	ROL  R22
001551 c002      	RJMP __MULF123
                 __MULF122:
001552 9573      	INC  R23
001553 f24b      	BRVS __MULF125
                 __MULF123:
001554 decd      	RCALL __ROUND_REPACK
001555 915f      	POP  R21
001556 9508      	RET
                 
                 __MULF127:
001557 0d10      	ADD  R17,R0
001558 1d21      	ADC  R18,R1
001559 1f39      	ADC  R19,R25
00155a c002      	RJMP __MULF128
                 __MULF126:
00155b 0d20      	ADD  R18,R0
00155c 1d31      	ADC  R19,R1
                 __MULF128:
00155d 1f49      	ADC  R20,R25
00155e 1f59      	ADC  R21,R25
00155f 9508      	RET
                 
                 __DIVF21:
001560 935f      	PUSH R21
001561 dedc      	RCALL __UNPACK
001562 3870      	CPI  R23,0x80
001563 f421      	BRNE __DIVF210
001564 2011      	TST  R1
                 __DIVF211:
001565 f40a      	BRPL __DIVF219
001566 cf9f      	RJMP __MINRES
                 __DIVF219:
001567 cfa4      	RJMP __MAXRES
                 __DIVF210:
001568 3890      	CPI  R25,0x80
001569 f409      	BRNE __DIVF218
                 __DIVF217:
00156a cf95      	RJMP __ZERORES
                 __DIVF218:
00156b 2401      	EOR  R0,R1
00156c 9408      	SEC
00156d 0b97      	SBC  R25,R23
00156e f41b      	BRVC __DIVF216
00156f f3d4      	BRLT __DIVF217
001570 2000      	TST  R0
001571 cff3      	RJMP __DIVF211
                 __DIVF216:
001572 2f79      	MOV  R23,R25
001573 931f      	PUSH R17
001574 932f      	PUSH R18
001575 933f      	PUSH R19
001576 934f      	PUSH R20
001577 2411      	CLR  R1
001578 2711      	CLR  R17
001579 2722      	CLR  R18
00157a 2733      	CLR  R19
00157b 2744      	CLR  R20
00157c 2755      	CLR  R21
00157d e290      	LDI  R25,32
                 __DIVF212:
00157e 17ae      	CP   R26,R30
00157f 07bf      	CPC  R27,R31
001580 0786      	CPC  R24,R22
001581 0741      	CPC  R20,R17
001582 f030      	BRLO __DIVF213
001583 1bae      	SUB  R26,R30
001584 0bbf      	SBC  R27,R31
001585 0b86      	SBC  R24,R22
001586 0b41      	SBC  R20,R17
001587 9408      	SEC
001588 c001      	RJMP __DIVF214
                 __DIVF213:
001589 9488      	CLC
                 __DIVF214:
00158a 1f55      	ROL  R21
00158b 1f22      	ROL  R18
00158c 1f33      	ROL  R19
00158d 1c11      	ROL  R1
00158e 1faa      	ROL  R26
00158f 1fbb      	ROL  R27
001590 1f88      	ROL  R24
001591 1f44      	ROL  R20
001592 959a      	DEC  R25
001593 f751      	BRNE __DIVF212
001594 01f9      	MOVW R30,R18
001595 2d61      	MOV  R22,R1
001596 914f      	POP  R20
001597 913f      	POP  R19
001598 912f      	POP  R18
001599 911f      	POP  R17
00159a 2366      	TST  R22
00159b f032      	BRMI __DIVF215
00159c 0f55      	LSL  R21
00159d 1fee      	ROL  R30
00159e 1fff      	ROL  R31
00159f 1f66      	ROL  R22
0015a0 957a      	DEC  R23
0015a1 f243      	BRVS __DIVF217
                 __DIVF215:
0015a2 de7f      	RCALL __ROUND_REPACK
0015a3 915f      	POP  R21
0015a4 9508      	RET
                 
                 __CMPF12:
0015a5 2399      	TST  R25
0015a6 f09a      	BRMI __CMPF120
0015a7 2377      	TST  R23
0015a8 f042      	BRMI __CMPF121
0015a9 1797      	CP   R25,R23
0015aa f048      	BRLO __CMPF122
0015ab f429      	BRNE __CMPF121
0015ac 17ae      	CP   R26,R30
0015ad 07bf      	CPC  R27,R31
0015ae 0786      	CPC  R24,R22
0015af f020      	BRLO __CMPF122
0015b0 f031      	BREQ __CMPF123
                 __CMPF121:
0015b1 9498      	CLZ
0015b2 9488      	CLC
0015b3 9508      	RET
                 __CMPF122:
0015b4 9498      	CLZ
0015b5 9408      	SEC
0015b6 9508      	RET
                 __CMPF123:
0015b7 9418      	SEZ
0015b8 9488      	CLC
0015b9 9508      	RET
                 __CMPF120:
0015ba 2377      	TST  R23
0015bb f7c2      	BRPL __CMPF122
0015bc 1797      	CP   R25,R23
0015bd f398      	BRLO __CMPF121
0015be f7a9      	BRNE __CMPF122
0015bf 17ea      	CP   R30,R26
0015c0 07fb      	CPC  R31,R27
0015c1 0768      	CPC  R22,R24
0015c2 f388      	BRLO __CMPF122
0015c3 f399      	BREQ __CMPF123
0015c4 cfec      	RJMP __CMPF121
                 
                 __ADDD12:
0015c5 0fea      	ADD  R30,R26
0015c6 1ffb      	ADC  R31,R27
0015c7 1f68      	ADC  R22,R24
0015c8 1f79      	ADC  R23,R25
0015c9 9508      	RET
                 
                 __SUBD12:
0015ca 1bea      	SUB  R30,R26
0015cb 0bfb      	SBC  R31,R27
0015cc 0b68      	SBC  R22,R24
0015cd 0b79      	SBC  R23,R25
0015ce 9508      	RET
                 
                 __SUBD21:
0015cf 1bae      	SUB  R26,R30
0015d0 0bbf      	SBC  R27,R31
0015d1 0b86      	SBC  R24,R22
0015d2 0b97      	SBC  R25,R23
0015d3 9508      	RET
                 
                 __ANEGW1:
0015d4 95f1      	NEG  R31
0015d5 95e1      	NEG  R30
0015d6 40f0      	SBCI R31,0
0015d7 9508      	RET
                 
                 __ANEGD1:
0015d8 95f0      	COM  R31
0015d9 9560      	COM  R22
0015da 9570      	COM  R23
0015db 95e1      	NEG  R30
0015dc 4fff      	SBCI R31,-1
0015dd 4f6f      	SBCI R22,-1
0015de 4f7f      	SBCI R23,-1
0015df 9508      	RET
                 
                 __LSLB12:
0015e0 23ee      	TST  R30
0015e1 2e0e      	MOV  R0,R30
0015e2 2fea      	MOV  R30,R26
0015e3 f019      	BREQ __LSLB12R
                 __LSLB12L:
0015e4 0fee      	LSL  R30
0015e5 940a      	DEC  R0
0015e6 f7e9      	BRNE __LSLB12L
                 __LSLB12R:
0015e7 9508      	RET
                 
                 __LSLD12:
0015e8 23ee      	TST  R30
0015e9 2e0e      	MOV  R0,R30
0015ea 01fd      	MOVW R30,R26
0015eb 01bc      	MOVW R22,R24
0015ec f031      	BREQ __LSLD12R
                 __LSLD12L:
0015ed 0fee      	LSL  R30
0015ee 1fff      	ROL  R31
0015ef 1f66      	ROL  R22
0015f0 1f77      	ROL  R23
0015f1 940a      	DEC  R0
0015f2 f7d1      	BRNE __LSLD12L
                 __LSLD12R:
0015f3 9508      	RET
                 
                 __ASRD12:
0015f4 23ee      	TST  R30
0015f5 2e0e      	MOV  R0,R30
0015f6 01fd      	MOVW R30,R26
0015f7 01bc      	MOVW R22,R24
0015f8 f031      	BREQ __ASRD12R
                 __ASRD12L:
0015f9 9575      	ASR  R23
0015fa 9567      	ROR  R22
0015fb 95f7      	ROR  R31
0015fc 95e7      	ROR  R30
0015fd 940a      	DEC  R0
0015fe f7d1      	BRNE __ASRD12L
                 __ASRD12R:
0015ff 9508      	RET
                 
                 __LSRD12:
001600 23ee      	TST  R30
001601 2e0e      	MOV  R0,R30
001602 01fd      	MOVW R30,R26
001603 01bc      	MOVW R22,R24
001604 f031      	BREQ __LSRD12R
                 __LSRD12L:
001605 9576      	LSR  R23
001606 9567      	ROR  R22
001607 95f7      	ROR  R31
001608 95e7      	ROR  R30
001609 940a      	DEC  R0
00160a f7d1      	BRNE __LSRD12L
                 __LSRD12R:
00160b 9508      	RET
                 
                 __ASRD1:
00160c 9575      	ASR  R23
00160d 9567      	ROR  R22
00160e 95f7      	ROR  R31
00160f 95e7      	ROR  R30
001610 9508      	RET
                 
                 __LSRW3:
001611 95f6      	LSR  R31
001612 95e7      	ROR  R30
                 __LSRW2:
001613 95f6      	LSR  R31
001614 95e7      	ROR  R30
001615 95f6      	LSR  R31
001616 95e7      	ROR  R30
001617 9508      	RET
                 
                 __LSLD1:
001618 0fee      	LSL  R30
001619 1fff      	ROL  R31
00161a 1f66      	ROL  R22
00161b 1f77      	ROL  R23
00161c 9508      	RET
                 
                 __ASRD16:
00161d 2fe6      	MOV  R30,R22
00161e 2ff7      	MOV  R31,R23
00161f 2766      	CLR  R22
001620 fdf7      	SBRC R31,7
001621 ef6f      	SER  R22
001622 2f76      	MOV  R23,R22
001623 9508      	RET
                 
                 __CWD1:
001624 2f6f      	MOV  R22,R31
001625 0f66      	ADD  R22,R22
001626 0b66      	SBC  R22,R22
001627 2f76      	MOV  R23,R22
001628 9508      	RET
                 
                 __CWD2:
001629 2f8b      	MOV  R24,R27
00162a 0f88      	ADD  R24,R24
00162b 0b88      	SBC  R24,R24
00162c 2f98      	MOV  R25,R24
00162d 9508      	RET
                 
                 __EQB12:
00162e 17ea      	CP   R30,R26
00162f e0e1      	LDI  R30,1
001630 f009      	BREQ __EQB12T
001631 27ee      	CLR  R30
                 __EQB12T:
001632 9508      	RET
                 
                 __MULW12U:
001633 9ffa      	MUL  R31,R26
001634 2df0      	MOV  R31,R0
001635 9feb      	MUL  R30,R27
001636 0df0      	ADD  R31,R0
001637 9fea      	MUL  R30,R26
001638 2de0      	MOV  R30,R0
001639 0df1      	ADD  R31,R1
00163a 9508      	RET
                 
                 __MULD12U:
00163b 9f7a      	MUL  R23,R26
00163c 2d70      	MOV  R23,R0
00163d 9f6b      	MUL  R22,R27
00163e 0d70      	ADD  R23,R0
00163f 9ff8      	MUL  R31,R24
001640 0d70      	ADD  R23,R0
001641 9fe9      	MUL  R30,R25
001642 0d70      	ADD  R23,R0
001643 9f6a      	MUL  R22,R26
001644 2d60      	MOV  R22,R0
001645 0d71      	ADD  R23,R1
001646 9ffb      	MUL  R31,R27
001647 0d60      	ADD  R22,R0
001648 1d71      	ADC  R23,R1
001649 9fe8      	MUL  R30,R24
00164a 0d60      	ADD  R22,R0
00164b 1d71      	ADC  R23,R1
00164c 2788      	CLR  R24
00164d 9ffa      	MUL  R31,R26
00164e 2df0      	MOV  R31,R0
00164f 0d61      	ADD  R22,R1
001650 1f78      	ADC  R23,R24
001651 9feb      	MUL  R30,R27
001652 0df0      	ADD  R31,R0
001653 1d61      	ADC  R22,R1
001654 1f78      	ADC  R23,R24
001655 9fea      	MUL  R30,R26
001656 2de0      	MOV  R30,R0
001657 0df1      	ADD  R31,R1
001658 1f68      	ADC  R22,R24
001659 1f78      	ADC  R23,R24
00165a 9508      	RET
                 
                 __MULW12:
00165b d04b      	RCALL __CHKSIGNW
00165c dfd6      	RCALL __MULW12U
00165d f40e      	BRTC __MULW121
00165e df75      	RCALL __ANEGW1
                 __MULW121:
00165f 9508      	RET
                 
                 __MULD12:
001660 d054      	RCALL __CHKSIGND
001661 dfd9      	RCALL __MULD12U
001662 f40e      	BRTC __MULD121
001663 df74      	RCALL __ANEGD1
                 __MULD121:
001664 9508      	RET
                 
                 __DIVW21U:
001665 2400      	CLR  R0
001666 2411      	CLR  R1
001667 e190      	LDI  R25,16
                 __DIVW21U1:
001668 0faa      	LSL  R26
001669 1fbb      	ROL  R27
00166a 1c00      	ROL  R0
00166b 1c11      	ROL  R1
00166c 1a0e      	SUB  R0,R30
00166d 0a1f      	SBC  R1,R31
00166e f418      	BRCC __DIVW21U2
00166f 0e0e      	ADD  R0,R30
001670 1e1f      	ADC  R1,R31
001671 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
001672 60a1      	SBR  R26,1
                 __DIVW21U3:
001673 959a      	DEC  R25
001674 f799      	BRNE __DIVW21U1
001675 01fd      	MOVW R30,R26
001676 01d0      	MOVW R26,R0
001677 9508      	RET
                 
                 __DIVW21:
001678 d02e      	RCALL __CHKSIGNW
001679 dfeb      	RCALL __DIVW21U
00167a f40e      	BRTC __DIVW211
00167b df58      	RCALL __ANEGW1
                 __DIVW211:
00167c 9508      	RET
                 
                 __DIVD21U:
00167d 933f      	PUSH R19
00167e 934f      	PUSH R20
00167f 935f      	PUSH R21
001680 2400      	CLR  R0
001681 2411      	CLR  R1
001682 2744      	CLR  R20
001683 2755      	CLR  R21
001684 e230      	LDI  R19,32
                 __DIVD21U1:
001685 0faa      	LSL  R26
001686 1fbb      	ROL  R27
001687 1f88      	ROL  R24
001688 1f99      	ROL  R25
001689 1c00      	ROL  R0
00168a 1c11      	ROL  R1
00168b 1f44      	ROL  R20
00168c 1f55      	ROL  R21
00168d 1a0e      	SUB  R0,R30
00168e 0a1f      	SBC  R1,R31
00168f 0b46      	SBC  R20,R22
001690 0b57      	SBC  R21,R23
001691 f428      	BRCC __DIVD21U2
001692 0e0e      	ADD  R0,R30
001693 1e1f      	ADC  R1,R31
001694 1f46      	ADC  R20,R22
001695 1f57      	ADC  R21,R23
001696 c001      	RJMP __DIVD21U3
                 __DIVD21U2:
001697 60a1      	SBR  R26,1
                 __DIVD21U3:
001698 953a      	DEC  R19
001699 f759      	BRNE __DIVD21U1
00169a 01fd      	MOVW R30,R26
00169b 01bc      	MOVW R22,R24
00169c 01d0      	MOVW R26,R0
00169d 01ca      	MOVW R24,R20
00169e 915f      	POP  R21
00169f 914f      	POP  R20
0016a0 913f      	POP  R19
0016a1 9508      	RET
                 
                 __DIVD21:
0016a2 d012      	RCALL __CHKSIGND
0016a3 dfd9      	RCALL __DIVD21U
0016a4 f40e      	BRTC __DIVD211
0016a5 df32      	RCALL __ANEGD1
                 __DIVD211:
0016a6 9508      	RET
                 
                 __CHKSIGNW:
0016a7 94e8      	CLT
0016a8 fff7      	SBRS R31,7
0016a9 c002      	RJMP __CHKSW1
0016aa df29      	RCALL __ANEGW1
0016ab 9468      	SET
                 __CHKSW1:
0016ac ffb7      	SBRS R27,7
0016ad c006      	RJMP __CHKSW2
0016ae 95a0      	COM  R26
0016af 95b0      	COM  R27
0016b0 9611      	ADIW R26,1
0016b1 f800      	BLD  R0,0
0016b2 9403      	INC  R0
0016b3 fa00      	BST  R0,0
                 __CHKSW2:
0016b4 9508      	RET
                 
                 __CHKSIGND:
0016b5 94e8      	CLT
0016b6 ff77      	SBRS R23,7
0016b7 c002      	RJMP __CHKSD1
0016b8 df1f      	RCALL __ANEGD1
0016b9 9468      	SET
                 __CHKSD1:
0016ba ff97      	SBRS R25,7
0016bb c00b      	RJMP __CHKSD2
0016bc 2400      	CLR  R0
0016bd 95a0      	COM  R26
0016be 95b0      	COM  R27
0016bf 9580      	COM  R24
0016c0 9590      	COM  R25
0016c1 9611      	ADIW R26,1
0016c2 1d80      	ADC  R24,R0
0016c3 1d90      	ADC  R25,R0
0016c4 f800      	BLD  R0,0
0016c5 9403      	INC  R0
0016c6 fa00      	BST  R0,0
                 __CHKSD2:
0016c7 9508      	RET
                 
                 __PUTDP1:
0016c8 93ed      	ST   X+,R30
0016c9 93fd      	ST   X+,R31
0016ca 936d      	ST   X+,R22
0016cb 937c      	ST   X,R23
0016cc 9508      	RET
                 
                 __GETD1S0:
0016cd 81e8      	LD   R30,Y
0016ce 81f9      	LDD  R31,Y+1
0016cf 816a      	LDD  R22,Y+2
0016d0 817b      	LDD  R23,Y+3
0016d1 9508      	RET
                 
                 __GETD2S0:
0016d2 81a8      	LD   R26,Y
0016d3 81b9      	LDD  R27,Y+1
0016d4 818a      	LDD  R24,Y+2
0016d5 819b      	LDD  R25,Y+3
0016d6 9508      	RET
                 
                 __PUTD1S0:
0016d7 83e8      	ST   Y,R30
0016d8 83f9      	STD  Y+1,R31
0016d9 836a      	STD  Y+2,R22
0016da 837b      	STD  Y+3,R23
0016db 9508      	RET
                 
                 __PUTPARD1:
0016dc 937a      	ST   -Y,R23
0016dd 936a      	ST   -Y,R22
0016de 93fa      	ST   -Y,R31
0016df 93ea      	ST   -Y,R30
0016e0 9508      	RET
                 
                 __PUTPARD2:
0016e1 939a      	ST   -Y,R25
0016e2 938a      	ST   -Y,R24
0016e3 93ba      	ST   -Y,R27
0016e4 93aa      	ST   -Y,R26
0016e5 9508      	RET
                 
                 __CDF2U:
0016e6 9468      	SET
0016e7 c001      	RJMP __CDF2U0
                 __CDF2:
0016e8 94e8      	CLT
                 __CDF2U0:
0016e9 d001      	RCALL __SWAPD12
0016ea dd9e      	RCALL __CDF1U0
                 
                 __SWAPD12:
0016eb 2e18      	MOV  R1,R24
0016ec 2f86      	MOV  R24,R22
0016ed 2d61      	MOV  R22,R1
0016ee 2e19      	MOV  R1,R25
0016ef 2f97      	MOV  R25,R23
0016f0 2d71      	MOV  R23,R1
                 
                 __SWAPW12:
0016f1 2e1b      	MOV  R1,R27
0016f2 2fbf      	MOV  R27,R31
0016f3 2df1      	MOV  R31,R1
                 
                 __SWAPB12:
0016f4 2e1a      	MOV  R1,R26
0016f5 2fae      	MOV  R26,R30
0016f6 2de1      	MOV  R30,R1
0016f7 9508      	RET
                 
                 __EEPROMRDB:
0016f8 99f9      	SBIC EECR,EEWE
0016f9 cffe      	RJMP __EEPROMRDB
0016fa 93ff      	PUSH R31
0016fb b7ff      	IN   R31,SREG
0016fc 94f8      	CLI
0016fd bda1      	OUT  EEARL,R26
0016fe bdb2      	OUT  EEARH,R27
0016ff 9af8      	SBI  EECR,EERE
001700 b5e0      	IN   R30,EEDR
001701 bfff      	OUT  SREG,R31
001702 91ff      	POP  R31
001703 9508      	RET
                 
                 __EEPROMWRB:
001704 9bf9      	SBIS EECR,EEWE
001705 c002      	RJMP __EEPROMWRB1
001706 95a8      	WDR
001707 cffc      	RJMP __EEPROMWRB
                 __EEPROMWRB1:
001708 b79f      	IN   R25,SREG
001709 94f8      	CLI
00170a bda1      	OUT  EEARL,R26
00170b bdb2      	OUT  EEARH,R27
00170c 9af8      	SBI  EECR,EERE
00170d b580      	IN   R24,EEDR
00170e 17e8      	CP   R30,R24
00170f f019      	BREQ __EEPROMWRB0
001710 bde0      	OUT  EEDR,R30
001711 9afa      	SBI  EECR,EEMWE
001712 9af9      	SBI  EECR,EEWE
                 __EEPROMWRB0:
001713 bf9f      	OUT  SREG,R25
001714 9508      	RET
                 
                 __CPD10:
001715 9730      	SBIW R30,0
001716 4060      	SBCI R22,0
001717 4070      	SBCI R23,0
001718 9508      	RET
                 
                 __CPD02:
001719 2400      	CLR  R0
00171a 160a      	CP   R0,R26
00171b 060b      	CPC  R0,R27
00171c 0608      	CPC  R0,R24
00171d 0609      	CPC  R0,R25
00171e 9508      	RET
                 
                 __CPD12:
00171f 17ea      	CP   R30,R26
001720 07fb      	CPC  R31,R27
001721 0768      	CPC  R22,R24
001722 0779      	CPC  R23,R25
001723 9508      	RET
                 
                 __SAVELOCR6:
001724 935a      	ST   -Y,R21
                 __SAVELOCR5:
001725 934a      	ST   -Y,R20
                 __SAVELOCR4:
001726 933a      	ST   -Y,R19
                 __SAVELOCR3:
001727 932a      	ST   -Y,R18
                 __SAVELOCR2:
001728 931a      	ST   -Y,R17
001729 930a      	ST   -Y,R16
00172a 9508      	RET
                 
                 __LOADLOCR6:
00172b 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
00172c 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
00172d 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
00172e 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
00172f 8119      	LDD  R17,Y+1
001730 8108      	LD   R16,Y
001731 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega328P register use summary:
r0 :  85 r1 :  51 r2 :   0 r3 :   7 r4 :   6 r5 :   6 r6 :   6 r7 :   5 
r8 :  22 r9 :  36 r10:   4 r11:   5 r12:   4 r13:  16 r14:  15 r15:   2 
r16:  37 r17: 117 r18:  37 r19:  30 r20:  40 r21:  71 r22: 227 r23: 207 
r24: 214 r25: 167 r26: 420 r27: 276 r28:  39 r29:   3 r30:1453 r31: 412 
x  :  25 y  : 410 z  :  35 
Registers used: 34 out of 35 (97.1%)

ATmega328P instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  44 add   :  35 
adiw  :  36 and   :   5 andi  :  29 asr   :   2 bclr  :   0 bld   :   4 
brbc  :   0 brbs  :   0 brcc  :   9 brcs  :   2 break :   0 breq  :  93 
brge  :  14 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  23 
brlt  :   3 brmi  :  10 brne  :  60 brpl  :   8 brsh  :  16 brtc  :   6 
brts  :   3 brvc  :   4 brvs  :   4 bset  :   0 bst   :   6 call  : 229 
cbi   :  26 cbr   :   1 clc   :   3 clh   :   0 cli   :   4 cln   :   0 
clr   :  63 cls   :   0 clt   :   6 clv   :   0 clz   :   2 com   :  14 
cp    :  40 cpc   :  73 cpi   :  99 cpse  :   0 dec   :  25 des   :   0 
eor   :   7 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   4 ijmp  :   0 
in    :  13 inc   :  23 jmp   : 163 ld    :  91 ldd   : 185 ldi   : 720 
lds   : 416 lpm   :   9 lsl   :  21 lsr   :   9 mov   : 153 movw  :  85 
mul   :  32 muls  :   0 mulsu :   0 neg   :   4 nop   :  16 or    :  24 
ori   :  28 out   :  31 pop   :  62 push  :  57 rcall :  36 ret   : 102 
reti  :   5 rjmp  : 164 rol   :  42 ror   :  29 sbc   :  30 sbci  :  64 
sbi   :  28 sbic  :   8 sbis  :  16 sbiw  :  30 sbr   :   4 sbrc  :   2 
sbrs  :   5 sec   :   5 seh   :   0 sei   :   4 sen   :   0 ser   :   9 
ses   :   0 set   :   5 sev   :   0 sez   :   1 sleep :   0 spm   :   0 
st    : 126 std   :  60 sts   : 500 sub   :  19 subi  :  84 swap  :   1 
tst   :  23 wdr   :   2 
Instructions used: 85 out of 116 (73.3%)

ATmega328P memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x002e64  11730    146  11876   32768  36.2%
[.dseg] 0x000100 0x00050f      0    527    527    2048  25.7%
[.eseg] 0x000000 0x000004      0      4      4    1024   0.4%

Assembly complete, 0 errors, 19 warnings
